{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 00c62eefb5f9367870cb","webpack:///./js/index.js","webpack:///../~/three/build/three.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_three","global","factory","this","EventDispatcher","Vector2","x","y","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","Object","defineProperty","value","TextureIdCount","uuid","Math","generateUUID","name","sourceFile","undefined","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","offset","repeat","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","count","Vector4","z","w","WebGLRenderTarget","width","height","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","Quaternion","_x","_y","_z","_w","Vector3","Matrix4","elements","Float32Array","arguments","length","console","error","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","map","flatten","array","nBlocks","blockSize","firstElem","n","r","arrayCacheF32","toArray","i","allocTexUnits","renderer","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","gl","v","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","g","b","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","push","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","Color","set","setRGB","Box2","min","max","Infinity","LensFlarePlugin","flares","init","vertices","faces","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","state","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","join","fragmentShader","createProgram","attributes","vertex","getAttribLocation","uv","uniforms","renderType","occlusionMap","opacity","color","scale","rotation","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","context","render","scene","camera","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","disable","CULL_FACE","setDepthWrite","l","flare","matrixWorld","applyMatrix4","matrixWorldInverse","applyProjection","projectionMatrix","copy","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","enable","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","positionScreen","customUpdateCallback","updateLensFlares","j","jl","lensFlares","sprite","setBlending","blending","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","position","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","canvas","document","createElementNS","getContext","fillStyle","fillRect","needsUpdate","painterSortStable","a","renderOrder","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","near","far","isFogExp2","density","multiplyMatrices","sort","material","visible","decompose","setDepthTest","depthTest","depthWrite","Material","MaterialIdCount","lights","NormalBlending","side","FrontSide","shading","SmoothShading","vertexColors","NoColors","transparent","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","count$1","ShaderMaterial","parameters","defines","linewidth","wireframe","wireframeLinewidth","clipping","skinning","morphTargets","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv2","index0AttributeName","setValues","MeshDepthMaterial","depthPacking","BasicDepthPacking","alphaMap","displacementMap","displacementScale","displacementBias","Box3","Sphere","center","radius","Matrix3","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_lights","_objects","capabilities","getDepthMaterial","object","isPointLight","lightPositionWorld","geometry","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","clone","scope","renderSingleSided","DoubleSide","renderReverseSided","BackSide","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","castShadow","frustumCulled","_frustum","intersectsObject","_renderList","children","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","Array","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","enabled","autoUpdate","PCFShadowMap","clearColor","setScissorTest","faceCount","il","light","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","updateProjectionMatrix","isSpotLightShadow","update","shadowMap","shadowMatrix","matrix","setFromMatrixPosition","setRenderTarget","clear","face","add","up","lookAt","vpDimensions","target","updateMatrixWorld","getInverse","multiply","setFromMatrix","isMultiMaterial","groups","materials","k","kl","group","groupMaterial","materialIndex","renderBufferDirect","warn","getClearColor","clearAlpha","getClearAlpha","setClearColor","Ray","origin","direction","Euler","order","_order","DefaultOrder","Layers","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","Object3DIdCount","parent","DefaultUp","onChange","defineProperties","enumerable","normalMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","receiveShadow","userData","onBeforeRender","count$2","Line3","start","end","Triangle","Face3","isVector3","vertexNormals","isArray","isColor","MeshBasicMaterial","aoMap","aoMapIntensity","specularMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframeLinecap","wireframeLinejoin","BufferAttribute","itemSize","normalized","TypeError","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","Geometry","GeometryIdCount","colors","faceVertexUvs","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","indices","normals","uvs","uvs2","BufferGeometry","index","drawRange","Mesh","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depth","widthSegments","heightSegments","depthSegments","calculateVertexCount","h","d","calculateIndexCount","buildPlane","u","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","floor","vertexCount","indexCount","setIndex","addAttribute","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","offset2","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","OrthographicCamera","left","right","top","bottom","WebGLIndexedBufferRenderer","infoRender","setMode","mode","get","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","data","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","skyColor","groundColor","addLineNumbers","string","lines","split","WebGLShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","Error","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","normalMap","flatShading","logarithmicDepthBuffer","filter","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","pattern","unrollLoops","snippet","unroll","parseInt","WebGLProgram","code","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","supportsVertexTextures","maxBones","lightMap","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","log","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","hemi","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","indexOf","pop","WebGLGeometries","properties","onGeometryDispose","event","buffergeometry","geometries","deleteAttribute","deleteAttributes","removeEventListener","property","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","addEventListener","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","f","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","dispose","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","complete","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","RGBFormat","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","delete","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","setClear","equals","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","AdditiveBlending","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","MultiplyBlending","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setLineWidth","currentLineWidth","lineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","apply","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","multiplyScalar","_currentViewport","_viewport","_clearColor","_clearAlpha","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","objects","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","abs","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","sphere","intersectsSphere","_clipping","_this","negRad","distanceToPoint","isLight","isSprite","isLensFlare","isImmediateRenderObject","sortObjects","renderObjects","renderList","overrideMaterial","setMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","ambient","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","dynamicUniforms","splitDynamic","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","dynUniforms","evalDynamic","diffuse","emissive","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","dashSize","totalSize","gapSize","_canvas","clientHeight","lightMapIntensity","specular","shininess","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","ll","intensity","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","sub","transformDirection","bias","isSpotLight","cos","angle","penumbra","negate","identity","setPosition","isHemisphereLight","normalize","textureUnit","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT1_Format","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_S3TC_DXT3_Format","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_S3TC_DXT5_Format","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1_Format","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MIN_EXT","MaxEquation","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","REVISION","_context","_alpha","alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","morphInfluences","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","getPixelRatio","setPixelRatio","setSize","getSize","updateStyle","style","setViewport","setScissor","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","morphTargetInfluences","activeInfluences","influence","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","forceClear","isCamera","background","extractRotation","setFaceCulling","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","Scene","LensFlare","SpriteMaterial","Sprite","LOD","levels","DataTexture","Skeleton","boneInverses","identityMatrix","slice","sqrt","nextPowerOfTwo","ceil","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","fromArray","pos","rotq","scl","normalizeSkinWeights","bind","linecap","linejoin","Line","LineSegments","Points","Group","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","keys","numEdges","edges","key","toString","coords","o","ol","index2","getX","getY","getZ","numTris","index1","ParametricGeometry","func","slices","stacks","verts","sliceCount","uva","uvb","uvc","uvd","computeFaceNormals","computeVertexNormals","PolyhedronGeometry","detail","prepare","that","azimuth","PI","inclination","make","v1","v2","v3","centroid","divideScalar","azi","correctUV","subdivide","cols","pow","aj","lerp","bj","rows","atan2","x0","x1","x2","mergeVertices","TetrahedronGeometry","OctahedronGeometry","IcosahedronGeometry","t","DodecahedronGeometry","TubeGeometry","segments","radialSegments","closed","taper","vert","NoTaper","tangent","binormal","cx","cy","ip","jp","grid","numpoints","pos2","frames","FrenetFrames","tangents","binormals","getPointAt","sin","TorusKnotBufferGeometry","tube","tubularSegments","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","B","T","N","subVectors","addVectors","crossVectors","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","fromBufferGeometry","TorusBufferGeometry","arc","TorusGeometry","ExtrudeGeometry","shapes","addShapeList","TextGeometry","text","font","isFont","generateShapes","curveSegments","amount","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","phiStart","phiLength","thetaStart","thetaLength","thetaEnd","positions","verticesRow","px","py","pz","v4","SphereGeometry","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","clamp","base","inverseSegments","phi","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","dot","CylinderBufferGeometry","radiusTop","radiusBottom","openEnded","nbCap","generateTorso","slope","indexRow","theta","sinTheta","cosTheta","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","sign","CylinderGeometry","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","s","ii","CircleGeometry","BoxGeometry","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","MultiMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","url","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Light","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","constructor","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","v0","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","window","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","AudioListener","gain","createGain","connect","destination","Audio","listener","source","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","AnimationObjectGroup","var_args","prototype","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","LoopRepeat","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t2","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","distanceTo","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Spherical","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","hex","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","VertexColors","PointLightHelper","sphereSize","HemisphereLightHelper","rotateX","FaceColors","lightSphere","GridHelper","divisions","color1","color2","step","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","dir","headLength","headWidth","line","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Projector","projectVector","project","unprojectVector","unproject","pickingRay","CanvasRenderer","Number","EPSILON","Function","assign","output","nextKey","hasOwnProperty","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","UVMapping","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToSquared","dx","dy","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","wrap","transformUv","isVector4","setZ","setW","e","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","create","onChangeCallback","euler","isEuler","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","EPS","vFrom","vTo","inverse","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","callback","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","len","tDir","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","copyPosition","me","extractBasis","xAxis","yAxis","zAxis","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","y2","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","transpose","tmp","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","tan","ymin","xmin","xmax","makeOrthographic","onUpdateCallback","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","parseFloat","charAt","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","basic","lambert","phong","standard","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","getCenter","expandByVector","expandByScalar","containsBox","intersectsBox","clampPoint","clampedPoint","intersect","union","translate","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","traverse","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsSprite","negRadius","d1","d2","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","test","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","isRootObject","JSON","stringify","parse","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","minDistance","isBufferAttribute","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","computeBoundingBox","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","tl","targets","uvs_f","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","getTangentAt","ShapeUtils","contour","triangulate","snip","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","concat","failedCuts","hl","minShapeIndex","counter","h2","forEach","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","freeze","isShadowMaterial","Materials","Cache","files","file","load","cached","setTimeout","request","XMLHttpRequest","open","response","status","responseType","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loadTexture","loader","texDatas","mipmapCount","isCubemap","DataTextureLoader","texData","onload","URL","revokeObjectURL","src","blob","createObjectURL","setCrossOrigin","crossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","trim","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","toLowerCase","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","offsets","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","regex","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getPointFunc","isLineCurve","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","resolution","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","String","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","setNodeSource","audioNode","setBuffer","play","pause","stop","currentTime","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","instances","isInterleavedBuffer","setFromCamera","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","setColors","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","LinePieces","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","MeshFaceMaterial","Particle"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _three = __webpack_require__(1);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t     true ? factory(exports) :\n\t    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t    (factory((global.THREE = global.THREE || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\t    // Polyfills\n\t\n\t    if ( Number.EPSILON === undefined ) {\n\t\n\t    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t    }\n\t\n\t    //\n\t\n\t    if ( Math.sign === undefined ) {\n\t\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t    \tMath.sign = function ( x ) {\n\t\n\t    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    if ( Function.prototype.name === undefined ) {\n\t\n\t    \t// Missing in IE9-11.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t    \tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t    \t\tget: function () {\n\t\n\t    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t    }\n\t\n\t    if ( Object.assign === undefined ) {\n\t\n\t    \t// Missing in IE.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t    \t( function () {\n\t\n\t    \t\tObject.assign = function ( target ) {\n\t\n\t    \t\t\t'use strict';\n\t\n\t    \t\t\tif ( target === undefined || target === null ) {\n\t\n\t    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar output = Object( target );\n\t\n\t    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t    \t\t\t\tvar source = arguments[ index ];\n\t\n\t    \t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t    \t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn output;\n\t\n\t    \t\t};\n\t\n\t    \t} )();\n\t\n\t    }\n\t\n\t    /**\n\t     * https://github.com/mrdoob/eventdispatcher.js/\n\t     */\n\t\n\t    function EventDispatcher() {}\n\t\n\t    Object.assign( EventDispatcher.prototype, {\n\t\n\t    \taddEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] === undefined ) {\n\t\n\t    \t\t\tlisteners[ type ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t    \t\t\tlisteners[ type ].push( listener );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \thasEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return false;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tremoveEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t    \t\t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tdispatchEvent: function ( event ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ event.type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tevent.target = this;\n\t\n\t    \t\t\tvar array = [], i = 0;\n\t    \t\t\tvar length = listenerArray.length;\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ].call( this, event );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var REVISION = '81';\n\t    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\t    var CullFaceNone = 0;\n\t    var CullFaceBack = 1;\n\t    var CullFaceFront = 2;\n\t    var CullFaceFrontBack = 3;\n\t    var FrontFaceDirectionCW = 0;\n\t    var FrontFaceDirectionCCW = 1;\n\t    var BasicShadowMap = 0;\n\t    var PCFShadowMap = 1;\n\t    var PCFSoftShadowMap = 2;\n\t    var FrontSide = 0;\n\t    var BackSide = 1;\n\t    var DoubleSide = 2;\n\t    var FlatShading = 1;\n\t    var SmoothShading = 2;\n\t    var NoColors = 0;\n\t    var FaceColors = 1;\n\t    var VertexColors = 2;\n\t    var NoBlending = 0;\n\t    var NormalBlending = 1;\n\t    var AdditiveBlending = 2;\n\t    var SubtractiveBlending = 3;\n\t    var MultiplyBlending = 4;\n\t    var CustomBlending = 5;\n\t    var BlendingMode = {\n\t        NoBlending: NoBlending,\n\t        NormalBlending: NormalBlending,\n\t        AdditiveBlending: AdditiveBlending,\n\t        SubtractiveBlending: SubtractiveBlending,\n\t        MultiplyBlending: MultiplyBlending,\n\t        CustomBlending: CustomBlending\n\t    };\n\t    var AddEquation = 100;\n\t    var SubtractEquation = 101;\n\t    var ReverseSubtractEquation = 102;\n\t    var MinEquation = 103;\n\t    var MaxEquation = 104;\n\t    var ZeroFactor = 200;\n\t    var OneFactor = 201;\n\t    var SrcColorFactor = 202;\n\t    var OneMinusSrcColorFactor = 203;\n\t    var SrcAlphaFactor = 204;\n\t    var OneMinusSrcAlphaFactor = 205;\n\t    var DstAlphaFactor = 206;\n\t    var OneMinusDstAlphaFactor = 207;\n\t    var DstColorFactor = 208;\n\t    var OneMinusDstColorFactor = 209;\n\t    var SrcAlphaSaturateFactor = 210;\n\t    var NeverDepth = 0;\n\t    var AlwaysDepth = 1;\n\t    var LessDepth = 2;\n\t    var LessEqualDepth = 3;\n\t    var EqualDepth = 4;\n\t    var GreaterEqualDepth = 5;\n\t    var GreaterDepth = 6;\n\t    var NotEqualDepth = 7;\n\t    var MultiplyOperation = 0;\n\t    var MixOperation = 1;\n\t    var AddOperation = 2;\n\t    var NoToneMapping = 0;\n\t    var LinearToneMapping = 1;\n\t    var ReinhardToneMapping = 2;\n\t    var Uncharted2ToneMapping = 3;\n\t    var CineonToneMapping = 4;\n\t    var UVMapping = 300;\n\t    var CubeReflectionMapping = 301;\n\t    var CubeRefractionMapping = 302;\n\t    var EquirectangularReflectionMapping = 303;\n\t    var EquirectangularRefractionMapping = 304;\n\t    var SphericalReflectionMapping = 305;\n\t    var CubeUVReflectionMapping = 306;\n\t    var CubeUVRefractionMapping = 307;\n\t    var TextureMapping = {\n\t        UVMapping: UVMapping,\n\t        CubeReflectionMapping: CubeReflectionMapping,\n\t        CubeRefractionMapping: CubeRefractionMapping,\n\t        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t        SphericalReflectionMapping: SphericalReflectionMapping,\n\t        CubeUVReflectionMapping: CubeUVReflectionMapping,\n\t        CubeUVRefractionMapping: CubeUVRefractionMapping\n\t    };\n\t    var RepeatWrapping = 1000;\n\t    var ClampToEdgeWrapping = 1001;\n\t    var MirroredRepeatWrapping = 1002;\n\t    var TextureWrapping = {\n\t        RepeatWrapping: RepeatWrapping,\n\t        ClampToEdgeWrapping: ClampToEdgeWrapping,\n\t        MirroredRepeatWrapping: MirroredRepeatWrapping\n\t    };\n\t    var NearestFilter = 1003;\n\t    var NearestMipMapNearestFilter = 1004;\n\t    var NearestMipMapLinearFilter = 1005;\n\t    var LinearFilter = 1006;\n\t    var LinearMipMapNearestFilter = 1007;\n\t    var LinearMipMapLinearFilter = 1008;\n\t    var TextureFilter = {\n\t        NearestFilter: NearestFilter,\n\t        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t        LinearFilter: LinearFilter,\n\t        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t    };\n\t    var UnsignedByteType = 1009;\n\t    var ByteType = 1010;\n\t    var ShortType = 1011;\n\t    var UnsignedShortType = 1012;\n\t    var IntType = 1013;\n\t    var UnsignedIntType = 1014;\n\t    var FloatType = 1015;\n\t    var HalfFloatType = 1016;\n\t    var UnsignedShort4444Type = 1017;\n\t    var UnsignedShort5551Type = 1018;\n\t    var UnsignedShort565Type = 1019;\n\t    var UnsignedInt248Type = 1020;\n\t    var AlphaFormat = 1021;\n\t    var RGBFormat = 1022;\n\t    var RGBAFormat = 1023;\n\t    var LuminanceFormat = 1024;\n\t    var LuminanceAlphaFormat = 1025;\n\t    var RGBEFormat = RGBAFormat;\n\t    var DepthFormat = 1026;\n\t    var DepthStencilFormat = 1027;\n\t    var RGB_S3TC_DXT1_Format = 2001;\n\t    var RGBA_S3TC_DXT1_Format = 2002;\n\t    var RGBA_S3TC_DXT3_Format = 2003;\n\t    var RGBA_S3TC_DXT5_Format = 2004;\n\t    var RGB_PVRTC_4BPPV1_Format = 2100;\n\t    var RGB_PVRTC_2BPPV1_Format = 2101;\n\t    var RGBA_PVRTC_4BPPV1_Format = 2102;\n\t    var RGBA_PVRTC_2BPPV1_Format = 2103;\n\t    var RGB_ETC1_Format = 2151;\n\t    var LoopOnce = 2200;\n\t    var LoopRepeat = 2201;\n\t    var LoopPingPong = 2202;\n\t    var InterpolateDiscrete = 2300;\n\t    var InterpolateLinear = 2301;\n\t    var InterpolateSmooth = 2302;\n\t    var ZeroCurvatureEnding = 2400;\n\t    var ZeroSlopeEnding = 2401;\n\t    var WrapAroundEnding = 2402;\n\t    var TrianglesDrawMode = 0;\n\t    var TriangleStripDrawMode = 1;\n\t    var TriangleFanDrawMode = 2;\n\t    var LinearEncoding = 3000;\n\t    var sRGBEncoding = 3001;\n\t    var GammaEncoding = 3007;\n\t    var RGBEEncoding = 3002;\n\t    var LogLuvEncoding = 3003;\n\t    var RGBM7Encoding = 3004;\n\t    var RGBM16Encoding = 3005;\n\t    var RGBDEncoding = 3006;\n\t    var BasicDepthPacking = 3200;\n\t    var RGBADepthPacking = 3201;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Math = {\n\t\n\t    \tDEG2RAD: Math.PI / 180,\n\t    \tRAD2DEG: 180 / Math.PI,\n\t\n\t    \tgenerateUUID: function () {\n\t\n\t    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t    \t\tvar uuid = new Array( 36 );\n\t    \t\tvar rnd = 0, r;\n\t\n\t    \t\treturn function generateUUID() {\n\t\n\t    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '-';\n\t\n\t    \t\t\t\t} else if ( i === 14 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '4';\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t    \t\t\t\t\tr = rnd & 0xf;\n\t    \t\t\t\t\trnd = rnd >> 4;\n\t    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn uuid.join( '' );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclamp: function ( value, min, max ) {\n\t\n\t    \t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t    \t},\n\t\n\t    \t// compute euclidian modulo of m % n\n\t    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t    \teuclideanModulo: function ( n, m ) {\n\t\n\t    \t\treturn ( ( n % m ) + m ) % m;\n\t\n\t    \t},\n\t\n\t    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t    \t},\n\t\n\t    \t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t    \tsmoothstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * ( 3 - 2 * x );\n\t\n\t    \t},\n\t\n\t    \tsmootherstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t    \t},\n\t\n\t    \trandom16: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t    \t\treturn Math.random();\n\t\n\t    \t},\n\t\n\t    \t// Random integer from <low, high> interval\n\t\n\t    \trandInt: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <low, high> interval\n\t\n\t    \trandFloat: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.random() * ( high - low );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <-range/2, range/2> interval\n\t\n\t    \trandFloatSpread: function ( range ) {\n\t\n\t    \t\treturn range * ( 0.5 - Math.random() );\n\t\n\t    \t},\n\t\n\t    \tdegToRad: function ( degrees ) {\n\t\n\t    \t\treturn degrees * exports.Math.DEG2RAD;\n\t\n\t    \t},\n\t\n\t    \tradToDeg: function ( radians ) {\n\t\n\t    \t\treturn radians * exports.Math.RAD2DEG;\n\t\n\t    \t},\n\t\n\t    \tisPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t    \t},\n\t\n\t    \tnearestPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t    \t},\n\t\n\t    \tnextPowerOfTwo: function ( value ) {\n\t\n\t    \t\tvalue --;\n\t    \t\tvalue |= value >> 1;\n\t    \t\tvalue |= value >> 2;\n\t    \t\tvalue |= value >> 4;\n\t    \t\tvalue |= value >> 8;\n\t    \t\tvalue |= value >> 16;\n\t    \t\tvalue ++;\n\t\n\t    \t\treturn value;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author egraether / http://egraether.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    function Vector2( x, y ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t\n\t    }\n\t\n\t    Vector2.prototype = {\n\t\n\t    \tconstructor: Vector2,\n\t\n\t    \tisVector2: true,\n\t\n\t    \tget width() {\n\t\n\t    \t\treturn this.x;\n\t\n\t    \t},\n\t\n\t    \tset width( value ) {\n\t\n\t    \t\tthis.x = value;\n\t\n\t    \t},\n\t\n\t    \tget height() {\n\t\n\t    \t\treturn this.y;\n\t\n\t    \t},\n\t\n\t    \tset height( value ) {\n\t\n\t    \t\tthis.y = value;\n\t\n\t    \t},\n\t\n\t    \t//\n\t\n\t    \tset: function ( x, y ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v ) {\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector2();\n\t    \t\t\t\tmax = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function() {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tangle: function () {\n\t\n\t    \t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t    \t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t    \t\treturn angle;\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t    \t\treturn dx * dx + dy * dy;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateAround: function ( center, angle ) {\n\t\n\t    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t    \t\tvar x = this.x - center.x;\n\t    \t\tvar y = this.y - center.y;\n\t\n\t    \t\tthis.x = x * c - y * s + center.x;\n\t    \t\tthis.y = x * s + y * c + center.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     */\n\t\n\t    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.sourceFile = '';\n\t\n\t    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t    \tthis.mipmaps = [];\n\t\n\t    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\n\t    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\t\n\t    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t    \tthis.format = format !== undefined ? format : RGBAFormat;\n\t    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\n\t    \tthis.offset = new Vector2( 0, 0 );\n\t    \tthis.repeat = new Vector2( 1, 1 );\n\t\n\t    \tthis.generateMipmaps = true;\n\t    \tthis.premultiplyAlpha = false;\n\t    \tthis.flipY = true;\n\t    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t    \t//\n\t    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\t\n\t    \tthis.version = 0;\n\t    \tthis.onUpdate = null;\n\t\n\t    }\n\t\n\t    Texture.DEFAULT_IMAGE = undefined;\n\t    Texture.DEFAULT_MAPPING = UVMapping;\n\t\n\t    Texture.prototype = {\n\t\n\t    \tconstructor: Texture,\n\t\n\t    \tisTexture: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.image = source.image;\n\t    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t    \t\tthis.mapping = source.mapping;\n\t\n\t    \t\tthis.wrapS = source.wrapS;\n\t    \t\tthis.wrapT = source.wrapT;\n\t\n\t    \t\tthis.magFilter = source.magFilter;\n\t    \t\tthis.minFilter = source.minFilter;\n\t\n\t    \t\tthis.anisotropy = source.anisotropy;\n\t\n\t    \t\tthis.format = source.format;\n\t    \t\tthis.type = source.type;\n\t\n\t    \t\tthis.offset.copy( source.offset );\n\t    \t\tthis.repeat.copy( source.repeat );\n\t\n\t    \t\tthis.generateMipmaps = source.generateMipmaps;\n\t    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t    \t\tthis.flipY = source.flipY;\n\t    \t\tthis.unpackAlignment = source.unpackAlignment;\n\t    \t\tthis.encoding = source.encoding;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t    \t\t\treturn meta.textures[ this.uuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getDataURL( image ) {\n\t\n\t    \t\t\tvar canvas;\n\t\n\t    \t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t    \t\t\t\tcanvas = image;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\t\tcanvas.width = image.width;\n\t    \t\t\t\tcanvas.height = image.height;\n\t\n\t    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Texture',\n\t    \t\t\t\tgenerator: 'Texture.toJSON'\n\t    \t\t\t},\n\t\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\tname: this.name,\n\t\n\t    \t\t\tmapping: this.mapping,\n\t\n\t    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t    \t\t\toffset: [ this.offset.x, this.offset.y ],\n\t    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t    \t\t\tminFilter: this.minFilter,\n\t    \t\t\tmagFilter: this.magFilter,\n\t    \t\t\tanisotropy: this.anisotropy,\n\t\n\t    \t\t\tflipY: this.flipY\n\t    \t\t};\n\t\n\t    \t\tif ( this.image !== undefined ) {\n\t\n\t    \t\t\t// TODO: Move to THREE.Image\n\t\n\t    \t\t\tvar image = this.image;\n\t\n\t    \t\t\tif ( image.uuid === undefined ) {\n\t\n\t    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.images[ image.uuid ] = {\n\t    \t\t\t\t\tuuid: image.uuid,\n\t    \t\t\t\t\turl: getDataURL( image )\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toutput.image = image.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tmeta.textures[ this.uuid ] = output;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t},\n\t\n\t    \ttransformUv: function ( uv ) {\n\t\n\t    \t\tif ( this.mapping !== UVMapping )  return;\n\t\n\t    \t\tuv.multiply( this.repeat );\n\t    \t\tuv.add( this.offset );\n\t\n\t    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapS ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapT ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.flipY ) {\n\t\n\t    \t\t\tuv.y = 1 - uv.y;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\t\n\t    var count = 0;\n\t    function TextureIdCount() { return count++; };\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector4( x, y, z, w ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t    \tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Vector4.prototype = {\n\t\n\t    \tconstructor: Vector4,\n\t\n\t    \tisVector4: true,\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t    \t\tthis.w = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( w ) {\n\t\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tcase 3: this.w = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tcase 3: return this.w;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t    \t\tthis.w += v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t    \t\tthis.w += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t    \t\tthis.w = a.w + b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t    \t\tthis.w += v.w * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t    \t\tthis.w -= v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t    \t\tthis.w -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t    \t\tthis.w = a.w - b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t    \t\t\tthis.w *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t    \t\t\tthis.w = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t    \t\t// q is assumed to be normalized\n\t\n\t    \t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t    \t\tif ( s < 0.0001 ) {\n\t\n\t    \t\t\t this.x = 1;\n\t    \t\t\t this.y = 0;\n\t    \t\t\t this.z = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t this.x = q.x / s;\n\t    \t\t\t this.y = q.y / s;\n\t    \t\t\t this.z = q.z / s;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar angle, x, y, z,\t\t// variables for result\n\t    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t    \t\t\tte = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t    \t\t\t// singularity found\n\t    \t\t\t// first check for identity matrix which must have +1 for all terms\n\t    \t\t\t// in leading diagonal and zero in other terms\n\t\n\t    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t    \t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t    \t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// otherwise this singularity is angle = 180\n\t\n\t    \t\t\tangle = Math.PI;\n\t\n\t    \t\t\tvar xx = ( m11 + 1 ) / 2;\n\t    \t\t\tvar yy = ( m22 + 1 ) / 2;\n\t    \t\t\tvar zz = ( m33 + 1 ) / 2;\n\t    \t\t\tvar xy = ( m12 + m21 ) / 4;\n\t    \t\t\tvar xz = ( m13 + m31 ) / 4;\n\t    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t    \t\t\t\t// m11 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( xx < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tx = Math.sqrt( xx );\n\t    \t\t\t\t\ty = xy / x;\n\t    \t\t\t\t\tz = xz / x;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( yy > zz ) {\n\t\n\t    \t\t\t\t// m22 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( yy < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ty = Math.sqrt( yy );\n\t    \t\t\t\t\tx = xy / y;\n\t    \t\t\t\t\tz = yz / y;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t    \t\t\t\tif ( zz < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tz = Math.sqrt( zz );\n\t    \t\t\t\t\tx = xz / z;\n\t    \t\t\t\t\ty = yz / z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.set( x, y, z, angle );\n\t\n\t    \t\t\treturn this; // return 180 deg rotation\n\t\n\t    \t\t}\n\t\n\t    \t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t    \t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t    \t\tthis.x = ( m32 - m23 ) / s;\n\t    \t\tthis.y = ( m13 - m31 ) / s;\n\t    \t\tthis.z = ( m21 - m12 ) / s;\n\t    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t    \t\tthis.w = Math.min( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t    \t\tthis.w = Math.max( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector4();\n\t    \t\t\t\tmax = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t    \t\tthis.w = Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t    \t\tthis.w = Math.ceil( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t    \t\tthis.w = Math.round( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t    \t\tthis.w = - this.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t    \t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t    \t\tthis.w = array[ offset + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t    \t\tarray[ offset + 3 ] = this.w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t    \t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author Marius Kintel / https://github.com/kintel\n\t     */\n\t\n\t    /*\n\t     In options, we can specify:\n\t     * Texture parameters for an auto-generated target texture\n\t     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t    */\n\t    function WebGLRenderTarget( width, height, options ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.width = width;\n\t    \tthis.height = height;\n\t\n\t    \tthis.scissor = new Vector4( 0, 0, width, height );\n\t    \tthis.scissorTest = false;\n\t\n\t    \tthis.viewport = new Vector4( 0, 0, width, height );\n\t\n\t    \toptions = options || {};\n\t\n\t    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\t\n\t    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\n\t    }\n\t\n\t    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisWebGLRenderTarget: true,\n\t\n\t    \tsetSize: function ( width, height ) {\n\t\n\t    \t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t    \t\t\tthis.width = width;\n\t    \t\t\tthis.height = height;\n\t\n\t    \t\t\tthis.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.viewport.set( 0, 0, width, height );\n\t    \t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.width = source.width;\n\t    \t\tthis.height = source.height;\n\t\n\t    \t\tthis.viewport.copy( source.viewport );\n\t\n\t    \t\tthis.texture = source.texture.clone();\n\t\n\t    \t\tthis.depthBuffer = source.depthBuffer;\n\t    \t\tthis.stencilBuffer = source.stencilBuffer;\n\t    \t\tthis.depthTexture = source.depthTexture;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com\n\t     */\n\t\n\t    function WebGLRenderTargetCube( width, height, options ) {\n\t\n\t    \tWebGLRenderTarget.call( this, width, height, options );\n\t\n\t    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t    \tthis.activeMipMapLevel = 0;\n\t\n\t    }\n\t\n\t    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\t    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\t\n\t    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Quaternion( x, y, z, w ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Quaternion.prototype = {\n\t\n\t    \tconstructor: Quaternion,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget w () {\n\t\n\t    \t\treturn this._w;\n\t\n\t    \t},\n\t\n\t    \tset w ( value ) {\n\t\n\t    \t\tthis._w = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._w = w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( quaternion ) {\n\t\n\t    \t\tthis._x = quaternion.x;\n\t    \t\tthis._y = quaternion.y;\n\t    \t\tthis._z = quaternion.z;\n\t    \t\tthis._w = quaternion.w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromEuler: function ( euler, update ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t    \t\t//\tcontent/SpinCalc.m\n\t\n\t    \t\tvar c1 = Math.cos( euler._x / 2 );\n\t    \t\tvar c2 = Math.cos( euler._y / 2 );\n\t    \t\tvar c3 = Math.cos( euler._z / 2 );\n\t    \t\tvar s1 = Math.sin( euler._x / 2 );\n\t    \t\tvar s2 = Math.sin( euler._y / 2 );\n\t    \t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t    \t\tvar order = euler.order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t    \t\tthis._x = axis.x * s;\n\t    \t\tthis._y = axis.y * s;\n\t    \t\tthis._z = axis.z * s;\n\t    \t\tthis._w = Math.cos( halfAngle );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t    \t\t\ttrace = m11 + m22 + m33,\n\t    \t\t\ts;\n\t\n\t    \t\tif ( trace > 0 ) {\n\t\n\t    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t    \t\t\tthis._w = 0.25 / s;\n\t    \t\t\tthis._x = ( m32 - m23 ) * s;\n\t    \t\t\tthis._y = ( m13 - m31 ) * s;\n\t    \t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t    \t\t\tthis._w = ( m32 - m23 ) / s;\n\t    \t\t\tthis._x = 0.25 * s;\n\t    \t\t\tthis._y = ( m12 + m21 ) / s;\n\t    \t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t    \t\t} else if ( m22 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t    \t\t\tthis._w = ( m13 - m31 ) / s;\n\t    \t\t\tthis._x = ( m12 + m21 ) / s;\n\t    \t\t\tthis._y = 0.25 * s;\n\t    \t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t    \t\t\tthis._w = ( m21 - m12 ) / s;\n\t    \t\t\tthis._x = ( m13 + m31 ) / s;\n\t    \t\t\tthis._y = ( m23 + m32 ) / s;\n\t    \t\t\tthis._z = 0.25 * s;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromUnitVectors: function () {\n\t\n\t    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t    \t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t    \t\tvar v1, r;\n\t\n\t    \t\tvar EPS = 0.000001;\n\t\n\t    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t    \t\t\tif ( r < EPS ) {\n\t\n\t    \t\t\t\tr = 0;\n\t\n\t    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._x = v1.x;\n\t    \t\t\tthis._y = v1.y;\n\t    \t\t\tthis._z = v1.z;\n\t    \t\t\tthis._w = r;\n\t\n\t    \t\t\treturn this.normalize();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tinverse: function () {\n\t\n\t    \t\treturn this.conjugate().normalize();\n\t\n\t    \t},\n\t\n\t    \tconjugate: function () {\n\t\n\t    \t\tthis._x *= - 1;\n\t    \t\tthis._y *= - 1;\n\t    \t\tthis._z *= - 1;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tvar l = this.length();\n\t\n\t    \t\tif ( l === 0 ) {\n\t\n\t    \t\t\tthis._x = 0;\n\t    \t\t\tthis._y = 0;\n\t    \t\t\tthis._z = 0;\n\t    \t\t\tthis._w = 1;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tl = 1 / l;\n\t\n\t    \t\t\tthis._x = this._x * l;\n\t    \t\t\tthis._y = this._y * l;\n\t    \t\t\tthis._z = this._z * l;\n\t    \t\t\tthis._w = this._w * l;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( q, p ) {\n\t\n\t    \t\tif ( p !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyQuaternions( this, q );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( q ) {\n\t\n\t    \t\treturn this.multiplyQuaternions( q, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyQuaternions: function ( a, b ) {\n\t\n\t    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tslerp: function ( qb, t ) {\n\t\n\t    \t\tif ( t === 0 ) return this;\n\t    \t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t    \t\tif ( cosHalfTheta < 0 ) {\n\t\n\t    \t\t\tthis._w = - qb._w;\n\t    \t\t\tthis._x = - qb._x;\n\t    \t\t\tthis._y = - qb._y;\n\t    \t\t\tthis._z = - qb._z;\n\t\n\t    \t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.copy( qb );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t    \t\t\tthis._w = w;\n\t    \t\t\tthis._x = x;\n\t    \t\t\tthis._y = y;\n\t    \t\t\tthis._z = z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t    \t\t\tthis._w = 0.5 * ( w + this._w );\n\t    \t\t\tthis._x = 0.5 * ( x + this._x );\n\t    \t\t\tthis._y = 0.5 * ( y + this._y );\n\t    \t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( quaternion ) {\n\t\n\t    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis._x = array[ offset ];\n\t    \t\tthis._y = array[ offset + 1 ];\n\t    \t\tthis._z = array[ offset + 2 ];\n\t    \t\tthis._w = array[ offset + 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    Object.assign( Quaternion, {\n\t\n\t    \tslerp: function( qa, qb, qm, t ) {\n\t\n\t    \t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t    \t},\n\t\n\t    \tslerpFlat: function(\n\t    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t    \t\t\tvar s = 1 - t,\n\t\n\t    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t    \t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t    \t\t\t\ts = Math.sin( s * len ) / sin;\n\t    \t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar tDir = t * dir;\n\t\n\t    \t\t\tx0 = x0 * s + x1 * tDir;\n\t    \t\t\ty0 = y0 * s + y1 * tDir;\n\t    \t\t\tz0 = z0 * s + z1 * tDir;\n\t    \t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t    \t\t\t// Normalize in case we just did a lerp:\n\t    \t\t\tif ( s === 1 - t ) {\n\t\n\t    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t    \t\t\t\tx0 *= f;\n\t    \t\t\t\ty0 *= f;\n\t    \t\t\t\tz0 *= f;\n\t    \t\t\t\tw0 *= f;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tdst[ dstOffset ] = x0;\n\t    \t\tdst[ dstOffset + 1 ] = y0;\n\t    \t\tdst[ dstOffset + 2 ] = z0;\n\t    \t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author *kile / http://kile.stravaganza.org/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector3( x, y, z ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t\n\t    }\n\t\n\t    Vector3.prototype = {\n\t\n\t    \tconstructor: Vector3,\n\t\n\t    \tisVector3: true,\n\t\n\t    \tset: function ( x, y, z ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t    \t\tthis.z *= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x * b.x;\n\t    \t\tthis.y = a.y * b.y;\n\t    \t\tthis.z = a.z * b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyEuler: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyEuler( euler ) {\n\t\n\t    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyAxisAngle: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix3: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyProjection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 projection matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyQuaternion: function ( q ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t    \t\t// calculate quat * vector\n\t\n\t    \t\tvar ix =  qw * x + qy * z - qz * y;\n\t    \t\tvar iy =  qw * y + qz * x - qx * z;\n\t    \t\tvar iz =  qw * z + qx * y - qy * x;\n\t    \t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t    \t\t// calculate result * inverse quat\n\t\n\t    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function project( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tunproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function unproject( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttransformDirection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t    \t\t// vector interpreted as a direction\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t    \t\treturn this.normalize();\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t    \t\tthis.z /= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector3();\n\t    \t\t\t\tmax = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tcross: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t    \t\t\treturn this.crossVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t    \t\tthis.x = y * v.z - z * v.y;\n\t    \t\tthis.y = z * v.x - x * v.z;\n\t    \t\tthis.z = x * v.y - y * v.x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossVectors: function ( a, b ) {\n\t\n\t    \t\tvar ax = a.x, ay = a.y, az = a.z;\n\t    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t    \t\tthis.x = ay * bz - az * by;\n\t    \t\tthis.y = az * bx - ax * bz;\n\t    \t\tthis.z = ax * by - ay * bx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tprojectOnVector: function ( vector ) {\n\t\n\t    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t    \t},\n\t\n\t    \tprojectOnPlane: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t    \t\t\treturn this.sub( v1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \treflect: function () {\n\t\n\t    \t\t// reflect incident vector off plane orthogonal to normal\n\t    \t\t// normal is assumed to have unit length\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function reflect( normal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tangleTo: function ( v ) {\n\t\n\t    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t    \t\t// clamp, to handle numerical problems\n\t\n\t    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t    \t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t    \t},\n\t\n\t    \tsetFromSpherical: function( s ) {\n\t\n\t    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixPosition: function ( m ) {\n\t\n\t    \t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixScale: function ( m ) {\n\t\n\t    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\tthis.x = sx;\n\t    \t\tthis.y = sy;\n\t    \t\tthis.z = sz;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t    \t\tif ( typeof m === 'number' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t    \t\t\tvar temp = m\n\t    \t\t\tm = index;\n\t    \t\t\tindex = temp;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author jordi_ros / http://plattsoft.com\n\t     * @author D1plo1d / http://github.com/D1plo1d\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author timknip / http://www.floorplanner.com/\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Matrix4() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0, 0,\n\t    \t\t0, 1, 0, 0,\n\t    \t\t0, 0, 1, 0,\n\t    \t\t0, 0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix4.prototype = {\n\t\n\t    \tconstructor: Matrix4,\n\t\n\t    \tisMatrix4: true,\n\t\n\t    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, 0,\n\t    \t\t\t0, 1, 0, 0,\n\t    \t\t\t0, 0, 1, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Matrix4().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tthis.elements.set( m.elements );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyPosition: function ( m ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tte[ 12 ] = me[ 12 ];\n\t    \t\tte[ 13 ] = me[ 13 ];\n\t    \t\tte[ 14 ] = me[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\txAxis.setFromMatrixColumn( this, 0 );\n\t    \t\tyAxis.setFromMatrixColumn( this, 1 );\n\t    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\tthis.set(\n\t    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t    \t\t\t0,       0,       0,       1\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractRotation: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function extractRotation( m ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tvar te = this.elements;\n\t    \t\t\tvar me = m.elements;\n\t\n\t    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t    \t\tif ( euler.order === 'XYZ' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - c * f;\n\t    \t\t\tte[ 8 ] = d;\n\t\n\t    \t\t\tte[ 1 ] = af + be * d;\n\t    \t\t\tte[ 5 ] = ae - bf * d;\n\t    \t\t\tte[ 9 ] = - b * c;\n\t\n\t    \t\t\tte[ 2 ] = bf - ae * d;\n\t    \t\t\tte[ 6 ] = be + af * d;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce + df * b;\n\t    \t\t\tte[ 4 ] = de * b - cf;\n\t    \t\t\tte[ 8 ] = a * d;\n\t\n\t    \t\t\tte[ 1 ] = a * f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b;\n\t\n\t    \t\t\tte[ 2 ] = cf * b - de;\n\t    \t\t\tte[ 6 ] = df + ce * b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce - df * b;\n\t    \t\t\tte[ 4 ] = - a * f;\n\t    \t\t\tte[ 8 ] = de + cf * b;\n\t\n\t    \t\t\tte[ 1 ] = cf + de * b;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = df - ce * b;\n\t\n\t    \t\t\tte[ 2 ] = - a * d;\n\t    \t\t\tte[ 6 ] = b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = be * d - af;\n\t    \t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t    \t\t\tte[ 1 ] = c * f;\n\t    \t\t\tte[ 5 ] = bf * d + ae;\n\t    \t\t\tte[ 9 ] = af * d - be;\n\t\n\t    \t\t\tte[ 2 ] = - d;\n\t    \t\t\tte[ 6 ] = b * c;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = bd - ac * f;\n\t    \t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t    \t\t\tte[ 1 ] = f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b * e;\n\t\n\t    \t\t\tte[ 2 ] = - d * e;\n\t    \t\t\tte[ 6 ] = ad * f + bc;\n\t    \t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t    \t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - f;\n\t    \t\t\tte[ 8 ] = d * e;\n\t\n\t    \t\t\tte[ 1 ] = ac * f + bd;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t    \t\t\tte[ 2 ] = bc * f - ad;\n\t    \t\t\tte[ 6 ] = b * e;\n\t    \t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t    \t\t}\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t    \t\tte[ 0 ] = 1 - ( yy + zz );\n\t    \t\tte[ 4 ] = xy - wz;\n\t    \t\tte[ 8 ] = xz + wy;\n\t\n\t    \t\tte[ 1 ] = xy + wz;\n\t    \t\tte[ 5 ] = 1 - ( xx + zz );\n\t    \t\tte[ 9 ] = yz - wx;\n\t\n\t    \t\tte[ 2 ] = xz - wy;\n\t    \t\tte[ 6 ] = yz + wx;\n\t    \t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar x, y, z;\n\t\n\t    \t\treturn function lookAt( eye, target, up ) {\n\t\n\t    \t\t\tif ( x === undefined ) {\n\t\n\t    \t\t\t\tx = new Vector3();\n\t    \t\t\t\ty = new Vector3();\n\t    \t\t\t\tz = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t    \t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z += 0.0001;\n\t    \t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ty.crossVectors( z, x );\n\t\n\t\n\t    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiply: function ( m, n ) {\n\t\n\t    \t\tif ( n !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyMatrices( this, m );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( m ) {\n\t\n\t    \t\treturn this.multiplyMatrices( m, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyMatrices: function ( a, b ) {\n\t\n\t    \t\tvar ae = a.elements;\n\t    \t\tvar be = b.elements;\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyToArray: function ( a, b, r ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tthis.multiplyMatrices( a, b );\n\t\n\t    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t    \t\t//TODO: make this more efficient\n\t    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t    \t\treturn (\n\t    \t\t\tn41 * (\n\t    \t\t\t\t+ n14 * n23 * n32\n\t    \t\t\t\t - n13 * n24 * n32\n\t    \t\t\t\t - n14 * n22 * n33\n\t    \t\t\t\t + n12 * n24 * n33\n\t    \t\t\t\t + n13 * n22 * n34\n\t    \t\t\t\t - n12 * n23 * n34\n\t    \t\t\t) +\n\t    \t\t\tn42 * (\n\t    \t\t\t\t+ n11 * n23 * n34\n\t    \t\t\t\t - n11 * n24 * n33\n\t    \t\t\t\t + n14 * n21 * n33\n\t    \t\t\t\t - n13 * n21 * n34\n\t    \t\t\t\t + n13 * n24 * n31\n\t    \t\t\t\t - n14 * n23 * n31\n\t    \t\t\t) +\n\t    \t\t\tn43 * (\n\t    \t\t\t\t+ n11 * n24 * n32\n\t    \t\t\t\t - n11 * n22 * n34\n\t    \t\t\t\t - n14 * n21 * n32\n\t    \t\t\t\t + n12 * n21 * n34\n\t    \t\t\t\t + n14 * n22 * n31\n\t    \t\t\t\t - n12 * n24 * n31\n\t    \t\t\t) +\n\t    \t\t\tn44 * (\n\t    \t\t\t\t- n13 * n22 * n31\n\t    \t\t\t\t - n11 * n23 * n32\n\t    \t\t\t\t + n11 * n22 * n33\n\t    \t\t\t\t + n13 * n21 * n32\n\t    \t\t\t\t - n12 * n21 * n33\n\t    \t\t\t\t + n12 * n23 * n31\n\t    \t\t\t)\n\t\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar tmp;\n\t\n\t    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetPosition: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function getPosition() {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetPosition: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 12 ] = v.x;\n\t    \t\tte[ 13 ] = v.y;\n\t    \t\tte[ 14 ] = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t    \t\tvar te = this.elements,\n\t    \t\t\tme = m.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 4 ] = t12 * detInv;\n\t    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 8 ] = t13 * detInv;\n\t    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t    \t\tte[ 12 ] = t14 * detInv;\n\t    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tscale: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetMaxScaleOnAxis: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t    \t},\n\t\n\t    \tmakeTranslation: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, x,\n\t    \t\t\t0, 1, 0, y,\n\t    \t\t\t0, 0, 1, z,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationX: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0,  0, 0,\n\t    \t\t\t0, c, - s, 0,\n\t    \t\t\t0, s,  c, 0,\n\t    \t\t\t0, 0,  0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationY: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t c, 0, s, 0,\n\t    \t\t\t 0, 1, 0, 0,\n\t    \t\t\t- s, 0, c, 0,\n\t    \t\t\t 0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationZ: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tc, - s, 0, 0,\n\t    \t\t\ts,  c, 0, 0,\n\t    \t\t\t0,  0, 1, 0,\n\t    \t\t\t0,  0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t    \t\tvar c = Math.cos( angle );\n\t    \t\tvar s = Math.sin( angle );\n\t    \t\tvar t = 1 - c;\n\t    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t    \t\tvar tx = t * x, ty = t * y;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\t return this;\n\t\n\t    \t},\n\t\n\t    \tmakeScale: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tx, 0, 0, 0,\n\t    \t\t\t0, y, 0, 0,\n\t    \t\t\t0, 0, z, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcompose: function ( position, quaternion, scale ) {\n\t\n\t    \t\tthis.makeRotationFromQuaternion( quaternion );\n\t    \t\tthis.scale( scale );\n\t    \t\tthis.setPosition( position );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdecompose: function () {\n\t\n\t    \t\tvar vector, matrix;\n\t\n\t    \t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tvector = new Vector3();\n\t    \t\t\t\tmatrix = new Matrix4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t    \t\t\t// if determine is negative, we need to invert one scale\n\t    \t\t\tvar det = this.determinant();\n\t    \t\t\tif ( det < 0 ) {\n\t\n\t    \t\t\t\tsx = - sx;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tposition.x = te[ 12 ];\n\t    \t\t\tposition.y = te[ 13 ];\n\t    \t\t\tposition.z = te[ 14 ];\n\t\n\t    \t\t\t// scale the rotation part\n\t\n\t    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t    \t\t\tvar invSX = 1 / sx;\n\t    \t\t\tvar invSY = 1 / sy;\n\t    \t\t\tvar invSZ = 1 / sz;\n\t\n\t    \t\t\tmatrix.elements[ 0 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 1 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t    \t\t\tmatrix.elements[ 4 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 5 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t    \t\t\tscale.x = sx;\n\t    \t\t\tscale.y = sy;\n\t    \t\t\tscale.z = sz;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = 2 * near / ( right - left );\n\t    \t\tvar y = 2 * near / ( top - bottom );\n\t\n\t    \t\tvar a = ( right + left ) / ( right - left );\n\t    \t\tvar b = ( top + bottom ) / ( top - bottom );\n\t    \t\tvar c = - ( far + near ) / ( far - near );\n\t    \t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n\t    \t\tvar ymin = - ymax;\n\t    \t\tvar xmin = ymin * aspect;\n\t    \t\tvar xmax = ymax * aspect;\n\t\n\t    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t    \t},\n\t\n\t    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar w = 1.0 / ( right - left );\n\t    \t\tvar h = 1.0 / ( top - bottom );\n\t    \t\tvar p = 1.0 / ( far - near );\n\t\n\t    \t\tvar x = ( right + left ) * w;\n\t    \t\tvar y = ( top + bottom ) * h;\n\t    \t\tvar z = ( far + near ) * p;\n\t\n\t    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( matrix ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = matrix.elements;\n\t\n\t    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t    \t\tarray[ offset + 9 ]  = te[ 9 ];\n\t    \t\tarray[ offset + 10 ] = te[ 10 ];\n\t    \t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t    \t\tarray[ offset + 12 ] = te[ 12 ];\n\t    \t\tarray[ offset + 13 ] = te[ 13 ];\n\t    \t\tarray[ offset + 14 ] = te[ 14 ];\n\t    \t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \timages = images !== undefined ? images : [];\n\t    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\n\t    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.flipY = false;\n\t\n\t    }\n\t\n\t    CubeTexture.prototype = Object.create( Texture.prototype );\n\t    CubeTexture.prototype.constructor = CubeTexture;\n\t\n\t    CubeTexture.prototype.isCubeTexture = true;\n\t\n\t    Object.defineProperty( CubeTexture.prototype, 'images', {\n\t\n\t    \tget: function () {\n\t\n\t    \t\treturn this.image;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tthis.image = value;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var emptyTexture = new Texture();\n\t    var emptyCubeTexture = new CubeTexture();\n\t\n\t    // --- Base for inner nodes (including the root) ---\n\t\n\t    function UniformContainer() {\n\t\n\t    \tthis.seq = [];\n\t    \tthis.map = {};\n\t\n\t    }\n\t\n\t    // --- Utilities ---\n\t\n\t    // Array Caches (provide typed arrays for temporary by size)\n\t\n\t    var arrayCacheF32 = [];\n\t    var arrayCacheI32 = [];\n\t\n\t    // Flattening for arrays of vectors and matrices\n\t\n\t    function flatten( array, nBlocks, blockSize ) {\n\t\n\t    \tvar firstElem = array[ 0 ];\n\t\n\t    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t    \t// unoptimized: ! isNaN( firstElem )\n\t    \t// see http://jacksondunstan.com/articles/983\n\t\n\t    \tvar n = nBlocks * blockSize,\n\t    \t\tr = arrayCacheF32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Float32Array( n );\n\t    \t\tarrayCacheF32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tif ( nBlocks !== 0 ) {\n\t\n\t    \t\tfirstElem.toArray( r, 0 );\n\t\n\t    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t    \t\t\toffset += blockSize;\n\t    \t\t\tarray[ i ].toArray( r, offset );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // Texture unit allocation\n\t\n\t    function allocTexUnits( renderer, n ) {\n\t\n\t    \tvar r = arrayCacheI32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Int32Array( n );\n\t    \t\tarrayCacheI32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i )\n\t    \t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // --- Setters ---\n\t\n\t    // Note: Defining these methods externally, because they come in a bunch\n\t    // and this way their names minify.\n\t\n\t    // Single scalar\n\t\n\t    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\t    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\t\n\t    // Single float vector (from flat array or THREE.VectorN)\n\t\n\t    function setValue2fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t    \telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t    }\n\t\n\t    function setValue3fv( gl, v ) {\n\t\n\t    \tif ( v.x !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t    \telse if ( v.r !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t    \telse\n\t    \t\tgl.uniform3fv( this.addr, v );\n\t\n\t    }\n\t\n\t    function setValue4fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t    }\n\t\n\t    // Single matrix (from flat array or MatrixN)\n\t\n\t    function setValue2fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue3fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue4fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    // Single texture (2D / Cube)\n\t\n\t    function setValueT1( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t    }\n\t\n\t    function setValueT6( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t    }\n\t\n\t    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\t    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\t    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\t\n\t    // Helper to pick the right setter for the singular case\n\t\n\t    function getSingularSetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1f; // FLOAT\n\t    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Array of scalars\n\t\n\t    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\t    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\t\n\t    // Array of vectors (flat or from THREE classes)\n\t\n\t    function setValueV2a( gl, v ) {\n\t\n\t    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t    }\n\t\n\t    function setValueV3a( gl, v ) {\n\t\n\t    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t    }\n\t\n\t    function setValueV4a( gl, v ) {\n\t\n\t    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    // Array of matrices (flat or from THREE clases)\n\t\n\t    function setValueM2a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    function setValueM3a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t    }\n\t\n\t    function setValueM4a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t    }\n\t\n\t    // Array of textures (2D / Cube)\n\t\n\t    function setValueT1a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function setValueT6a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t    function getPureArraySetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1fv; // FLOAT\n\t    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // --- Uniform Classes ---\n\t\n\t    function SingleUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function PureArrayUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.size = activeInfo.size;\n\t    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function StructuredUniform( id ) {\n\t\n\t    \tthis.id = id;\n\t\n\t    \tUniformContainer.call( this ); // mix-in\n\t\n\t    }\n\t\n\t    StructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t    \t// are not allowed in structured uniforms.\n\t\n\t    \tvar seq = this.seq;\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tu.setValue( gl, value[ u.id ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // --- Top-level ---\n\t\n\t    // Parser - builds up the property tree from the path strings\n\t\n\t    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\t\n\t    // extracts\n\t    // \t- the identifier (member name or array index)\n\t    //  - followed by an optional right bracket (found when array index)\n\t    //  - followed by an optional left bracket or dot (type of subscript)\n\t    //\n\t    // Note: These portions can be read in a non-overlapping fashion and\n\t    // allow straightforward parsing of the hierarchy that WebGL encodes\n\t    // in the uniform names.\n\t\n\t    function addUniform( container, uniformObject ) {\n\t\n\t    \tcontainer.seq.push( uniformObject );\n\t    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t    }\n\t\n\t    function parseUniform( activeInfo, addr, container ) {\n\t\n\t    \tvar path = activeInfo.name,\n\t    \t\tpathLength = path.length;\n\t\n\t    \t// reset RegExp object, because of the early exit of a previous run\n\t    \tRePathPart.lastIndex = 0;\n\t\n\t    \tfor (; ;) {\n\t\n\t    \t\tvar match = RePathPart.exec( path ),\n\t    \t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t    \t\t\tid = match[ 1 ],\n\t    \t\t\tidIsIndex = match[ 2 ] === ']',\n\t    \t\t\tsubscript = match[ 3 ];\n\t\n\t    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t    \t\tif ( subscript === undefined ||\n\t    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t    \t\t\taddUniform( container, subscript === undefined ?\n\t    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t    \t\t\tbreak;\n\t\n\t    \t\t} else {\n\t    \t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t    \t\t\tvar map = container.map,\n\t    \t\t\t\tnext = map[ id ];\n\t\n\t    \t\t\tif ( next === undefined ) {\n\t\n\t    \t\t\t\tnext = new StructuredUniform( id );\n\t    \t\t\t\taddUniform( container, next );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcontainer = next;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Root Container\n\t\n\t    function WebGLUniforms( gl, program, renderer ) {\n\t\n\t    \tUniformContainer.call( this );\n\t\n\t    \tthis.renderer = renderer;\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar info = gl.getActiveUniform( program, i ),\n\t    \t\t\tpath = info.name,\n\t    \t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t    \t\tparseUniform( info, addr, this );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t    \tvar v = object[ name ];\n\t\n\t    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t    };\n\t\n\t\n\t    // Static interface\n\t\n\t    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v.needsUpdate !== false ) {\n\t    \t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t    \t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    WebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t    \tvar r = [];\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tif ( u.id in values ) r.push( u );\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.splitDynamic = function( seq, values ) {\n\t\n\t    \tvar r = null,\n\t    \t\tn = seq.length,\n\t    \t\tw = 0;\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v && v.dynamic === true ) {\n\t\n\t    \t\t\tif ( r === null ) r = [];\n\t    \t\t\tr.push( u );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// in-place compact 'seq', removing the matches\n\t    \t\t\tif ( w < i ) seq[ w ] = u;\n\t    \t\t\t++ w;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( w < n ) seq.length = w;\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar v = values[ seq[ i ].id ],\n\t    \t\t\tf = v.onUpdateCallback;\n\t\n\t    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Uniform Utilities\n\t     */\n\t\n\t    exports.UniformsUtils = {\n\t\n\t    \tmerge: function ( uniforms ) {\n\t\n\t    \t\tvar merged = {};\n\t\n\t    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t    \t\t\tfor ( var p in tmp ) {\n\t\n\t    \t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn merged;\n\t\n\t    \t},\n\t\n\t    \tclone: function ( uniforms_src ) {\n\t\n\t    \t\tvar uniforms_dst = {};\n\t\n\t    \t\tfor ( var u in uniforms_src ) {\n\t\n\t    \t\t\tuniforms_dst[ u ] = {};\n\t\n\t    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn uniforms_dst;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\t\n\t    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\t\n\t    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\t\n\t    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\t\n\t    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\t\n\t    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\t\n\t    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\t\n\t    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\t\n\t    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\t\n\t    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var ShaderChunk = {\n\t    \talphamap_fragment: alphamap_fragment,\n\t    \talphamap_pars_fragment: alphamap_pars_fragment,\n\t    \talphatest_fragment: alphatest_fragment,\n\t    \taomap_fragment: aomap_fragment,\n\t    \taomap_pars_fragment: aomap_pars_fragment,\n\t    \tbegin_vertex: begin_vertex,\n\t    \tbeginnormal_vertex: beginnormal_vertex,\n\t    \tbsdfs: bsdfs,\n\t    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t    \tclipping_planes_fragment: clipping_planes_fragment,\n\t    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t    \tclipping_planes_vertex: clipping_planes_vertex,\n\t    \tcolor_fragment: color_fragment,\n\t    \tcolor_pars_fragment: color_pars_fragment,\n\t    \tcolor_pars_vertex: color_pars_vertex,\n\t    \tcolor_vertex: color_vertex,\n\t    \tcommon: common,\n\t    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t    \tdefaultnormal_vertex: defaultnormal_vertex,\n\t    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t    \tdisplacementmap_vertex: displacementmap_vertex,\n\t    \temissivemap_fragment: emissivemap_fragment,\n\t    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t    \tencodings_fragment: encodings_fragment,\n\t    \tencodings_pars_fragment: encodings_pars_fragment,\n\t    \tenvmap_fragment: envmap_fragment,\n\t    \tenvmap_pars_fragment: envmap_pars_fragment,\n\t    \tenvmap_pars_vertex: envmap_pars_vertex,\n\t    \tenvmap_vertex: envmap_vertex,\n\t    \tfog_fragment: fog_fragment,\n\t    \tfog_pars_fragment: fog_pars_fragment,\n\t    \tlightmap_fragment: lightmap_fragment,\n\t    \tlightmap_pars_fragment: lightmap_pars_fragment,\n\t    \tlights_lambert_vertex: lights_lambert_vertex,\n\t    \tlights_pars: lights_pars,\n\t    \tlights_phong_fragment: lights_phong_fragment,\n\t    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t    \tlights_physical_fragment: lights_physical_fragment,\n\t    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t    \tlights_template: lights_template,\n\t    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t    \tmap_fragment: map_fragment,\n\t    \tmap_pars_fragment: map_pars_fragment,\n\t    \tmap_particle_fragment: map_particle_fragment,\n\t    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t    \tmetalnessmap_fragment: metalnessmap_fragment,\n\t    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t    \tmorphnormal_vertex: morphnormal_vertex,\n\t    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t    \tmorphtarget_vertex: morphtarget_vertex,\n\t    \tnormal_flip: normal_flip,\n\t    \tnormal_fragment: normal_fragment,\n\t    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t    \tpacking: packing,\n\t    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t    \tproject_vertex: project_vertex,\n\t    \troughnessmap_fragment: roughnessmap_fragment,\n\t    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t    \tshadowmap_vertex: shadowmap_vertex,\n\t    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t    \tskinbase_vertex: skinbase_vertex,\n\t    \tskinning_pars_vertex: skinning_pars_vertex,\n\t    \tskinning_vertex: skinning_vertex,\n\t    \tskinnormal_vertex: skinnormal_vertex,\n\t    \tspecularmap_fragment: specularmap_fragment,\n\t    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t    \ttonemapping_fragment: tonemapping_fragment,\n\t    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t    \tuv_pars_fragment: uv_pars_fragment,\n\t    \tuv_pars_vertex: uv_pars_vertex,\n\t    \tuv_vertex: uv_vertex,\n\t    \tuv2_pars_fragment: uv2_pars_fragment,\n\t    \tuv2_pars_vertex: uv2_pars_vertex,\n\t    \tuv2_vertex: uv2_vertex,\n\t    \tworldpos_vertex: worldpos_vertex,\n\t\n\t    \tcube_frag: cube_frag,\n\t    \tcube_vert: cube_vert,\n\t    \tdepth_frag: depth_frag,\n\t    \tdepth_vert: depth_vert,\n\t    \tdistanceRGBA_frag: distanceRGBA_frag,\n\t    \tdistanceRGBA_vert: distanceRGBA_vert,\n\t    \tequirect_frag: equirect_frag,\n\t    \tequirect_vert: equirect_vert,\n\t    \tlinedashed_frag: linedashed_frag,\n\t    \tlinedashed_vert: linedashed_vert,\n\t    \tmeshbasic_frag: meshbasic_frag,\n\t    \tmeshbasic_vert: meshbasic_vert,\n\t    \tmeshlambert_frag: meshlambert_frag,\n\t    \tmeshlambert_vert: meshlambert_vert,\n\t    \tmeshphong_frag: meshphong_frag,\n\t    \tmeshphong_vert: meshphong_vert,\n\t    \tmeshphysical_frag: meshphysical_frag,\n\t    \tmeshphysical_vert: meshphysical_vert,\n\t    \tnormal_frag: normal_frag,\n\t    \tnormal_vert: normal_vert,\n\t    \tpoints_frag: points_frag,\n\t    \tpoints_vert: points_vert,\n\t    \tshadow_frag: shadow_frag,\n\t    \tshadow_vert: shadow_vert\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Color( r, g, b ) {\n\t\n\t    \tif ( g === undefined && b === undefined ) {\n\t\n\t    \t\t// r is THREE.Color, hex or string\n\t    \t\treturn this.set( r );\n\t\n\t    \t}\n\t\n\t    \treturn this.setRGB( r, g, b );\n\t\n\t    }\n\t\n\t    Color.prototype = {\n\t\n\t    \tconstructor: Color,\n\t\n\t    \tisColor: true,\n\t\n\t    \tr: 1, g: 1, b: 1,\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tif ( (value && value.isColor) ) {\n\t\n\t    \t\t\tthis.copy( value );\n\t\n\t    \t\t} else if ( typeof value === 'number' ) {\n\t\n\t    \t\t\tthis.setHex( value );\n\t\n\t    \t\t} else if ( typeof value === 'string' ) {\n\t\n\t    \t\t\tthis.setStyle( value );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.r = scalar;\n\t    \t\tthis.g = scalar;\n\t    \t\tthis.b = scalar;\n\t\n\t    \t},\n\t\n\t    \tsetHex: function ( hex ) {\n\t\n\t    \t\thex = Math.floor( hex );\n\t\n\t    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t    \t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetRGB: function ( r, g, b ) {\n\t\n\t    \t\tthis.r = r;\n\t    \t\tthis.g = g;\n\t    \t\tthis.b = b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetHSL: function () {\n\t\n\t    \t\tfunction hue2rgb( p, q, t ) {\n\t\n\t    \t\t\tif ( t < 0 ) t += 1;\n\t    \t\t\tif ( t > 1 ) t -= 1;\n\t    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t    \t\t\tif ( t < 1 / 2 ) return q;\n\t    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t    \t\t\treturn p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function setHSL( h, s, l ) {\n\t\n\t    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n\t    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n\t    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\t\n\t    \t\t\tif ( s === 0 ) {\n\t\n\t    \t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t    \t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t    \t\t\t\tthis.g = hue2rgb( q, p, h );\n\t    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetStyle: function ( style ) {\n\t\n\t    \t\tfunction handleAlpha( string ) {\n\t\n\t    \t\t\tif ( string === undefined ) return;\n\t\n\t    \t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar m;\n\t\n\t    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t    \t\t\t// rgb / hsl\n\t\n\t    \t\t\tvar color;\n\t    \t\t\tvar name = m[ 1 ];\n\t    \t\t\tvar components = m[ 2 ];\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'rgb':\n\t    \t\t\t\tcase 'rgba':\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'hsl':\n\t    \t\t\t\tcase 'hsla':\n\t\n\t    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t    \t\t\t// hex color\n\t\n\t    \t\t\tvar hex = m[ 1 ];\n\t    \t\t\tvar size = hex.length;\n\t\n\t    \t\t\tif ( size === 3 ) {\n\t\n\t    \t\t\t\t// #ff0\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t} else if ( size === 6 ) {\n\t\n\t    \t\t\t\t// #ff0000\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( style && style.length > 0 ) {\n\t\n\t    \t\t\t// color keywords\n\t    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\t\n\t    \t\t\tif ( hex !== undefined ) {\n\t\n\t    \t\t\t\t// red\n\t    \t\t\t\tthis.setHex( hex );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// unknown color\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( color ) {\n\t\n\t    \t\tthis.r = color.r;\n\t    \t\tthis.g = color.g;\n\t    \t\tthis.b = color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, gammaFactor );\n\t    \t\tthis.g = Math.pow( color.g, gammaFactor );\n\t    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, safeInverse );\n\t    \t\tthis.g = Math.pow( color.g, safeInverse );\n\t    \t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertGammaToLinear: function () {\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tthis.r = r * r;\n\t    \t\tthis.g = g * g;\n\t    \t\tthis.b = b * b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertLinearToGamma: function () {\n\t\n\t    \t\tthis.r = Math.sqrt( this.r );\n\t    \t\tthis.g = Math.sqrt( this.g );\n\t    \t\tthis.b = Math.sqrt( this.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetHex: function () {\n\t\n\t    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t    \t},\n\t\n\t    \tgetHexString: function () {\n\t\n\t    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t    \t},\n\t\n\t    \tgetHSL: function ( optionalTarget ) {\n\t\n\t    \t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tvar max = Math.max( r, g, b );\n\t    \t\tvar min = Math.min( r, g, b );\n\t\n\t    \t\tvar hue, saturation;\n\t    \t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t    \t\tif ( min === max ) {\n\t\n\t    \t\t\thue = 0;\n\t    \t\t\tsaturation = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar delta = max - min;\n\t\n\t    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t    \t\t\tswitch ( max ) {\n\t\n\t    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thue /= 6;\n\t\n\t    \t\t}\n\t\n\t    \t\thsl.h = hue;\n\t    \t\thsl.s = saturation;\n\t    \t\thsl.l = lightness;\n\t\n\t    \t\treturn hsl;\n\t\n\t    \t},\n\t\n\t    \tgetStyle: function () {\n\t\n\t    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t    \t},\n\t\n\t    \toffsetHSL: function ( h, s, l ) {\n\t\n\t    \t\tvar hsl = this.getHSL();\n\t\n\t    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( color ) {\n\t\n\t    \t\tthis.r += color.r;\n\t    \t\tthis.g += color.g;\n\t    \t\tthis.b += color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddColors: function ( color1, color2 ) {\n\t\n\t    \t\tthis.r = color1.r + color2.r;\n\t    \t\tthis.g = color1.g + color2.g;\n\t    \t\tthis.b = color1.b + color2.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.r += s;\n\t    \t\tthis.g += s;\n\t    \t\tthis.b += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function( color ) {\n\t\n\t    \t\tthis.r = Math.max( 0, this.r - color.r );\n\t    \t\tthis.g = Math.max( 0, this.g - color.g );\n\t    \t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( color ) {\n\t\n\t    \t\tthis.r *= color.r;\n\t    \t\tthis.g *= color.g;\n\t    \t\tthis.b *= color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tthis.r *= s;\n\t    \t\tthis.g *= s;\n\t    \t\tthis.b *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( color, alpha ) {\n\t\n\t    \t\tthis.r += ( color.r - this.r ) * alpha;\n\t    \t\tthis.g += ( color.g - this.g ) * alpha;\n\t    \t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( c ) {\n\t\n\t    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.r = array[ offset ];\n\t    \t\tthis.g = array[ offset + 1 ];\n\t    \t\tthis.b = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.r;\n\t    \t\tarray[ offset + 1 ] = this.g;\n\t    \t\tarray[ offset + 2 ] = this.b;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\treturn this.getHex();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t    /**\n\t     * Uniforms library for shared webgl shaders\n\t     */\n\t\n\t    var UniformsLib = {\n\t\n\t    \tcommon: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\t\n\t    \t\tspecularMap: { value: null },\n\t    \t\talphaMap: { value: null },\n\t\n\t    \t\tenvMap: { value: null },\n\t    \t\tflipEnvMap: { value: - 1 },\n\t    \t\treflectivity: { value: 1.0 },\n\t    \t\trefractionRatio: { value: 0.98 }\n\t\n\t    \t},\n\t\n\t    \taomap: {\n\t\n\t    \t\taoMap: { value: null },\n\t    \t\taoMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tlightmap: {\n\t\n\t    \t\tlightMap: { value: null },\n\t    \t\tlightMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \temissivemap: {\n\t\n\t    \t\temissiveMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tbumpmap: {\n\t\n\t    \t\tbumpMap: { value: null },\n\t    \t\tbumpScale: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tnormalmap: {\n\t\n\t    \t\tnormalMap: { value: null },\n\t    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\t\n\t    \t},\n\t\n\t    \tdisplacementmap: {\n\t\n\t    \t\tdisplacementMap: { value: null },\n\t    \t\tdisplacementScale: { value: 1 },\n\t    \t\tdisplacementBias: { value: 0 }\n\t\n\t    \t},\n\t\n\t    \troughnessmap: {\n\t\n\t    \t\troughnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tmetalnessmap: {\n\t\n\t    \t\tmetalnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tfog: {\n\t\n\t    \t\tfogDensity: { value: 0.00025 },\n\t    \t\tfogNear: { value: 1 },\n\t    \t\tfogFar: { value: 2000 },\n\t    \t\tfogColor: { value: new Color( 0xffffff ) }\n\t\n\t    \t},\n\t\n\t    \tlights: {\n\t\n\t    \t\tambientLightColor: { value: [] },\n\t\n\t    \t\tdirectionalLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tcolor: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tdirectionalShadowMap: { value: [] },\n\t    \t\tdirectionalShadowMatrix: { value: [] },\n\t\n\t    \t\tspotLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdirection: {},\n\t    \t\t\tdistance: {},\n\t    \t\t\tconeCos: {},\n\t    \t\t\tpenumbraCos: {},\n\t    \t\t\tdecay: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tspotShadowMap: { value: [] },\n\t    \t\tspotShadowMatrix: { value: [] },\n\t\n\t    \t\tpointLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdecay: {},\n\t    \t\t\tdistance: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tpointShadowMap: { value: [] },\n\t    \t\tpointShadowMatrix: { value: [] },\n\t\n\t    \t\themisphereLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tskyColor: {},\n\t    \t\t\tgroundColor: {}\n\t    \t\t} }\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t    \t\tsize: { value: 1.0 },\n\t    \t\tscale: { value: 1.0 },\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     */\n\t\n\t    var ShaderLib = {\n\t\n\t    \tbasic: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\n\t    \t},\n\t\n\t    \tlambert: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\n\t    \t},\n\t\n\t    \tphong: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t    \t\t\t\tshininess: { value: 30 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphong_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\n\t    \t},\n\t\n\t    \tstandard: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.roughnessmap,\n\t    \t\t\tUniformsLib.metalnessmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\troughness: { value: 0.5 },\n\t    \t\t\t\tmetalness: { value: 0 },\n\t    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.points,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.points_vert,\n\t    \t\tfragmentShader: ShaderChunk.points_frag\n\t\n\t    \t},\n\t\n\t    \tdashed: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.fog,\n\t\n\t    \t\t\t{\n\t    \t\t\t\tscale    : { value: 1 },\n\t    \t\t\t\tdashSize : { value: 1 },\n\t    \t\t\t\ttotalSize: { value: 2 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.linedashed_vert,\n\t    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\n\t    \t},\n\t\n\t    \tdepth: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.displacementmap\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.depth_vert,\n\t    \t\tfragmentShader: ShaderChunk.depth_frag\n\t\n\t    \t},\n\t\n\t    \tnormal: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\topacity : { value: 1.0 }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.normal_vert,\n\t    \t\tfragmentShader: ShaderChunk.normal_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tcube: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttCube: { value: null },\n\t    \t\t\ttFlip: { value: - 1 },\n\t    \t\t\topacity: { value: 1.0 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.cube_vert,\n\t    \t\tfragmentShader: ShaderChunk.cube_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tequirect: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttEquirect: { value: null },\n\t    \t\t\ttFlip: { value: - 1 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.equirect_vert,\n\t    \t\tfragmentShader: ShaderChunk.equirect_frag\n\t\n\t    \t},\n\t\n\t    \tdistanceRGBA: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\tlightPos: { value: new Vector3() }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ShaderLib.physical = {\n\t\n\t    \tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\tShaderLib.standard.uniforms,\n\t\n\t    \t\t{\n\t    \t\t\tclearCoat: { value: 0 },\n\t    \t\t\tclearCoatRoughness: { value: 0 }\n\t    \t\t}\n\t\n\t    \t] ),\n\t\n\t    \tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Box2( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box2.prototype = {\n\t\n\t    \tconstructor: Box2,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = + Infinity;\n\t    \t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlarePlugin( renderer, flares ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar shader, program, attributes, uniforms;\n\t\n\t    \tvar tempTexture, occlusionTexture;\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 1, - 1,  0, 0,\n\t    \t\t\t 1, - 1,  1, 0,\n\t    \t\t\t 1,  1,  1, 1,\n\t    \t\t\t- 1,  1,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\t// buffers\n\t\n\t    \t\tvertexBuffer     = gl.createBuffer();\n\t    \t\telementBuffer    = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\t// textures\n\t\n\t    \t\ttempTexture      = gl.createTexture();\n\t    \t\tocclusionTexture = gl.createTexture();\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tshader = {\n\t\n\t    \t\t\tvertexShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform vec3 screenPosition;\",\n\t    \t\t\t\t\"uniform vec2 scale;\",\n\t    \t\t\t\t\"uniform float rotation;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t    \t\t\t\t\"attribute vec2 position;\",\n\t    \t\t\t\t\"attribute vec2 uv;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t\"vUV = uv;\",\n\t\n\t    \t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" ),\n\t\n\t    \t\t\tfragmentShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D map;\",\n\t    \t\t\t\t\"uniform float opacity;\",\n\t    \t\t\t\t\"uniform vec3 color;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t// pink square\n\t\n\t    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t    \t\t\t\t\t// restore\n\t\n\t    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t    \t\t\t\t\t// flare\n\t\n\t    \t\t\t\t\t\"} else {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" )\n\t\n\t    \t\t};\n\t\n\t    \t\tprogram = createProgram( shader );\n\t\n\t    \t\tattributes = {\n\t    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Render lens flares\n\t    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t    \t *         reads these back and calculates occlusion.\n\t    \t */\n\t\n\t    \tthis.render = function ( scene, camera, viewport ) {\n\t\n\t    \t\tif ( flares.length === 0 ) return;\n\t\n\t    \t\tvar tempPosition = new Vector3();\n\t\n\t    \t\tvar invAspect = viewport.w / viewport.z,\n\t    \t\t\thalfViewportWidth = viewport.z * 0.5,\n\t    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t    \t\tvar size = 16 / viewport.w,\n\t    \t\t\tscale = new Vector2( size * invAspect, size );\n\t\n\t    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\t\n\t    \t\tvar validArea = new Box2();\n\t\n\t    \t\tvalidArea.min.set( 0, 0 );\n\t    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.vertex );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t// loop through all lens flares to update their occlusion and positions\n\t    \t\t// setup gl and common used attribs/uniforms\n\t\n\t    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t    \t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.setDepthWrite( false );\n\t\n\t    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsize = 16 / viewport.w;\n\t    \t\t\tscale.set( size * invAspect, size );\n\t\n\t    \t\t\t// calc object screen position\n\t\n\t    \t\t\tvar flare = flares[ i ];\n\t\n\t    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t    \t\t\t// setup arrays for gl programs\n\t\n\t    \t\t\tscreenPosition.copy( tempPosition );\n\t\n\t    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t    \t\t\t// screen cull\n\t\n\t    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t    \t\t\t\t// save current RGB to temp texture\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// render pink quad\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t    \t\t\t\tstate.disable( gl.BLEND );\n\t    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// copy result to occlusionMap\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// restore graphics\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// update object positions\n\t\n\t    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t    \t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t    \t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tflare.updateLensFlares();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// render flares\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t    \t\t\t\tstate.enable( gl.BLEND );\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t    \t\t\t\t\t\tscale.x = size * invAspect;\n\t    \t\t\t\t\t\tscale.y = size;\n\t\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.DEPTH_TEST );\n\t    \t\tstate.setDepthWrite( true );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram( shader ) {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t    \t\tgl.compileShader( fragmentShader );\n\t    \t\tgl.compileShader( vertexShader );\n\t\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t    \t\tgl.attachShader( program, vertexShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpritePlugin( renderer, sprites ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar program, attributes, uniforms;\n\t\n\t    \tvar texture;\n\t\n\t    \t// decompose matrixWorld\n\t\n\t    \tvar spritePosition = new Vector3();\n\t    \tvar spriteRotation = new Quaternion();\n\t    \tvar spriteScale = new Vector3();\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 0.5, - 0.5,  0, 0,\n\t    \t\t\t  0.5, - 0.5,  1, 0,\n\t    \t\t\t  0.5,   0.5,  1, 1,\n\t    \t\t\t- 0.5,   0.5,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\tvertexBuffer  = gl.createBuffer();\n\t    \t\telementBuffer = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\tprogram = createProgram();\n\t\n\t    \t\tattributes = {\n\t    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t    \t\t};\n\t\n\t    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\tcanvas.width = 8;\n\t    \t\tcanvas.height = 8;\n\t\n\t    \t\tvar context = canvas.getContext( '2d' );\n\t    \t\tcontext.fillStyle = 'white';\n\t    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t    \t\ttexture = new Texture( canvas );\n\t    \t\ttexture.needsUpdate = true;\n\t\n\t    \t}\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( sprites.length === 0 ) return;\n\t\n\t    \t\t// setup gl\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.position );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.BLEND );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t    \t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t    \t\tvar oldFogType = 0;\n\t    \t\tvar sceneFogType = 0;\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\tif ( fog ) {\n\t\n\t    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t    \t\t\tif ( (fog && fog.isFog) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t    \t\t\t\toldFogType = 1;\n\t    \t\t\t\tsceneFogType = 1;\n\t\n\t    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t    \t\t\t\toldFogType = 2;\n\t    \t\t\t\tsceneFogType = 2;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t    \t\t\toldFogType = 0;\n\t    \t\t\tsceneFogType = 0;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// update positions and sort\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t\n\t    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t    \t\t}\n\t\n\t    \t\tsprites.sort( painterSortStable );\n\t\n\t    \t\t// render all sprites\n\t\n\t    \t\tvar scale = [];\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t    \t\t\tvar material = sprite.material;\n\t\n\t    \t\t\tif ( material.visible === false ) continue;\n\t\n\t    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t    \t\t\tscale[ 0 ] = spriteScale.x;\n\t    \t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t    \t\t\tvar fogType = 0;\n\t\n\t    \t\t\tif ( scene.fog && material.fog ) {\n\t\n\t    \t\t\t\tfogType = sceneFogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( oldFogType !== fogType ) {\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t    \t\t\t\toldFogType = fogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.map !== null ) {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t    \t\t\tstate.setDepthTest( material.depthTest );\n\t    \t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t    \t\t\tif ( material.map ) {\n\t\n\t    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram() {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t    \t\tgl.shaderSource( vertexShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform float rotation;',\n\t    \t\t\t'uniform vec2 scale;',\n\t    \t\t\t'uniform vec2 uvOffset;',\n\t    \t\t\t'uniform vec2 uvScale;',\n\t\n\t    \t\t\t'attribute vec2 position;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t    \t\t\t\t'vec2 rotatedPosition;',\n\t    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t    \t\t\t\t'vec4 finalPosition;',\n\t\n\t    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t    \t\t\t\t'gl_Position = finalPosition;',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.shaderSource( fragmentShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform vec3 color;',\n\t    \t\t\t'uniform sampler2D map;',\n\t    \t\t\t'uniform float opacity;',\n\t\n\t    \t\t\t'uniform int fogType;',\n\t    \t\t\t'uniform vec3 fogColor;',\n\t    \t\t\t'uniform float fogDensity;',\n\t    \t\t\t'uniform float fogNear;',\n\t    \t\t\t'uniform float fogFar;',\n\t    \t\t\t'uniform float alphaTest;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t    \t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t    \t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t    \t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t    \t\t\t\t\t'} else {',\n\t\n\t    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t    \t\t\t\t\t'}',\n\t\n\t    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t    \t\t\t\t'}',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.compileShader( vertexShader );\n\t    \t\tgl.compileShader( fragmentShader );\n\t\n\t    \t\tgl.attachShader( program, vertexShader );\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t    \t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn b.id - a.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Material() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Material';\n\t\n\t    \tthis.fog = true;\n\t    \tthis.lights = true;\n\t\n\t    \tthis.blending = NormalBlending;\n\t    \tthis.side = FrontSide;\n\t    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t    \tthis.opacity = 1;\n\t    \tthis.transparent = false;\n\t\n\t    \tthis.blendSrc = SrcAlphaFactor;\n\t    \tthis.blendDst = OneMinusSrcAlphaFactor;\n\t    \tthis.blendEquation = AddEquation;\n\t    \tthis.blendSrcAlpha = null;\n\t    \tthis.blendDstAlpha = null;\n\t    \tthis.blendEquationAlpha = null;\n\t\n\t    \tthis.depthFunc = LessEqualDepth;\n\t    \tthis.depthTest = true;\n\t    \tthis.depthWrite = true;\n\t\n\t    \tthis.clippingPlanes = null;\n\t    \tthis.clipShadows = false;\n\t\n\t    \tthis.colorWrite = true;\n\t\n\t    \tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t    \tthis.polygonOffset = false;\n\t    \tthis.polygonOffsetFactor = 0;\n\t    \tthis.polygonOffsetUnits = 0;\n\t\n\t    \tthis.alphaTest = 0;\n\t    \tthis.premultipliedAlpha = false;\n\t\n\t    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t    \tthis.visible = true;\n\t\n\t    \tthis._needsUpdate = true;\n\t\n\t    }\n\t\n\t    Material.prototype = {\n\t\n\t    \tconstructor: Material,\n\t\n\t    \tisMaterial: true,\n\t\n\t    \tget needsUpdate() {\n\t\n\t    \t\treturn this._needsUpdate;\n\t\n\t    \t},\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.update();\n\t    \t\tthis._needsUpdate = value;\n\t\n\t    \t},\n\t\n\t    \tsetValues: function ( values ) {\n\t\n\t    \t\tif ( values === undefined ) return;\n\t\n\t    \t\tfor ( var key in values ) {\n\t\n\t    \t\t\tvar newValue = values[ key ];\n\t\n\t    \t\t\tif ( newValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar currentValue = this[ key ];\n\t\n\t    \t\t\tif ( currentValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\t\n\t    \t\t\t\tcurrentValue.set( newValue );\n\t\n\t    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\t\n\t    \t\t\t\tcurrentValue.copy( newValue );\n\t\n\t    \t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t    \t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis[ key ] = newValue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar isRoot = meta === undefined;\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tmeta = {\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Material',\n\t    \t\t\t\tgenerator: 'Material.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Material serialization\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\t\n\t    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\t\n\t    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\t\n\t    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t    \t\t}\n\t    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\t\n\t    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.displacementScale = this.displacementScale;\n\t    \t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\t\n\t    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.size !== undefined ) data.size = this.size;\n\t    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\n\t    \t\tdata.depthFunc = this.depthFunc;\n\t    \t\tdata.depthTest = this.depthTest;\n\t    \t\tdata.depthWrite = this.depthWrite;\n\t\n\t    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\t\n\t    \t\tdata.skinning = this.skinning;\n\t    \t\tdata.morphTargets = this.morphTargets;\n\t\n\t    \t\t// TODO: Copied from Object3D.toJSON\n\t\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.fog = source.fog;\n\t    \t\tthis.lights = source.lights;\n\t\n\t    \t\tthis.blending = source.blending;\n\t    \t\tthis.side = source.side;\n\t    \t\tthis.shading = source.shading;\n\t    \t\tthis.vertexColors = source.vertexColors;\n\t\n\t    \t\tthis.opacity = source.opacity;\n\t    \t\tthis.transparent = source.transparent;\n\t\n\t    \t\tthis.blendSrc = source.blendSrc;\n\t    \t\tthis.blendDst = source.blendDst;\n\t    \t\tthis.blendEquation = source.blendEquation;\n\t    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t    \t\tthis.depthFunc = source.depthFunc;\n\t    \t\tthis.depthTest = source.depthTest;\n\t    \t\tthis.depthWrite = source.depthWrite;\n\t\n\t    \t\tthis.colorWrite = source.colorWrite;\n\t\n\t    \t\tthis.precision = source.precision;\n\t\n\t    \t\tthis.polygonOffset = source.polygonOffset;\n\t    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t    \t\tthis.alphaTest = source.alphaTest;\n\t\n\t    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t    \t\tthis.overdraw = source.overdraw;\n\t\n\t    \t\tthis.visible = source.visible;\n\t    \t\tthis.clipShadows = source.clipShadows;\n\t\n\t    \t\tvar srcPlanes = source.clippingPlanes,\n\t    \t\t\tdstPlanes = null;\n\t\n\t    \t\tif ( srcPlanes !== null ) {\n\t\n\t    \t\t\tvar n = srcPlanes.length;\n\t    \t\t\tdstPlanes = new Array( n );\n\t\n\t    \t\t\tfor ( var i = 0; i !== n; ++ i )\n\t    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.clippingPlanes = dstPlanes;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Material.prototype, EventDispatcher.prototype );\n\t\n\t    var count$1 = 0;\n\t    function MaterialIdCount() { return count$1++; };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  defines: { \"label\" : \"value\" },\n\t     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t     *\n\t     *  fragmentShader: <string>,\n\t     *  vertexShader: <string>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  lights: <bool>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function ShaderMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'ShaderMaterial';\n\t\n\t    \tthis.defines = {};\n\t    \tthis.uniforms = {};\n\t\n\t    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false; // set to use scene fog\n\t    \tthis.lights = false; // set to use scene lights\n\t    \tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t    \tthis.skinning = false; // set to use skinning attribute streams\n\t    \tthis.morphTargets = false; // set to use morph targets\n\t    \tthis.morphNormals = false; // set to use morph normals\n\t\n\t    \tthis.extensions = {\n\t    \t\tderivatives: false, // set to use derivatives\n\t    \t\tfragDepth: false, // set to use fragment depth values\n\t    \t\tdrawBuffers: false, // set to use draw buffers\n\t    \t\tshaderTextureLOD: false // set to use shader texture LOD\n\t    \t};\n\t\n\t    \t// When rendered geometry doesn't include these attributes but the material does,\n\t    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t    \tthis.defaultAttributeValues = {\n\t    \t\t'color': [ 1, 1, 1 ],\n\t    \t\t'uv': [ 0, 0 ],\n\t    \t\t'uv2': [ 0, 0 ]\n\t    \t};\n\t\n\t    \tthis.index0AttributeName = undefined;\n\t\n\t    \tif ( parameters !== undefined ) {\n\t\n\t    \t\tif ( parameters.attributes !== undefined ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setValues( parameters );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    ShaderMaterial.prototype = Object.create( Material.prototype );\n\t    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\t\n\t    ShaderMaterial.prototype.isShaderMaterial = true;\n\t\n\t    ShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.fragmentShader = source.fragmentShader;\n\t    \tthis.vertexShader = source.vertexShader;\n\t\n\t    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\t\n\t    \tthis.defines = source.defines;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \tthis.lights = source.lights;\n\t    \tthis.clipping = source.clipping;\n\t\n\t    \tthis.skinning = source.skinning;\n\t\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \tthis.extensions = source.extensions;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Material.prototype.toJSON.call( this, meta );\n\t\n\t    \tdata.uniforms = this.uniforms;\n\t    \tdata.vertexShader = this.vertexShader;\n\t    \tdata.fragmentShader = this.fragmentShader;\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / https://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshDepthMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshDepthMaterial';\n\t\n\t    \tthis.depthPacking = BasicDepthPacking;\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n\t    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\t\n\t    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\t\n\t    MeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.depthPacking = source.depthPacking;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Box3( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box3.prototype = {\n\t\n\t    \tconstructor: Box3,\n\t\n\t    \tisBox3: true,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromArray: function ( array ) {\n\t\n\t    \t\tvar minX = + Infinity;\n\t    \t\tvar minY = + Infinity;\n\t    \t\tvar minZ = + Infinity;\n\t\n\t    \t\tvar maxX = - Infinity;\n\t    \t\tvar maxY = - Infinity;\n\t    \t\tvar maxZ = - Infinity;\n\t\n\t    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\tvar x = array[ i ];\n\t    \t\t\tvar y = array[ i + 1 ];\n\t    \t\t\tvar z = array[ i + 2 ];\n\t\n\t    \t\t\tif ( x < minX ) minX = x;\n\t    \t\t\tif ( y < minY ) minY = y;\n\t    \t\t\tif ( z < minZ ) minZ = z;\n\t\n\t    \t\t\tif ( x > maxX ) maxX = x;\n\t    \t\t\tif ( y > maxY ) maxY = y;\n\t    \t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.min.set( minX, minY, minZ );\n\t    \t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromObject: function () {\n\t\n\t    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t    \t\t// accounting for both the object's, and children's, world transforms\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromObject( object ) {\n\t\n\t    \t\t\tvar scope = this;\n\t\n\t    \t\t\tobject.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.makeEmpty();\n\t\n\t    \t\t\tobject.traverse( function ( node ) {\n\t\n\t    \t\t\t\tvar geometry = node.geometry;\n\t\n\t    \t\t\t\tif ( geometry !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t    \t\t\t\t\t\t\t\toffset = attribute.offset;\n\t    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.array;\n\t    \t\t\t\t\t\t\t\toffset = 0;\n\t    \t\t\t\t\t\t\t\tstride = 3;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: ( function () {\n\t\n\t    \t\tvar closestPoint;\n\t\n\t    \t\treturn function intersectsSphere( sphere ) {\n\t\n\t    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\t\n\t    \t\t\t// Find the point on the AABB closest to the sphere center.\n\t    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We compute the minimum and maximum dot product values. If those values\n\t    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\tif ( plane.normal.x > 0 ) {\n\t\n\t    \t\t\tmin = plane.normal.x * this.min.x;\n\t    \t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin = plane.normal.x * this.max.x;\n\t    \t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.y > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.y * this.min.y;\n\t    \t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.y * this.max.y;\n\t    \t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.z > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.z * this.min.z;\n\t    \t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.z * this.max.z;\n\t    \t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetBoundingSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Sphere();\n\t\n\t    \t\t\tthis.getCenter( result.center );\n\t\n\t    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t    \t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar points = [\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3()\n\t    \t\t];\n\t\n\t    \t\treturn function applyMatrix4( matrix ) {\n\t\n\t    \t\t\t// transform of empty box is an empty box.\n\t    \t\t\tif( this.isEmpty() ) return this;\n\t\n\t    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t    \t\t\tthis.setFromPoints( points );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Sphere( center, radius ) {\n\t\n\t    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t    }\n\t\n\t    Sphere.prototype = {\n\t\n\t    \tconstructor: Sphere,\n\t\n\t    \tset: function ( center, radius ) {\n\t\n\t    \t\tthis.center.copy( center );\n\t    \t\tthis.radius = radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t\n\t    \t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t    \t\t\tvar center = this.center;\n\t\n\t    \t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t    \t\t\t\tcenter.copy( optionalCenter );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( sphere ) {\n\t\n\t    \t\tthis.center.copy( sphere.center );\n\t    \t\tthis.radius = sphere.radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tempty: function () {\n\t\n\t    \t\treturn ( this.radius <= 0 );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsSphere( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We use the following equation to compute the signed distance from\n\t    \t\t// the center of the sphere to the plane.\n\t    \t\t//\n\t    \t\t// distance = q * n - d\n\t    \t\t//\n\t    \t\t// If this distance is greater than the radius of the sphere,\n\t    \t\t// then there is no intersection.\n\t\n\t    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.copy( point );\n\t\n\t    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t    \t\t\tresult.sub( this.center ).normalize();\n\t    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t    \t\tvar box = optionalTarget || new Box3();\n\t\n\t    \t\tbox.set( this.center, this.center );\n\t    \t\tbox.expandByScalar( this.radius );\n\t\n\t    \t\treturn box;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.center.applyMatrix4( matrix );\n\t    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.center.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( sphere ) {\n\t\n\t    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     * @author tschw\n\t     */\n\t\n\t    function Matrix3() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0,\n\t    \t\t0, 1, 0,\n\t    \t\t0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix3.prototype = {\n\t\n\t    \tconstructor: Matrix3,\n\t\n\t    \tisMatrix3: true,\n\t\n\t    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0,\n\t    \t\t\t0, 1, 0,\n\t    \t\t\t0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix4: function( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar me = matrix.elements,\n\t    \t\t\tte = this.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t    \t\t\tt11 = n33 * n22 - n32 * n23,\n\t    \t\t\tt12 = n32 * n13 - n33 * n12,\n\t    \t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t    \t\tte[ 3 ] = t12 * detInv;\n\t    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t    \t\tte[ 6 ] = t13 * detInv;\n\t    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar tmp, m = this.elements;\n\t\n\t    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t    \t},\n\t\n\t    \ttransposeIntoArray: function ( r ) {\n\t\n\t    \t\tvar m = this.elements;\n\t\n\t    \t\tr[ 0 ] = m[ 0 ];\n\t    \t\tr[ 1 ] = m[ 3 ];\n\t    \t\tr[ 2 ] = m[ 6 ];\n\t    \t\tr[ 3 ] = m[ 1 ];\n\t    \t\tr[ 4 ] = m[ 4 ];\n\t    \t\tr[ 5 ] = m[ 7 ];\n\t    \t\tr[ 6 ] = m[ 2 ];\n\t    \t\tr[ 7 ] = m[ 5 ];\n\t    \t\tr[ 8 ] = m[ 8 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 9; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Plane( normal, constant ) {\n\t\n\t    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t    }\n\t\n\t    Plane.prototype = {\n\t\n\t    \tconstructor: Plane,\n\t\n\t    \tset: function ( normal, constant ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponents: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.normal.set( x, y, z );\n\t    \t\tthis.constant = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCoplanarPoints: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( plane ) {\n\t\n\t    \t\tthis.normal.copy( plane.normal );\n\t    \t\tthis.constant = plane.constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t    \t\tthis.constant *= inverseNormalLength;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.constant *= - 1;\n\t    \t\tthis.normal.negate();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t    \t},\n\t\n\t    \tdistanceToSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t    \t},\n\t\n\t    \torthoPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t    \t},\n\t\n\t    \tintersectLine: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tvar direction = line.delta( v1 );\n\t\n\t    \t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t    \t\t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t\t// line is coplanar, return origin\n\t    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t    \t\t\t\t\treturn result.copy( line.start );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Unsure if this is the correct method to handle this case.\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t    \t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsLine: function ( line ) {\n\t\n\t    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t    \t\tvar startSign = this.distanceToPoint( line.start );\n\t    \t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn sphere.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar m1 = new Matrix3();\n\t\n\t    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t    \t\t\t// transform normal based on theory here:\n\t    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t    \t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( plane ) {\n\t\n\t    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \tthis.planes = [\n\t\n\t    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\t\n\t    \t];\n\t\n\t    }\n\t\n\t    Frustum.prototype = {\n\t\n\t    \tconstructor: Frustum,\n\t\n\t    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tplanes[ 0 ].copy( p0 );\n\t    \t\tplanes[ 1 ].copy( p1 );\n\t    \t\tplanes[ 2 ].copy( p2 );\n\t    \t\tplanes[ 3 ].copy( p3 );\n\t    \t\tplanes[ 4 ].copy( p4 );\n\t    \t\tplanes[ 5 ].copy( p5 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( frustum ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix: function ( m ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar me = m.elements;\n\t    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tintersectsObject: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsObject( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null )\n\t    \t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere )\n\t    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSprite: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsSprite( sprite ) {\n\t\n\t    \t\t\tsphere.center.set( 0, 0, 0 );\n\t    \t\t\tsphere.radius = 0.7071067811865476;\n\t    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar center = sphere.center;\n\t    \t\tvar negRadius = - sphere.radius;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t    \t\t\tif ( distance < negRadius ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function () {\n\t\n\t    \t\tvar p1 = new Vector3(),\n\t    \t\t\tp2 = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\tvar planes = this.planes;\n\t\n\t    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t    \t\t\t\tvar plane = planes[ i ];\n\t\n\t    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t    \t\t\t\t// if both outside plane, no intersection\n\t\n\t    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t    \t\t\t\t\treturn false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\t\n\t    \tvar _gl = _renderer.context,\n\t    \t_state = _renderer.state,\n\t    \t_frustum = new Frustum(),\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_lightShadows = _lights.shadows,\n\t\n\t    \t_shadowMapSize = new Vector2(),\n\t    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t    \t_lookTarget = new Vector3(),\n\t    \t_lightPositionWorld = new Vector3(),\n\t\n\t    \t_renderList = [],\n\t\n\t    \t_MorphingFlag = 1,\n\t    \t_SkinningFlag = 2,\n\t\n\t    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t    \t_materialCache = {};\n\t\n\t    \tvar cubeDirections = [\n\t    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t    \t];\n\t\n\t    \tvar cubeUps = [\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t    \t];\n\t\n\t    \tvar cube2DViewPorts = [\n\t    \t\tnew Vector4(), new Vector4(), new Vector4(),\n\t    \t\tnew Vector4(), new Vector4(), new Vector4()\n\t    \t];\n\t\n\t    \t// init\n\t\n\t    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t    \tdepthMaterialTemplate.clipping = true;\n\t\n\t    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t    \t\tdepthMaterial.morphTargets = useMorphing;\n\t    \t\tdepthMaterial.skinning = useSkinning;\n\t\n\t    \t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t    \t\tvar distanceMaterial = new ShaderMaterial( {\n\t    \t\t\tdefines: {\n\t    \t\t\t\t'USE_SHADOWMAP': ''\n\t    \t\t\t},\n\t    \t\t\tuniforms: distanceUniforms,\n\t    \t\t\tvertexShader: distanceShader.vertexShader,\n\t    \t\t\tfragmentShader: distanceShader.fragmentShader,\n\t    \t\t\tmorphTargets: useMorphing,\n\t    \t\t\tskinning: useSkinning,\n\t    \t\t\tclipping: true\n\t    \t\t} );\n\t\n\t    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.enabled = false;\n\t\n\t    \tthis.autoUpdate = true;\n\t    \tthis.needsUpdate = false;\n\t\n\t    \tthis.type = PCFShadowMap;\n\t\n\t    \tthis.renderReverseSided = true;\n\t    \tthis.renderSingleSided = true;\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( scope.enabled === false ) return;\n\t    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t    \t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t    \t\t// Set GL state for depth map.\n\t    \t\t_state.clearColor( 1, 1, 1, 1 );\n\t    \t\t_state.disable( _gl.BLEND );\n\t    \t\t_state.setDepthTest( true );\n\t    \t\t_state.setScissorTest( false );\n\t\n\t    \t\t// render depth map\n\t\n\t    \t\tvar faceCount, isPointLight;\n\t\n\t    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar light = _lightShadows[ i ];\n\t    \t\t\tvar shadow = light.shadow;\n\t\n\t    \t\t\tif ( shadow === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowCamera = shadow.camera;\n\t\n\t    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t    \t\t\tif ( (light && light.isPointLight) ) {\n\t\n\t    \t\t\t\tfaceCount = 6;\n\t    \t\t\t\tisPointLight = true;\n\t\n\t    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t    \t\t\t\t// following orientation:\n\t    \t\t\t\t//\n\t    \t\t\t\t//  xzXZ\n\t    \t\t\t\t//   y Y\n\t    \t\t\t\t//\n\t    \t\t\t\t// X - Positive x direction\n\t    \t\t\t\t// x - Negative x direction\n\t    \t\t\t\t// Y - Positive y direction\n\t    \t\t\t\t// y - Negative y direction\n\t    \t\t\t\t// Z - Positive z direction\n\t    \t\t\t\t// z - Negative z direction\n\t\n\t    \t\t\t\t// positive X\n\t    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative X\n\t    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Z\n\t    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Z\n\t    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Y\n\t    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Y\n\t    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t    \t\t\t\t_shadowMapSize.x *= 4.0;\n\t    \t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfaceCount = 1;\n\t    \t\t\t\tisPointLight = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( shadow.map === null ) {\n\t\n\t    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\t\n\t    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\t\n\t    \t\t\t\tshadow.update( light );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowMap = shadow.map;\n\t    \t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t    \t\t\t_renderer.setRenderTarget( shadowMap );\n\t    \t\t\t_renderer.clear();\n\t\n\t    \t\t\t// render shadow map for each cube face (if omni-directional) or\n\t    \t\t\t// run a single pass if not\n\t\n\t    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t    \t\t\t\tif ( isPointLight ) {\n\t\n\t    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t    \t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tshadowCamera.updateMatrixWorld();\n\t    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t    \t\t\t\t// compute shadow matrix\n\t\n\t    \t\t\t\tshadowMatrix.set(\n\t    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t    \t\t\t\t);\n\t\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t    \t\t\t\t// update camera matrices and frustum\n\t\n\t    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\t\t\t// set object matrices & frustum culling\n\t\n\t    \t\t\t\t_renderList.length = 0;\n\t\n\t    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t    \t\t\t\t// render shadow map\n\t    \t\t\t\t// render regular objects\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar object = _renderList[ j ];\n\t    \t\t\t\t\tvar geometry = _objects.update( object );\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\t\n\t    \t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar group = groups[ k ];\n\t    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Restore GL state.\n\t    \t\tvar clearColor = _renderer.getClearColor(),\n\t    \t\tclearAlpha = _renderer.getClearAlpha();\n\t    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t    \t\tscope.needsUpdate = false;\n\t\n\t    \t};\n\t\n\t    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tvar result = null;\n\t\n\t    \t\tvar materialVariants = _depthMaterials;\n\t    \t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t    \t\tif ( isPointLight ) {\n\t\n\t    \t\t\tmaterialVariants = _distanceMaterials;\n\t    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ! customMaterial ) {\n\t\n\t    \t\t\tvar useMorphing = false;\n\t\n\t    \t\t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\t\n\t    \t\t\tvar variantIndex = 0;\n\t\n\t    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t    \t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tresult = customMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _renderer.localClippingEnabled &&\n\t    \t\t\t material.clipShadows === true &&\n\t    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t    \t\t\t// in this case we need a unique material instance reflecting the\n\t    \t\t\t// appropriate state\n\t\n\t    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t    \t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t    \t\t\t\tmaterialsForVariant = {};\n\t    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t    \t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t    \t\t\t\tcachedMaterial = result.clone();\n\t    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tresult = cachedMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.visible = material.visible;\n\t    \t\tresult.wireframe = material.wireframe;\n\t\n\t    \t\tvar side = material.side;\n\t\n\t    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\t\n\t    \t\t\tside = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( scope.renderReverseSided ) {\n\t\n\t    \t\t\tif ( side === FrontSide ) side = BackSide;\n\t    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.side = side;\n\t\n\t    \t\tresult.clipShadows = material.clipShadows;\n\t    \t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t    \t\tresult.linewidth = material.linewidth;\n\t\n\t    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\t\n\t    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t    \t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\t\t\t_renderList.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Ray( origin, direction ) {\n\t\n\t    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\t\n\t    }\n\t\n\t    Ray.prototype = {\n\t\n\t    \tconstructor: Ray,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\tthis.origin.copy( origin );\n\t    \t\tthis.direction.copy( direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( ray ) {\n\t\n\t    \t\tthis.origin.copy( ray.origin );\n\t    \t\tthis.direction.copy( ray.direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tlookAt: function ( v ) {\n\t\n\t    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trecast: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function recast( t ) {\n\t\n\t    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\tresult.subVectors( point, this.origin );\n\t    \t\tvar directionDistance = result.dot( this.direction );\n\t\n\t    \t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\treturn result.copy( this.origin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceSqToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceSqToPoint( point ) {\n\t\n\t    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t    \t\t\t// point behind the ray\n\t\n\t    \t\t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t\t\treturn v1.distanceToSquared( point );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdistanceSqToSegment: function () {\n\t\n\t    \t\tvar segCenter = new Vector3();\n\t    \t\tvar segDir = new Vector3();\n\t    \t\tvar diff = new Vector3();\n\t\n\t    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t    \t\t\t// It returns the min distance between the ray and the segment\n\t    \t\t\t// defined by v0 and v1\n\t    \t\t\t// It can also set two optional targets :\n\t    \t\t\t// - The closest point on the ray\n\t    \t\t\t// - The closest point on the segment\n\t\n\t    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t    \t\t\tvar a01 = - this.direction.dot( segDir );\n\t    \t\t\tvar b0 = diff.dot( this.direction );\n\t    \t\t\tvar b1 = - diff.dot( segDir );\n\t    \t\t\tvar c = diff.lengthSq();\n\t    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t    \t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t    \t\t\tif ( det > 0 ) {\n\t\n\t    \t\t\t\t// The ray and segment are not parallel.\n\t\n\t    \t\t\t\ts0 = a01 * b1 - b0;\n\t    \t\t\t\ts1 = a01 * b0 - b1;\n\t    \t\t\t\textDet = segExtent * det;\n\t\n\t    \t\t\t\tif ( s0 >= 0 ) {\n\t\n\t    \t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t\t// region 0\n\t    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t    \t\t\t\t\t\t\tvar invDet = 1 / det;\n\t    \t\t\t\t\t\t\ts0 *= invDet;\n\t    \t\t\t\t\t\t\ts1 *= invDet;\n\t    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t// region 1\n\t\n\t    \t\t\t\t\t\t\ts1 = segExtent;\n\t    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 5\n\t\n\t    \t\t\t\t\t\ts1 = - segExtent;\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 4\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 3\n\t\n\t    \t\t\t\t\t\ts0 = 0;\n\t    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 2\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// Ray and segment are parallel.\n\t\n\t    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnRay ) {\n\t\n\t    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnSegment ) {\n\t\n\t    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn sqrDist;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t    \t\t\tv1.subVectors( sphere.center, this.origin );\n\t    \t\t\tvar tca = v1.dot( this.direction );\n\t    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t    \t\t\tif ( d2 > radius2 ) return null;\n\t\n\t    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t    \t\t\t// t0 = first intersect point - entrance on front of sphere\n\t    \t\t\tvar t0 = tca - thc;\n\t\n\t    \t\t\t// t1 = second intersect point - exit point on back of sphere\n\t    \t\t\tvar t1 = tca + thc;\n\t\n\t    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t    \t\t\t// test to see if t0 is behind the ray:\n\t    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t    \t\t\t// in order to always return an intersect point that is in front of the ray.\n\t    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t    \t\t\treturn this.at( t0, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPlane: function ( plane ) {\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t// line is coplanar, return origin\n\t    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t    \t\t\t\treturn 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t    \t\t// Return if the ray never intersects the plane\n\t\n\t    \t\treturn t >= 0 ? t :  null;\n\t\n\t    \t},\n\t\n\t    \tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t    \t\tvar t = this.distanceToPlane( plane );\n\t\n\t    \t\tif ( t === null ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.at( t, optionalTarget );\n\t\n\t    \t},\n\t\n\t\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// check if the ray lies on the plane first\n\t\n\t    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t    \t\tif ( distToPoint === 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tintersectBox: function ( box, optionalTarget ) {\n\t\n\t    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t    \t\tvar invdirx = 1 / this.direction.x,\n\t    \t\t\tinvdiry = 1 / this.direction.y,\n\t    \t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t    \t\tvar origin = this.origin;\n\t\n\t    \t\tif ( invdirx >= 0 ) {\n\t\n\t    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( invdiry >= 0 ) {\n\t\n\t    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t    \t\t// These lines also handle the case where tmin or tmax is NaN\n\t    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t    \t\tif ( invdirz >= 0 ) {\n\t\n\t    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t    \t\t//return point closest to the ray (positive side)\n\t\n\t    \t\tif ( tmax < 0 ) return null;\n\t\n\t    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: ( function () {\n\t\n\t    \t\tvar v = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectTriangle: function () {\n\t\n\t    \t\t// Compute the offset origin, edges, and normal.\n\t    \t\tvar diff = new Vector3();\n\t    \t\tvar edge1 = new Vector3();\n\t    \t\tvar edge2 = new Vector3();\n\t    \t\tvar normal = new Vector3();\n\t\n\t    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t    \t\t\tedge1.subVectors( b, a );\n\t    \t\t\tedge2.subVectors( c, a );\n\t    \t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t    \t\t\tvar DdN = this.direction.dot( normal );\n\t    \t\t\tvar sign;\n\t\n\t    \t\t\tif ( DdN > 0 ) {\n\t\n\t    \t\t\t\tif ( backfaceCulling ) return null;\n\t    \t\t\t\tsign = 1;\n\t\n\t    \t\t\t} else if ( DdN < 0 ) {\n\t\n\t    \t\t\t\tsign = - 1;\n\t    \t\t\t\tDdN = - DdN;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdiff.subVectors( this.origin, a );\n\t    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t    \t\t\t// b1 < 0, no intersection\n\t    \t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t    \t\t\t// b2 < 0, no intersection\n\t    \t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// b1+b2 > 1, no intersection\n\t    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Line intersects triangle, check if ray does.\n\t    \t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t    \t\t\t// t < 0, no intersection\n\t    \t\t\tif ( QdN < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Ray intersects triangle.\n\t    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix4: function ( matrix4 ) {\n\t\n\t    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t    \t\tthis.origin.applyMatrix4( matrix4 );\n\t    \t\tthis.direction.sub( this.origin );\n\t    \t\tthis.direction.normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( ray ) {\n\t\n\t    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Euler( x, y, z, order ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._order = order || Euler.DefaultOrder;\n\t\n\t    }\n\t\n\t    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\t    Euler.DefaultOrder = 'XYZ';\n\t\n\t    Euler.prototype = {\n\t\n\t    \tconstructor: Euler,\n\t\n\t    \tisEuler: true,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget order () {\n\t\n\t    \t\treturn this._order;\n\t\n\t    \t},\n\t\n\t    \tset order ( value ) {\n\t\n\t    \t\tthis._order = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, order ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._order = order || this._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( euler ) {\n\t\n\t    \t\tthis._x = euler._x;\n\t    \t\tthis._y = euler._y;\n\t    \t\tthis._z = euler._z;\n\t    \t\tthis._order = euler._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t    \t\tvar clamp = exports.Math.clamp;\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements;\n\t    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\torder = order || this._order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = 0;\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._y = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._order = order;\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromQuaternion: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromVector3: function ( v, order ) {\n\t\n\t    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t    \t},\n\t\n\t    \treorder: function () {\n\t\n\t    \t\t// WARNING: this discards revolution information -bhouston\n\t\n\t    \t\tvar q = new Quaternion();\n\t\n\t    \t\treturn function reorder( newOrder ) {\n\t\n\t    \t\t\tq.setFromEuler( this );\n\t\n\t    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( euler ) {\n\t\n\t    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array ) {\n\t\n\t    \t\tthis._x = array[ 0 ];\n\t    \t\tthis._y = array[ 1 ];\n\t    \t\tthis._z = array[ 2 ];\n\t    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._order;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoVector3: function ( optionalResult ) {\n\t\n\t    \t\tif ( optionalResult ) {\n\t\n\t    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Layers() {\n\t\n\t    \tthis.mask = 1;\n\t\n\t    }\n\t\n\t    Layers.prototype = {\n\t\n\t    \tconstructor: Layers,\n\t\n\t    \tset: function ( channel ) {\n\t\n\t    \t\tthis.mask = 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tenable: function ( channel ) {\n\t\n\t    \t\tthis.mask |= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \ttoggle: function ( channel ) {\n\t\n\t    \t\tthis.mask ^= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tdisable: function ( channel ) {\n\t\n\t    \t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t    \t},\n\t\n\t    \ttest: function ( layers ) {\n\t\n\t    \t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author elephantatwork / www.elephantatwork.ch\n\t     */\n\t\n\t    function Object3D() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Object3D';\n\t\n\t    \tthis.parent = null;\n\t    \tthis.children = [];\n\t\n\t    \tthis.up = Object3D.DefaultUp.clone();\n\t\n\t    \tvar position = new Vector3();\n\t    \tvar rotation = new Euler();\n\t    \tvar quaternion = new Quaternion();\n\t    \tvar scale = new Vector3( 1, 1, 1 );\n\t\n\t    \tfunction onRotationChange() {\n\t\n\t    \t\tquaternion.setFromEuler( rotation, false );\n\t\n\t    \t}\n\t\n\t    \tfunction onQuaternionChange() {\n\t\n\t    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t    \t}\n\t\n\t    \trotation.onChange( onRotationChange );\n\t    \tquaternion.onChange( onQuaternionChange );\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tposition: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: position\n\t    \t\t},\n\t    \t\trotation: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: rotation\n\t    \t\t},\n\t    \t\tquaternion: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: quaternion\n\t    \t\t},\n\t    \t\tscale: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: scale\n\t    \t\t},\n\t    \t\tmodelViewMatrix: {\n\t    \t\t\tvalue: new Matrix4()\n\t    \t\t},\n\t    \t\tnormalMatrix: {\n\t    \t\t\tvalue: new Matrix3()\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.matrix = new Matrix4();\n\t    \tthis.matrixWorld = new Matrix4();\n\t\n\t    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t    \tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \tthis.layers = new Layers();\n\t    \tthis.visible = true;\n\t\n\t    \tthis.castShadow = false;\n\t    \tthis.receiveShadow = false;\n\t\n\t    \tthis.frustumCulled = true;\n\t    \tthis.renderOrder = 0;\n\t\n\t    \tthis.userData = {};\n\t\n\t    \tthis.onBeforeRender = null;\n\t\n\t    }\n\t\n\t    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n\t    Object3D.DefaultMatrixAutoUpdate = true;\n\t\n\t    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisObject3D: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromMatrix: function ( m ) {\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\t// assumes q is normalized\n\t\n\t    \t\tthis.quaternion.copy( q );\n\t\n\t    \t},\n\t\n\t    \trotateOnAxis: function () {\n\t\n\t    \t\t// rotate object on axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar q1 = new Quaternion();\n\t\n\t    \t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t    \t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t    \t\t\tthis.quaternion.multiply( q1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateOnAxis: function () {\n\t\n\t    \t\t// translate object by distance along axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function translateX( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function translateY( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function translateZ( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlocalToWorld: function ( vector ) {\n\t\n\t    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tworldToLocal: function () {\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function worldToLocal( vector ) {\n\t\n\t    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tadd: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.add( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object === this ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (object && object.isObject3D) ) {\n\t\n\t    \t\t\tif ( object.parent !== null ) {\n\t\n\t    \t\t\t\tobject.parent.remove( object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.parent = this;\n\t    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t    \t\t\tthis.children.push( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tremove: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = this.children.indexOf( object );\n\t\n\t    \t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\tobject.parent = null;\n\t\n\t    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t    \t\t\tthis.children.splice( index, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetObjectById: function ( id ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByName: function ( name ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByProperty: function ( name, value ) {\n\t\n\t    \t\tif ( this[ name ] === value ) return this;\n\t\n\t    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar child = this.children[ i ];\n\t    \t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t    \t\t\tif ( object !== undefined ) {\n\t\n\t    \t\t\t\treturn object;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn undefined;\n\t\n\t    \t},\n\t\n\t    \tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tgetWorldQuaternion: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Quaternion();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldRotation: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Euler();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldScale: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldDirection: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \traycast: function () {},\n\t\n\t    \ttraverse: function ( callback ) {\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverse( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseVisible: function ( callback ) {\n\t\n\t    \t\tif ( this.visible === false ) return;\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseAncestors: function ( callback ) {\n\t\n\t    \t\tvar parent = this.parent;\n\t\n\t    \t\tif ( parent !== null ) {\n\t\n\t    \t\t\tcallback( parent );\n\t\n\t    \t\t\tparent.traverseAncestors( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrix: function () {\n\t\n\t    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t    \t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function ( force ) {\n\t\n\t    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t    \t\t\tif ( this.parent === null ) {\n\t\n\t    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \t\t\tforce = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// update children\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\t// meta is '' when called from JSON.stringify\n\t    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t    \t\tvar output = {};\n\t\n\t    \t\t// meta is a hash used to collect geometries, materials.\n\t    \t\t// not providing it implies that this is the root object\n\t    \t\t// being serialized.\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\t// initialize meta obj\n\t    \t\t\tmeta = {\n\t    \t\t\t\tgeometries: {},\n\t    \t\t\t\tmaterials: {},\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t\toutput.metadata = {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Object',\n\t    \t\t\t\tgenerator: 'Object3D.toJSON'\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t// standard Object3D serialization\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tobject.uuid = this.uuid;\n\t    \t\tobject.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) object.name = this.name;\n\t    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t    \t\tif ( this.castShadow === true ) object.castShadow = true;\n\t    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t    \t\tif ( this.visible === false ) object.visible = false;\n\t\n\t    \t\tobject.matrix = this.matrix.toArray();\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.geometry !== undefined ) {\n\t\n\t    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.material !== undefined ) {\n\t\n\t    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.material = this.material.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.children.length > 0 ) {\n\t\n\t    \t\t\tobject.children = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\tvar geometries = extractFromCache( meta.geometries );\n\t    \t\t\tvar materials = extractFromCache( meta.materials );\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.object = object;\n\t\n\t    \t\treturn output;\n\t\n\t    \t\t// extract data from the cache hash\n\t    \t\t// remove metadata on each item\n\t    \t\t// and return as array\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function ( recursive ) {\n\t\n\t    \t\treturn new this.constructor().copy( this, recursive );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source, recursive ) {\n\t\n\t    \t\tif ( recursive === undefined ) recursive = true;\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.up.copy( source.up );\n\t\n\t    \t\tthis.position.copy( source.position );\n\t    \t\tthis.quaternion.copy( source.quaternion );\n\t    \t\tthis.scale.copy( source.scale );\n\t\n\t    \t\tthis.matrix.copy( source.matrix );\n\t    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t    \t\tthis.visible = source.visible;\n\t\n\t    \t\tthis.castShadow = source.castShadow;\n\t    \t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t    \t\tthis.frustumCulled = source.frustumCulled;\n\t    \t\tthis.renderOrder = source.renderOrder;\n\t\n\t    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t    \t\tif ( recursive === true ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar child = source.children[ i ];\n\t    \t\t\t\tthis.add( child.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$2 = 0;\n\t    function Object3DIdCount() { return count$2++; };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Line3( start, end ) {\n\t\n\t    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\t\n\t    }\n\t\n\t    Line3.prototype = {\n\t\n\t    \tconstructor: Line3,\n\t\n\t    \tset: function ( start, end ) {\n\t\n\t    \t\tthis.start.copy( start );\n\t    \t\tthis.end.copy( end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( line ) {\n\t\n\t    \t\tthis.start.copy( line.start );\n\t    \t\tthis.end.copy( line.end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tdelta: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.subVectors( this.end, this.start );\n\t\n\t    \t},\n\t\n\t    \tdistanceSq: function () {\n\t\n\t    \t\treturn this.start.distanceToSquared( this.end );\n\t\n\t    \t},\n\t\n\t    \tdistance: function () {\n\t\n\t    \t\treturn this.start.distanceTo( this.end );\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPointParameter: function () {\n\t\n\t    \t\tvar startP = new Vector3();\n\t    \t\tvar startEnd = new Vector3();\n\t\n\t    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t    \t\t\tstartP.subVectors( point, this.start );\n\t    \t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t    \t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t    \t\t\tif ( clampToLine ) {\n\t\n\t    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn t;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.start.applyMatrix4( matrix );\n\t    \t\tthis.end.applyMatrix4( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( line ) {\n\t\n\t    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Triangle( a, b, c ) {\n\t\n\t    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\t\n\t    }\n\t\n\t    Triangle.normal = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t\n\t    \treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.subVectors( c, b );\n\t    \t\tv0.subVectors( a, b );\n\t    \t\tresult.cross( v0 );\n\t\n\t    \t\tvar resultLengthSq = result.lengthSq();\n\t    \t\tif ( resultLengthSq > 0 ) {\n\t\n\t    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.set( 0, 0, 0 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    // static/instance method to calculate barycentric coordinates\n\t    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t    Triangle.barycoordFromPoint = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t\n\t    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t    \t\tv0.subVectors( c, a );\n\t    \t\tv1.subVectors( b, a );\n\t    \t\tv2.subVectors( point, a );\n\t\n\t    \t\tvar dot00 = v0.dot( v0 );\n\t    \t\tvar dot01 = v0.dot( v1 );\n\t    \t\tvar dot02 = v0.dot( v2 );\n\t    \t\tvar dot11 = v1.dot( v1 );\n\t    \t\tvar dot12 = v1.dot( v2 );\n\t\n\t    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t// collinear or singular triangle\n\t    \t\tif ( denom === 0 ) {\n\t\n\t    \t\t\t// arbitrary location outside of triangle?\n\t    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t    \t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar invDenom = 1 / denom;\n\t    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t    \t\t// barycentric coordinates must always sum to 1\n\t    \t\treturn result.set( 1 - u - v, v, u );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.containsPoint = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t\n\t    \treturn function containsPoint( point, a, b, c ) {\n\t\n\t    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.prototype = {\n\t\n\t    \tconstructor: Triangle,\n\t\n\t    \tset: function ( a, b, c ) {\n\t\n\t    \t\tthis.a.copy( a );\n\t    \t\tthis.b.copy( b );\n\t    \t\tthis.c.copy( c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t    \t\tthis.a.copy( points[ i0 ] );\n\t    \t\tthis.b.copy( points[ i1 ] );\n\t    \t\tthis.c.copy( points[ i2 ] );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( triangle ) {\n\t\n\t    \t\tthis.a.copy( triangle.a );\n\t    \t\tthis.b.copy( triangle.b );\n\t    \t\tthis.c.copy( triangle.c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tarea: function () {\n\t\n\t    \t\tvar v0 = new Vector3();\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function area() {\n\t\n\t    \t\t\tv0.subVectors( this.c, this.b );\n\t    \t\t\tv1.subVectors( this.a, this.b );\n\t\n\t    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmidpoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t    \t},\n\t\n\t    \tnormal: function ( optionalTarget ) {\n\t\n\t    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tplane: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Plane();\n\t\n\t    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPoint: function () {\n\t\n\t    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t    \t\t\tif ( plane === undefined ) {\n\t\n\t    \t\t\t\tplane = new Plane();\n\t    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t    \t\t\t\tprojectedPoint = new Vector3();\n\t    \t\t\t\tclosestPoint = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t    \t\t\tvar minDistance = Infinity;\n\t\n\t    \t\t\t// project the point onto the plane of the triangle\n\t\n\t    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t    \t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t    \t\t\t// check if the projection lies within the triangle\n\t\n\t    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t    \t\t\t\t// if so, this is the closest point\n\t\n\t    \t\t\t\tresult.copy( projectedPoint );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t    \t\t\t\t\tif( distance < minDistance ) {\n\t\n\t    \t\t\t\t\t\tminDistance = distance;\n\t\n\t    \t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( triangle ) {\n\t\n\t    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Face3( a, b, c, normal, color, materialIndex ) {\n\t\n\t    \tthis.a = a;\n\t    \tthis.b = b;\n\t    \tthis.c = c;\n\t\n\t    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t    \tthis.color = (color && color.isColor) ? color : new Color();\n\t    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t    }\n\t\n\t    Face3.prototype = {\n\t\n\t    \tconstructor: Face3,\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.a = source.a;\n\t    \t\tthis.b = source.b;\n\t    \t\tthis.c = source.c;\n\t\n\t    \t\tthis.normal.copy( source.normal );\n\t    \t\tthis.color.copy( source.color );\n\t\n\t    \t\tthis.materialIndex = source.materialIndex;\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  shading: THREE.SmoothShading,\n\t     *  depthTest: <bool>,\n\t     *  depthWrite: <bool>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // emissive\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n\t    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\t\n\t    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\t\n\t    MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferAttribute( array, itemSize, normalized ) {\n\t\n\t    \tif ( Array.isArray( array ) ) {\n\t\n\t    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t    \t}\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t    \tthis.normalized = normalized === true;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    BufferAttribute.prototype = {\n\t\n\t    \tconstructor: BufferAttribute,\n\t\n\t    \tisBufferAttribute: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.itemSize = source.itemSize;\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.normalized = source.normalized;\n\t\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.itemSize;\n\t    \t\tindex2 *= attribute.itemSize;\n\t\n\t    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyArray: function ( array ) {\n\t\n\t    \t\tthis.array.set( array );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyColorsArray: function ( colors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar color = colors[ i ];\n\t\n\t    \t\t\tif ( color === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t    \t\t\t\tcolor = new Color();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = color.r;\n\t    \t\t\tarray[ offset ++ ] = color.g;\n\t    \t\t\tarray[ offset ++ ] = color.b;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyIndicesArray: function ( indices ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar index = indices[ i ];\n\t\n\t    \t\t\tarray[ offset ++ ] = index.a;\n\t    \t\t\tarray[ offset ++ ] = index.b;\n\t    \t\t\tarray[ offset ++ ] = index.c;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector2sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector3sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector4sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t    \t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize ];\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t    \t\tthis.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Int8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8ClampedAttribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float64Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    // Deprecated\n\t\n\t    function DynamicBufferAttribute( array, itemSize ) {\n\t\n\t    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author kile / http://kile.stravaganza.org/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Geometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Geometry';\n\t\n\t    \tthis.vertices = [];\n\t    \tthis.colors = [];\n\t    \tthis.faces = [];\n\t    \tthis.faceVertexUvs = [ [] ];\n\t\n\t    \tthis.morphTargets = [];\n\t    \tthis.morphNormals = [];\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \tthis.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.elementsNeedUpdate = false;\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.lineDistancesNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisGeometry: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertex.applyMatrix4( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.verticesNeedUpdate = true;\n\t    \t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfromBufferGeometry: function ( geometry ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tvar positions = attributes.position.array;\n\t    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t    \t\tvar tempNormals = [];\n\t    \t\tvar tempUVs = [];\n\t    \t\tvar tempUVs2 = [];\n\t\n\t    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t    \t\t\tif ( normals !== undefined ) {\n\t\n\t    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( colors !== undefined ) {\n\t\n\t    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t    \t\t\tscope.faces.push( face );\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( indices !== undefined ) {\n\t\n\t    \t\t\tvar groups = geometry.groups;\n\t\n\t    \t\t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t    \t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeFaceNormals();\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tthis.computeBoundingSphere();\n\t\n\t    \t\tvar center = this.boundingSphere.center;\n\t    \t\tvar radius = this.boundingSphere.radius;\n\t\n\t    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t    \t\tmatrix.set(\n\t    \t\t\ts, 0, 0, - s * center.x,\n\t    \t\t\t0, s, 0, - s * center.y,\n\t    \t\t\t0, 0, s, - s * center.z,\n\t    \t\t\t0, 0, 0, 1\n\t    \t\t);\n\t\n\t    \t\tthis.applyMatrix( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ f ];\n\t\n\t    \t\t\tvar vA = this.vertices[ face.a ];\n\t    \t\t\tvar vB = this.vertices[ face.b ];\n\t    \t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t    \t\t\tcb.subVectors( vC, vB );\n\t    \t\t\tab.subVectors( vA, vB );\n\t    \t\t\tcb.cross( ab );\n\t\n\t    \t\t\tcb.normalize();\n\t\n\t    \t\t\tface.normal.copy( cb );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t    \t\tvar v, vl, f, fl, face, vertices;\n\t\n\t    \t\tvertices = new Array( this.vertices.length );\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ] = new Vector3();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( areaWeighted ) {\n\t\n\t    \t\t\t// vertex normals weighted by triangle areas\n\t    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t    \t\t\tvar vA, vB, vC;\n\t    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvA = this.vertices[ face.a ];\n\t    \t\t\t\tvB = this.vertices[ face.b ];\n\t    \t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t    \t\t\t\tcb.subVectors( vC, vB );\n\t    \t\t\t\tab.subVectors( vA, vB );\n\t    \t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\tvertices[ face.a ].add( cb );\n\t    \t\t\t\tvertices[ face.b ].add( cb );\n\t    \t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvertices[ face.a ].add( face.normal );\n\t    \t\t\t\tvertices[ face.b ].add( face.normal );\n\t    \t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ].normalize();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.faces.length > 0 ) {\n\t\n\t    \t\t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeMorphNormals: function () {\n\t\n\t    \t\tvar i, il, f, fl, face;\n\t\n\t    \t\t// save original normals\n\t    \t\t// - create temp variables on first access\n\t    \t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t    \t\tvar tmpGeo = new Geometry();\n\t    \t\ttmpGeo.faces = this.faces;\n\t\n\t    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\t// create on first access\n\t\n\t    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t    \t\t\t\tthis.morphNormals[ i ] = {};\n\t    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t    \t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tfaceNormal = new Vector3();\n\t    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\t\n\t    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t    \t\t\t// set vertices to morph target\n\t\n\t    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t// compute morph normals\n\t\n\t    \t\t\ttmpGeo.computeFaceNormals();\n\t    \t\t\ttmpGeo.computeVertexNormals();\n\t\n\t    \t\t\t// store morph normals\n\t\n\t    \t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t    \t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore original normals\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tface.normal = face.__originalFaceNormal;\n\t    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeTangents: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeLineDistances: function () {\n\t\n\t    \t\tvar d = 0;\n\t    \t\tvar vertices = this.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tif ( i > 0 ) {\n\t\n\t    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.lineDistances[ i ] = d;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normalMatrix,\n\t    \t\tvertexOffset = this.vertices.length,\n\t    \t\tvertices1 = this.vertices,\n\t    \t\tvertices2 = geometry.vertices,\n\t    \t\tfaces1 = this.faces,\n\t    \t\tfaces2 = geometry.faces,\n\t    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t    \t\tcolors1 = this.colors,\n\t    \t\tcolors2 = geometry.colors;\n\t\n\t    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t    \t\tif ( matrix !== undefined ) {\n\t\n\t    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\t// vertices\n\t\n\t    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = vertices2[ i ];\n\t\n\t    \t\t\tvar vertexCopy = vertex.clone();\n\t\n\t    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t    \t\t\tvertices1.push( vertexCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// colors\n\t\n\t    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tcolors1.push( colors2[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\t// faces\n\t\n\t    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t    \t\t\tfaceVertexNormals = face.vertexNormals,\n\t    \t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t    \t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t    \t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t    \t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.color.copy( face.color );\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tcolor = faceVertexColors[ j ];\n\t    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t    \t\t\tfaces1.push( faceCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// uvs\n\t\n\t    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t    \t\t\tif ( uv === undefined ) {\n\t\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvs1.push( uvCopy );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmergeMesh: function ( mesh ) {\n\t\n\t    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Checks for duplicate vertices with hashmap.\n\t    \t * Duplicated vertices are removed\n\t    \t * and faces' vertices are updated.\n\t    \t */\n\t\n\t    \tmergeVertices: function () {\n\t\n\t    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t    \t\tvar unique = [], changes = [];\n\t\n\t    \t\tvar v, key;\n\t    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t    \t\tvar precision = Math.pow( 10, precisionPoints );\n\t    \t\tvar i, il, face;\n\t    \t\tvar indices, j, jl;\n\t\n\t    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tv = this.vertices[ i ];\n\t    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t    \t\t\t\tverticesMap[ key ] = i;\n\t    \t\t\t\tunique.push( this.vertices[ i ] );\n\t    \t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// if faces are completely degenerate after merging vertices, we\n\t    \t\t// have to remove them from the geometry.\n\t    \t\tvar faceIndicesToRemove = [];\n\t\n\t    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = this.faces[ i ];\n\t\n\t    \t\t\tface.a = changes[ face.a ];\n\t    \t\t\tface.b = changes[ face.b ];\n\t    \t\t\tface.c = changes[ face.c ];\n\t\n\t    \t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t    \t\t\tvar dupIndex = - 1;\n\t\n\t    \t\t\t// if any duplicate vertices are found in a Face3\n\t    \t\t\t// we have to remove the face as nothing can be saved\n\t    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t    \t\t\t\t\tdupIndex = n;\n\t    \t\t\t\t\tfaceIndicesToRemove.push( i );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t    \t\t\tthis.faces.splice( idx, 1 );\n\t\n\t    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Use unique set of vertices\n\t\n\t    \t\tvar diff = this.vertices.length - unique.length;\n\t    \t\tthis.vertices = unique;\n\t    \t\treturn diff;\n\t\n\t    \t},\n\t\n\t    \tsortFacesByMaterialIndex: function () {\n\t\n\t    \t\tvar faces = this.faces;\n\t    \t\tvar length = faces.length;\n\t\n\t    \t\t// tag faces\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tfaces[ i ]._id = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// sort faces\n\t\n\t    \t\tfunction materialIndexSort( a, b ) {\n\t\n\t    \t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tfaces.sort( materialIndexSort );\n\t\n\t    \t\t// sort uvs\n\t\n\t    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t    \t\tvar newUvs1, newUvs2;\n\t\n\t    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tvar id = faces[ i ]._id;\n\t\n\t    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Geometry',\n\t    \t\t\t\tgenerator: 'Geometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Geometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vertices = [];\n\t\n\t    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = [];\n\t    \t\tvar normals = [];\n\t    \t\tvar normalsHash = {};\n\t    \t\tvar colors = [];\n\t    \t\tvar colorsHash = {};\n\t    \t\tvar uvs = [];\n\t    \t\tvar uvsHash = {};\n\t\n\t    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t\n\t    \t\t\tvar hasMaterial = true;\n\t    \t\t\tvar hasFaceUv = false; // deprecated\n\t    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t    \t\t\tvar faceType = 0;\n\t\n\t    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t    \t\t\tfaces.push( faceType );\n\t    \t\t\tfaces.push( face.a, face.b, face.c );\n\t    \t\t\tfaces.push( face.materialIndex );\n\t\n\t    \t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction setBit( value, position, enabled ) {\n\t\n\t    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getNormalIndex( normal ) {\n\t\n\t    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t    \t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getColorIndex( color ) {\n\t\n\t    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcolorsHash[ hash ] = colors.length;\n\t    \t\t\tcolors.push( color.getHex() );\n\t\n\t    \t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getUvIndex( uv ) {\n\t\n\t    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t    \t\t\tuvs.push( uv.x, uv.y );\n\t\n\t    \t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = {};\n\t\n\t    \t\tdata.data.vertices = vertices;\n\t    \t\tdata.data.normals = normals;\n\t    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t    \t\tdata.data.faces = faces;\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new Geometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.vertices = [];\n\t    \t\tthis.faces = [];\n\t    \t\tthis.faceVertexUvs = [ [] ];\n\t    \t\tthis.colors = [];\n\t\n\t    \t\tvar vertices = source.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar colors = source.colors;\n\t\n\t    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.colors.push( colors[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = source.faces;\n\t\n\t    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$3 = 0;\n\t    function GeometryIdCount() { return count$3++; };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'DirectGeometry';\n\t\n\t    \tthis.indices = [];\n\t    \tthis.vertices = [];\n\t    \tthis.normals = [];\n\t    \tthis.colors = [];\n\t    \tthis.uvs = [];\n\t    \tthis.uvs2 = [];\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.morphTargets = {};\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \t// this.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeGroups: function ( geometry ) {\n\t\n\t    \t\tvar group;\n\t    \t\tvar groups = [];\n\t    \t\tvar materialIndex;\n\t\n\t    \t\tvar faces = geometry.faces;\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t// materials\n\t\n\t    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t    \t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t    \t\t\t\tif ( group !== undefined ) {\n\t\n\t    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\t\t\tgroups.push( group );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgroup = {\n\t    \t\t\t\t\tstart: i * 3,\n\t    \t\t\t\t\tmaterialIndex: materialIndex\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( group !== undefined ) {\n\t\n\t    \t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\tgroups.push( group );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.groups = groups;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tvar morphTargets = geometry.morphTargets;\n\t    \t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t    \t\tvar morphTargetsPosition;\n\t\n\t    \t\tif ( morphTargetsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsPosition = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar morphNormals = geometry.morphNormals;\n\t    \t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t    \t\tvar morphTargetsNormal;\n\t\n\t    \t\tif ( morphNormalsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsNormal = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skins\n\t\n\t    \t\tvar skinIndices = geometry.skinIndices;\n\t    \t\tvar skinWeights = geometry.skinWeights;\n\t\n\t    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t    \t\t//\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar normal = face.normal;\n\t\n\t    \t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar color = face.color;\n\t\n\t    \t\t\t\tthis.colors.push( color, color, color );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// morphs\n\t\n\t    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// skins\n\t\n\t    \t\t\tif ( hasSkinIndices ) {\n\t\n\t    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasSkinWeights ) {\n\t\n\t    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeGroups( geometry );\n\t\n\t    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'BufferGeometry';\n\t\n\t    \tthis.index = null;\n\t    \tthis.attributes = {};\n\t\n\t    \tthis.morphAttributes = {};\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisBufferGeometry: true,\n\t\n\t    \tgetIndex: function () {\n\t\n\t    \t\treturn this.index;\n\t\n\t    \t},\n\t\n\t    \tsetIndex: function ( index ) {\n\t\n\t    \t\tthis.index = index;\n\t\n\t    \t},\n\t\n\t    \taddAttribute: function ( name, attribute ) {\n\t\n\t    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( name === 'index' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t    \t\t\tthis.setIndex( attribute );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.attributes[ name ] = attribute;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetAttribute: function ( name ) {\n\t\n\t    \t\treturn this.attributes[ name ];\n\t\n\t    \t},\n\t\n\t    \tremoveAttribute: function ( name ) {\n\t\n\t    \t\tdelete this.attributes[ name ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddGroup: function ( start, count, materialIndex ) {\n\t\n\t    \t\tthis.groups.push( {\n\t\n\t    \t\t\tstart: start,\n\t    \t\t\tcount: count,\n\t    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \tclearGroups: function () {\n\t\n\t    \t\tthis.groups = [];\n\t\n\t    \t},\n\t\n\t    \tsetDrawRange: function ( start, count ) {\n\t\n\t    \t\tthis.drawRange.start = start;\n\t    \t\tthis.drawRange.count = count;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar position = this.attributes.position;\n\t\n\t    \t\tif ( position !== undefined ) {\n\t\n\t    \t\t\tmatrix.applyToVector3Array( position.array );\n\t    \t\t\tposition.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normal = this.attributes.normal;\n\t\n\t    \t\tif ( normal !== undefined ) {\n\t\n\t    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t    \t\t\tnormal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tsetFromObject: function ( object ) {\n\t\n\t    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\t\n\t    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tthis.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateFromObject: function ( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tvar direct = geometry.__directGeometry;\n\t\n\t    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\t\n\t    \t\t\t\tdirect = undefined;\n\t    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direct === undefined ) {\n\t\n\t    \t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t\tgeometry = direct;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attribute;\n\t\n\t    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.position;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.normal;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.color;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.uv;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.lineDistance;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t    \t\t\tgeometry.computeGroups( object.geometry );\n\t    \t\t\tthis.groups = geometry.groups;\n\t\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\t\n\t    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t    \t},\n\t\n\t    \tfromDirectGeometry: function ( geometry ) {\n\t\n\t    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t    \t\tif ( geometry.normals.length > 0 ) {\n\t\n\t    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colors.length > 0 ) {\n\t\n\t    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.indices.length > 0 ) {\n\t\n\t    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t// groups\n\t\n\t    \t\tthis.groups = geometry.groups;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t    \t\t\tvar array = [];\n\t    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning\n\t\n\t    \t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar positions = this.attributes.position.array;\n\t\n\t    \t\tif ( positions !== undefined ) {\n\t\n\t    \t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.boundingBox.makeEmpty();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\treturn function computeBoundingSphere() {\n\t\n\t    \t\t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar positions = this.attributes.position;\n\t\n\t    \t\t\tif ( positions ) {\n\t\n\t    \t\t\t\tvar array = positions.array;\n\t    \t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t    \t\t\t\tbox.setFromArray( array );\n\t    \t\t\t\tbox.getCenter( center );\n\t\n\t    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t    \t\t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tvector.fromArray( array, i );\n\t    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\t// backwards compatibility\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tvar index = this.index;\n\t    \t\tvar attributes = this.attributes;\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( attributes.position ) {\n\t\n\t    \t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\tif ( attributes.normal === undefined ) {\n\t\n\t    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// reset existing normals to zero\n\t\n\t    \t\t\t\tvar array = attributes.normal.array;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tarray[ i ] = 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar normals = attributes.normal.array;\n\t\n\t    \t\t\tvar vA, vB, vC,\n\t\n\t    \t\t\tpA = new Vector3(),\n\t    \t\t\tpB = new Vector3(),\n\t    \t\t\tpC = new Vector3(),\n\t\n\t    \t\t\tcb = new Vector3(),\n\t    \t\t\tab = new Vector3();\n\t\n\t    \t\t\t// indexed elements\n\t\n\t    \t\t\tif ( index ) {\n\t\n\t    \t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ j ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t    \t\t\t\t\t\tpA.fromArray( positions, vA );\n\t    \t\t\t\t\t\tpB.fromArray( positions, vB );\n\t    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t    \t\t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t    \t\t\t\t\tpA.fromArray( positions, i );\n\t    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t    \t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\tnormals[ i ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.normalizeNormals();\n\t\n\t    \t\t\tattributes.normal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, offset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t    \t\t\tvar attribute1 = attributes[ key ];\n\t    \t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t    \t\t\tvar attribute2 = geometry.attributes[ key ];\n\t    \t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t    \t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalizeNormals: function () {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t\n\t    \t\tvar x, y, z, n;\n\t\n\t    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t    \t\t\tx = normals[ i ];\n\t    \t\t\ty = normals[ i + 1 ];\n\t    \t\t\tz = normals[ i + 2 ];\n\t\n\t    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t    \t\t\tnormals[ i ] *= n;\n\t    \t\t\tnormals[ i + 1 ] *= n;\n\t    \t\t\tnormals[ i + 2 ] *= n;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoNonIndexed: function () {\n\t\n\t    \t\tif ( this.index === null ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar geometry2 = new BufferGeometry();\n\t\n\t    \t\tvar indices = this.index.array;\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t\n\t    \t\t\tvar array = attribute.array;\n\t    \t\t\tvar itemSize = attribute.itemSize;\n\t\n\t    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t    \t\t\tvar index = 0, index2 = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'BufferGeometry',\n\t    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard BufferGeometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = { attributes: {} };\n\t\n\t    \t\tvar index = this.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t    \t\t\tdata.data.index = {\n\t    \t\t\t\ttype: index.array.constructor.name,\n\t    \t\t\t\tarray: array\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t    \t\t\tdata.data.attributes[ key ] = {\n\t    \t\t\t\titemSize: attribute.itemSize,\n\t    \t\t\t\ttype: attribute.array.constructor.name,\n\t    \t\t\t\tarray: array,\n\t    \t\t\t\tnormalized: attribute.normalized\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = this.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== null ) {\n\t\n\t    \t\t\tdata.data.boundingSphere = {\n\t    \t\t\t\tcenter: boundingSphere.center.toArray(),\n\t    \t\t\t\tradius: boundingSphere.radius\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new BufferGeometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tvar index = source.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tthis.setIndex( index.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = source.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t    \t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = source.groups;\n\t\n\t    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar group = groups[ i ];\n\t    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    BufferGeometry.MaxIndex = 65535;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author jonobr1 / http://jonobr1.com/\n\t     */\n\t\n\t    function Mesh( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Mesh';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    \tthis.drawMode = TrianglesDrawMode;\n\t\n\t    \tthis.updateMorphTargets();\n\t\n\t    }\n\t\n\t    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Mesh,\n\t\n\t    \tisMesh: true,\n\t\n\t    \tsetDrawMode: function ( value ) {\n\t\n\t    \t\tthis.drawMode = value;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.drawMode = source.drawMode;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateMorphTargets: function () {\n\t\n\t    \t\tvar morphTargets = this.geometry.morphTargets;\n\t\n\t    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\t\n\t    \t\t\tthis.morphTargetInfluences = [];\n\t    \t\t\tthis.morphTargetDictionary = {};\n\t\n\t    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\t\n\t    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\tvar vA = new Vector3();\n\t    \t\tvar vB = new Vector3();\n\t    \t\tvar vC = new Vector3();\n\t\n\t    \t\tvar tempA = new Vector3();\n\t    \t\tvar tempB = new Vector3();\n\t    \t\tvar tempC = new Vector3();\n\t\n\t    \t\tvar uvA = new Vector2();\n\t    \t\tvar uvB = new Vector2();\n\t    \t\tvar uvC = new Vector2();\n\t\n\t    \t\tvar barycoord = new Vector3();\n\t\n\t    \t\tvar intersectionPoint = new Vector3();\n\t    \t\tvar intersectionPointWorld = new Vector3();\n\t\n\t    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t    \t\t\tuv1.multiplyScalar( barycoord.x );\n\t    \t\t\tuv2.multiplyScalar( barycoord.y );\n\t    \t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t    \t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t    \t\t\treturn uv1.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t    \t\t\tvar intersect;\n\t    \t\t\tvar material = object.material;\n\t\n\t    \t\t\tif ( material.side === BackSide ) {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( intersect === null ) return null;\n\t\n\t    \t\t\tintersectionPointWorld.copy( point );\n\t    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t    \t\t\treturn {\n\t    \t\t\t\tdistance: distance,\n\t    \t\t\t\tpoint: intersectionPointWorld.clone(),\n\t    \t\t\t\tobject: object\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t    \t\t\tvA.fromArray( positions, a * 3 );\n\t    \t\t\tvB.fromArray( positions, b * 3 );\n\t    \t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t    \t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t    \t\t\t\tintersection.faceIndex = a;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn intersection;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar material = this.material;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\tif ( material === undefined ) return;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\t// Check boundingBox before continuing\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uvs, intersection;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar a, b, c;\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t    \t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\t\t\ta = indices[ i ];\n\t    \t\t\t\t\t\tb = indices[ i + 1 ];\n\t    \t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\t\ta = i / 3;\n\t    \t\t\t\t\t\tb = a + 1;\n\t    \t\t\t\t\t\tc = a + 2;\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar fvA, fvB, fvC;\n\t    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tvar face = faces[ f ];\n\t    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t    \t\t\t\t\tfvA = vertices[ face.a ];\n\t    \t\t\t\t\tfvB = vertices[ face.b ];\n\t    \t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvA.add( fvA );\n\t    \t\t\t\t\t\tvB.add( fvB );\n\t    \t\t\t\t\t\tvC.add( fvC );\n\t\n\t    \t\t\t\t\t\tfvA = vA;\n\t    \t\t\t\t\t\tfvB = vB;\n\t    \t\t\t\t\t\tfvC = vC;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t    \t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tintersection.face = face;\n\t    \t\t\t\t\t\tintersection.faceIndex = f;\n\t    \t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \t// segments\n\t    \twidthSegments = Math.floor( widthSegments ) || 1;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t    \tvar numberOfVertices = 0;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// build each side of the box geometry\n\t    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount( w, h, d ) {\n\t\n\t    \t\tvar vertices = 0;\n\t\n\t    \t\t// calculate the amount of vertices for each side (plane)\n\t    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t    \t\treturn vertices;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount( w, h, d ) {\n\t\n\t    \t\tvar index = 0;\n\t\n\t    \t\t// calculate the amount of squares for each side\n\t    \t\tindex += w * h * 2; // xy\n\t    \t\tindex += w * d * 2; // xz\n\t    \t\tindex += d * h * 2; // zy\n\t\n\t    \t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t    \t}\n\t\n\t    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t    \t\tvar segmentWidth\t= width / gridX;\n\t    \t\tvar segmentHeight = height / gridY;\n\t\n\t    \t\tvar widthHalf = width / 2;\n\t    \t\tvar heightHalf = height / 2;\n\t    \t\tvar depthHalf = depth / 2;\n\t\n\t    \t\tvar gridX1 = gridX + 1;\n\t    \t\tvar gridY1 = gridY + 1;\n\t\n\t    \t\tvar vertexCounter = 0;\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = x * udir;\n\t    \t\t\t\tvector[ v ] = y * vdir;\n\t    \t\t\t\tvector[ w ] = depthHalf;\n\t\n\t    \t\t\t\t// now apply vector to vertex buffer\n\t    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = 0;\n\t    \t\t\t\tvector[ v ] = 0;\n\t    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t    \t\t\t\t// now apply vector to normal buffer\n\t    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// uvs\n\t    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tvertexBufferOffset += 3;\n\t    \t\t\t\tuvBufferOffset += 2;\n\t    \t\t\t\tvertexCounter += 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// 1. you need three indices to draw a single face\n\t    \t\t// 2. a single segment consists of two faces\n\t    \t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\t\t// indices\n\t    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tindexBufferOffset += 6;\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t\t// update total number of vertices\n\t    \t\tnumberOfVertices += vertexCounter;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tvar width_half = width / 2;\n\t    \tvar height_half = height / 2;\n\t\n\t    \tvar gridX = Math.floor( widthSegments ) || 1;\n\t    \tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t    \tvar gridX1 = gridX + 1;\n\t    \tvar gridY1 = gridY + 1;\n\t\n\t    \tvar segment_width = width / gridX;\n\t    \tvar segment_height = height / gridY;\n\t\n\t    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t    \tvar offset = 0;\n\t    \tvar offset2 = 0;\n\t\n\t    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\tvar y = iy * segment_height - height_half;\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\tvar x = ix * segment_width - width_half;\n\t\n\t    \t\t\tvertices[ offset ] = x;\n\t    \t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t    \t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t    \t\t\tuvs[ offset2 ] = ix / gridX;\n\t    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\toffset += 3;\n\t    \t\t\toffset2 += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \toffset = 0;\n\t\n\t    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\tvar a = ix + gridX1 * iy;\n\t    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\tindices[ offset ] = a;\n\t    \t\t\tindices[ offset + 1 ] = b;\n\t    \t\t\tindices[ offset + 2 ] = d;\n\t\n\t    \t\t\tindices[ offset + 3 ] = b;\n\t    \t\t\tindices[ offset + 4 ] = c;\n\t    \t\t\tindices[ offset + 5 ] = d;\n\t\n\t    \t\t\toffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function Camera() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Camera';\n\t\n\t    \tthis.matrixWorldInverse = new Matrix4();\n\t    \tthis.projectionMatrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Camera.prototype = Object.create( Object3D.prototype );\n\t    Camera.prototype.constructor = Camera;\n\t\n\t    Camera.prototype.isCamera = true;\n\t\n\t    Camera.prototype.getWorldDirection = function () {\n\t\n\t    \tvar quaternion = new Quaternion();\n\t\n\t    \treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.lookAt = function () {\n\t\n\t    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t    \tvar m1 = new Matrix4();\n\t\n\t    \treturn function lookAt( vector ) {\n\t\n\t    \t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.clone = function () {\n\t\n\t    \treturn new this.constructor().copy( this );\n\t\n\t    };\n\t\n\t    Camera.prototype.copy = function ( source ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source );\n\t\n\t    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author greggman / http://games.greggman.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author tschw\n\t     */\n\t\n\t    function PerspectiveCamera( fov, aspect, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'PerspectiveCamera';\n\t\n\t    \tthis.fov = fov !== undefined ? fov : 50;\n\t    \tthis.zoom = 1;\n\t\n\t    \tthis.near = near !== undefined ? near : 0.1;\n\t    \tthis.far = far !== undefined ? far : 2000;\n\t    \tthis.focus = 10;\n\t\n\t    \tthis.aspect = aspect !== undefined ? aspect : 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: PerspectiveCamera,\n\t\n\t    \tisPerspectiveCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.fov = source.fov;\n\t    \t\tthis.zoom = source.zoom;\n\t\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t    \t\tthis.focus = source.focus;\n\t\n\t    \t\tthis.aspect = source.aspect;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\tthis.filmGauge = source.filmGauge;\n\t    \t\tthis.filmOffset = source.filmOffset;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t    \t *\n\t    \t * The default film gauge is 35, so that the focal length can be specified for\n\t    \t * a 35mm (full frame) camera.\n\t    \t *\n\t    \t * Values for focal length and film gauge must have the same unit.\n\t    \t */\n\t    \tsetFocalLength: function ( focalLength ) {\n\t\n\t    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Calculates the focal length from the current .fov and .filmGauge.\n\t    \t */\n\t    \tgetFocalLength: function () {\n\t\n\t    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t    \t},\n\t\n\t    \tgetEffectiveFOV: function () {\n\t\n\t    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n\t    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t    \t},\n\t\n\t    \tgetFilmWidth: function () {\n\t\n\t    \t\t// film not completely covered in portrait format (aspect < 1)\n\t    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \tgetFilmHeight: function () {\n\t\n\t    \t\t// film not completely covered in landscape format (aspect > 1)\n\t    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t    \t * multi-monitor/multi-machine setups.\n\t    \t *\n\t    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t    \t * the monitors are in grid like this\n\t    \t *\n\t    \t *   +---+---+---+\n\t    \t *   | A | B | C |\n\t    \t *   +---+---+---+\n\t    \t *   | D | E | F |\n\t    \t *   +---+---+---+\n\t    \t *\n\t    \t * then for each monitor you would call it like this\n\t    \t *\n\t    \t *   var w = 1920;\n\t    \t *   var h = 1080;\n\t    \t *   var fullWidth = w * 3;\n\t    \t *   var fullHeight = h * 2;\n\t    \t *\n\t    \t *   --A--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t    \t *   --B--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t    \t *   --C--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t    \t *   --D--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t    \t *   --E--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t    \t *   --F--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t    \t *\n\t    \t *   Note there is no reason monitors have to be the same size or in a grid.\n\t    \t */\n\t    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar near = this.near,\n\t    \t\t\ttop = near * Math.tan(\n\t    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t    \t\t\theight = 2 * top,\n\t    \t\t\twidth = this.aspect * height,\n\t    \t\t\tleft = - 0.5 * width,\n\t    \t\t\tview = this.view;\n\t\n\t    \t\tif ( view !== null ) {\n\t\n\t    \t\t\tvar fullWidth = view.fullWidth,\n\t    \t\t\t\tfullHeight = view.fullHeight;\n\t\n\t    \t\t\tleft += view.offsetX * width / fullWidth;\n\t    \t\t\ttop -= view.offsetY * height / fullHeight;\n\t    \t\t\twidth *= view.width / fullWidth;\n\t    \t\t\theight *= view.height / fullHeight;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar skew = this.filmOffset;\n\t    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t    \t\tthis.projectionMatrix.makeFrustum(\n\t    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.fov = this.fov;\n\t    \t\tdata.object.zoom = this.zoom;\n\t\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t    \t\tdata.object.focus = this.focus;\n\t\n\t    \t\tdata.object.aspect = this.aspect;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\tdata.object.filmGauge = this.filmGauge;\n\t    \t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author arose / http://github.com/arose\n\t     */\n\t\n\t    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'OrthographicCamera';\n\t\n\t    \tthis.zoom = 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.left = left;\n\t    \tthis.right = right;\n\t    \tthis.top = top;\n\t    \tthis.bottom = bottom;\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 0.1;\n\t    \tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: OrthographicCamera,\n\t\n\t    \tisOrthographicCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.left = source.left;\n\t    \t\tthis.right = source.right;\n\t    \t\tthis.top = source.top;\n\t    \t\tthis.bottom = source.bottom;\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t\n\t    \t\tthis.zoom = source.zoom;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t    \t\tvar cx = ( this.right + this.left ) / 2;\n\t    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t    \t\tvar left = cx - dx;\n\t    \t\tvar right = cx + dx;\n\t    \t\tvar top = cy + dy;\n\t    \t\tvar bottom = cy - dy;\n\t\n\t    \t\tif ( this.view !== null ) {\n\t\n\t    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.zoom = this.zoom;\n\t    \t\tdata.object.left = this.left;\n\t    \t\tdata.object.right = this.right;\n\t    \t\tdata.object.top = this.top;\n\t    \t\tdata.object.bottom = this.bottom;\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tvar type, size;\n\t\n\t    \tfunction setIndex( index ) {\n\t\n\t    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_INT;\n\t    \t\t\tsize = 4;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_SHORT;\n\t    \t\t\tsize = 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawElements( mode, count, type, start * size );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry, start, count ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tsetMode: setMode,\n\t    \t\tsetIndex: setIndex,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawArrays( mode, start, count );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar position = geometry.attributes.position;\n\t\n\t    \t\tvar count = 0;\n\t\n\t    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\tcount = position.data.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcount = position.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t}\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t    \t\tsetMode: setMode,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLLights() {\n\t\n\t    \tvar lights = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( light ) {\n\t\n\t    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn lights[ light.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uniforms;\n\t\n\t    \t\t\tswitch ( light.type ) {\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tconeCos: 0,\n\t    \t\t\t\t\t\tpenumbraCos: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tskyColor: new Color(),\n\t    \t\t\t\t\t\tgroundColor: new Color()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlights[ light.id ] = uniforms;\n\t\n\t    \t\t\treturn uniforms;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function addLineNumbers( string ) {\n\t\n\t    \tvar lines = string.split( '\\n' );\n\t\n\t    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t    \t}\n\t\n\t    \treturn lines.join( '\\n' );\n\t\n\t    }\n\t\n\t    function WebGLShader( gl, type, string ) {\n\t\n\t    \tvar shader = gl.createShader( type );\n\t\n\t    \tgl.shaderSource( shader, string );\n\t    \tgl.compileShader( shader );\n\t\n\t    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t    \t}\n\t\n\t    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t    \t}\n\t\n\t    \t// --enable-privileged-webgl-extension\n\t    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t    \treturn shader;\n\t\n\t    }\n\t\n\t    var programIdCount = 0;\n\t\n\t    function getEncodingComponents( encoding ) {\n\t\n\t    \tswitch ( encoding ) {\n\t\n\t    \t\tcase LinearEncoding:\n\t    \t\t\treturn [ 'Linear','( value )' ];\n\t    \t\tcase sRGBEncoding:\n\t    \t\t\treturn [ 'sRGB','( value )' ];\n\t    \t\tcase RGBEEncoding:\n\t    \t\t\treturn [ 'RGBE','( value )' ];\n\t    \t\tcase RGBM7Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t    \t\tcase RGBM16Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t    \t\tcase RGBDEncoding:\n\t    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t    \t\tcase GammaEncoding:\n\t    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t    \tvar toneMappingName;\n\t\n\t    \tswitch ( toneMapping ) {\n\t\n\t    \t\tcase LinearToneMapping:\n\t    \t\t\ttoneMappingName = \"Linear\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase ReinhardToneMapping:\n\t    \t\t\ttoneMappingName = \"Reinhard\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase Uncharted2ToneMapping:\n\t    \t\t\ttoneMappingName = \"Uncharted2\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase CineonToneMapping:\n\t    \t\t\ttoneMappingName = \"OptimizedCineon\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t    \t}\n\t\n\t    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t    }\n\t\n\t    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t    \textensions = extensions || {};\n\t\n\t    \tvar chunks = [\n\t    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t    \t];\n\t\n\t    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    }\n\t\n\t    function generateDefines( defines ) {\n\t\n\t    \tvar chunks = [];\n\t\n\t    \tfor ( var name in defines ) {\n\t\n\t    \t\tvar value = defines[ name ];\n\t\n\t    \t\tif ( value === false ) continue;\n\t\n\t    \t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t    \t}\n\t\n\t    \treturn chunks.join( '\\n' );\n\t\n\t    }\n\t\n\t    function fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t    \tvar attributes = {};\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t    \tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t    \t\tvar info = gl.getActiveAttrib( program, i );\n\t    \t\tvar name = info.name;\n\t\n\t    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t    \t}\n\t\n\t    \treturn attributes;\n\t\n\t    }\n\t\n\t    function filterEmptyLine( string ) {\n\t\n\t    \treturn string !== '';\n\t\n\t    }\n\t\n\t    function replaceLightNums( string, parameters ) {\n\t\n\t    \treturn string\n\t    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t    }\n\t\n\t    function parseIncludes( string ) {\n\t\n\t    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t    \tfunction replace( match, include ) {\n\t\n\t    \t\tvar replace = ShaderChunk[ include ];\n\t\n\t    \t\tif ( replace === undefined ) {\n\t\n\t    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn parseIncludes( replace );\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function unrollLoops( string ) {\n\t\n\t    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t    \tfunction replace( match, start, end, snippet ) {\n\t\n\t    \t\tvar unroll = '';\n\t\n\t    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn unroll;\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t    \tvar gl = renderer.context;\n\t\n\t    \tvar extensions = material.extensions;\n\t    \tvar defines = material.defines;\n\t\n\t    \tvar vertexShader = material.__webglShader.vertexShader;\n\t    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t    \t}\n\t\n\t    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t    \tif ( parameters.envMap ) {\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeReflectionMapping:\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase CubeUVReflectionMapping:\n\t    \t\t\tcase CubeUVRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase EquirectangularReflectionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase SphericalReflectionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.combine ) {\n\t\n\t    \t\t\tcase MultiplyOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase MixOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase AddOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t    \t// console.log( 'building new program ' );\n\t\n\t    \t//\n\t\n\t    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t    \tvar customDefines = generateDefines( defines );\n\t\n\t    \t//\n\t\n\t    \tvar program = gl.createProgram();\n\t\n\t    \tvar prefixVertex, prefixFragment;\n\t\n\t    \tif ( material.isRawShaderMaterial ) {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t} else {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 modelMatrix;',\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform mat3 normalMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t'attribute vec3 position;',\n\t    \t\t\t'attribute vec3 normal;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'#ifdef USE_COLOR',\n\t\n\t    \t\t\t'\tattribute vec3 color;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t    \t\t\t'\tattribute vec3 morphTarget0;',\n\t    \t\t\t'\tattribute vec3 morphTarget1;',\n\t    \t\t\t'\tattribute vec3 morphTarget2;',\n\t    \t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphNormal0;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal1;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal2;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t    \t\t\t'\t#else',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphTarget4;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget5;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget6;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t    \t\t\t'\t#endif',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_SKINNING',\n\t\n\t    \t\t\t'\tattribute vec4 skinIndex;',\n\t    \t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t}\n\t\n\t    \tvertexShader = parseIncludes( vertexShader, parameters );\n\t    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t    \tif ( ! material.isShaderMaterial ) {\n\t\n\t    \t\tvertexShader = unrollLoops( vertexShader );\n\t    \t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t    \t}\n\t\n\t    \tvar vertexGlsl = prefixVertex + vertexShader;\n\t    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t    \t// console.log( '*VERTEX*', vertexGlsl );\n\t    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t    \tgl.attachShader( program, glVertexShader );\n\t    \tgl.attachShader( program, glFragmentShader );\n\t\n\t    \t// Force a particular attribute to index 0.\n\t\n\t    \tif ( material.index0AttributeName !== undefined ) {\n\t\n\t    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t    \t} else if ( parameters.morphTargets === true ) {\n\t\n\t    \t\t// programs with morphTargets displace position out of attribute 0\n\t    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t    \t}\n\t\n\t    \tgl.linkProgram( program );\n\t\n\t    \tvar programLog = gl.getProgramInfoLog( program );\n\t    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t    \tvar runnable = true;\n\t    \tvar haveDiagnostics = true;\n\t\n\t    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t    \t\trunnable = false;\n\t\n\t    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t    \t} else if ( programLog !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t    \t\thaveDiagnostics = false;\n\t\n\t    \t}\n\t\n\t    \tif ( haveDiagnostics ) {\n\t\n\t    \t\tthis.diagnostics = {\n\t\n\t    \t\t\trunnable: runnable,\n\t    \t\t\tmaterial: material,\n\t\n\t    \t\t\tprogramLog: programLog,\n\t\n\t    \t\t\tvertexShader: {\n\t\n\t    \t\t\t\tlog: vertexLog,\n\t    \t\t\t\tprefix: prefixVertex\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfragmentShader: {\n\t\n\t    \t\t\t\tlog: fragmentLog,\n\t    \t\t\t\tprefix: prefixFragment\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t// clean up\n\t\n\t    \tgl.deleteShader( glVertexShader );\n\t    \tgl.deleteShader( glFragmentShader );\n\t\n\t    \t// set up caching for uniform locations\n\t\n\t    \tvar cachedUniforms;\n\t\n\t    \tthis.getUniforms = function() {\n\t\n\t    \t\tif ( cachedUniforms === undefined ) {\n\t\n\t    \t\t\tcachedUniforms =\n\t    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedUniforms;\n\t\n\t    \t};\n\t\n\t    \t// set up caching for attribute locations\n\t\n\t    \tvar cachedAttributes;\n\t\n\t    \tthis.getAttributes = function() {\n\t\n\t    \t\tif ( cachedAttributes === undefined ) {\n\t\n\t    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedAttributes;\n\t\n\t    \t};\n\t\n\t    \t// free resource\n\t\n\t    \tthis.destroy = function() {\n\t\n\t    \t\tgl.deleteProgram( program );\n\t    \t\tthis.program = undefined;\n\t\n\t    \t};\n\t\n\t    \t// DEPRECATED\n\t\n\t    \tObject.defineProperties( this, {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t    \t\t\t\treturn this.getUniforms();\n\t\n\t    \t\t\t}\n\t    \t\t},\n\t\n\t    \t\tattributes: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t    \t\t\t\treturn this.getAttributes();\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t\n\t    \t//\n\t\n\t    \tthis.id = programIdCount ++;\n\t    \tthis.code = code;\n\t    \tthis.usedTimes = 1;\n\t    \tthis.program = program;\n\t    \tthis.vertexShader = glVertexShader;\n\t    \tthis.fragmentShader = glFragmentShader;\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    function WebGLPrograms( renderer, capabilities ) {\n\t\n\t    \tvar programs = [];\n\t\n\t    \tvar shaderIDs = {\n\t    \t\tMeshDepthMaterial: 'depth',\n\t    \t\tMeshNormalMaterial: 'normal',\n\t    \t\tMeshBasicMaterial: 'basic',\n\t    \t\tMeshLambertMaterial: 'lambert',\n\t    \t\tMeshPhongMaterial: 'phong',\n\t    \t\tMeshStandardMaterial: 'physical',\n\t    \t\tMeshPhysicalMaterial: 'physical',\n\t    \t\tLineBasicMaterial: 'basic',\n\t    \t\tLineDashedMaterial: 'dashed',\n\t    \t\tPointsMaterial: 'points'\n\t    \t};\n\t\n\t    \tvar parameterNames = [\n\t    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t    \t\t\"roughnessMap\", \"metalnessMap\",\n\t    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t    \t];\n\t\n\t\n\t    \tfunction allocateBones( object ) {\n\t\n\t    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t    \t\t\treturn 1024;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// default for when object is not specified\n\t    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t    \t\t\t//\n\t    \t\t\t//  - leave some extra space for other uniforms\n\t    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t    \t\t\t//    (up to 54 should be safe)\n\t\n\t    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t    \t\t\tvar maxBones = nVertexMatrices;\n\t\n\t    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\t\n\t    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn maxBones;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t    \t\tvar encoding;\n\t\n\t    \t\tif ( ! map ) {\n\t\n\t    \t\t\tencoding = LinearEncoding;\n\t\n\t    \t\t} else if ( (map && map.isTexture) ) {\n\t\n\t    \t\t\tencoding = map.encoding;\n\t\n\t    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\t\n\t    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\tencoding = map.texture.encoding;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\t\n\t    \t\t\tencoding = GammaEncoding;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn encoding;\n\t\n\t    \t}\n\t\n\t    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\t\n\t    \t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t    \t\t// heuristics to create shader parameters according to lights in the scene\n\t    \t\t// (not to blow over maxLights budget)\n\t\n\t    \t\tvar maxBones = allocateBones( object );\n\t    \t\tvar precision = renderer.getPrecision();\n\t\n\t    \t\tif ( material.precision !== null ) {\n\t\n\t    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t    \t\t\tif ( precision !== material.precision ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t    \t\tvar parameters = {\n\t\n\t    \t\t\tshaderID: shaderID,\n\t\n\t    \t\t\tprecision: precision,\n\t    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t    \t\t\tmap: !! material.map,\n\t    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t    \t\t\tenvMap: !! material.envMap,\n\t    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t    \t\t\tlightMap: !! material.lightMap,\n\t    \t\t\taoMap: !! material.aoMap,\n\t    \t\t\temissiveMap: !! material.emissiveMap,\n\t    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t    \t\t\tbumpMap: !! material.bumpMap,\n\t    \t\t\tnormalMap: !! material.normalMap,\n\t    \t\t\tdisplacementMap: !! material.displacementMap,\n\t    \t\t\troughnessMap: !! material.roughnessMap,\n\t    \t\t\tmetalnessMap: !! material.metalnessMap,\n\t    \t\t\tspecularMap: !! material.specularMap,\n\t    \t\t\talphaMap: !! material.alphaMap,\n\t\n\t    \t\t\tcombine: material.combine,\n\t\n\t    \t\t\tvertexColors: material.vertexColors,\n\t\n\t    \t\t\tfog: !! fog,\n\t    \t\t\tuseFog: material.fog,\n\t    \t\t\tfogExp: (fog && fog.isFogExp2),\n\t\n\t    \t\t\tflatShading: material.shading === FlatShading,\n\t\n\t    \t\t\tsizeAttenuation: material.sizeAttenuation,\n\t    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t    \t\t\tskinning: material.skinning,\n\t    \t\t\tmaxBones: maxBones,\n\t    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t    \t\t\tmorphTargets: material.morphTargets,\n\t    \t\t\tmorphNormals: material.morphNormals,\n\t    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t    \t\t\tnumDirLights: lights.directional.length,\n\t    \t\t\tnumPointLights: lights.point.length,\n\t    \t\t\tnumSpotLights: lights.spot.length,\n\t    \t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t    \t\t\tnumClippingPlanes: nClipPlanes,\n\t\n\t    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t    \t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t    \t\t\ttoneMapping: renderer.toneMapping,\n\t    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t    \t\t\talphaTest: material.alphaTest,\n\t    \t\t\tdoubleSided: material.side === DoubleSide,\n\t    \t\t\tflipSided: material.side === BackSide,\n\t\n\t    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t    \t\t};\n\t\n\t    \t\treturn parameters;\n\t\n\t    \t};\n\t\n\t    \tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\tarray.push( parameters.shaderID );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray.push( material.fragmentShader );\n\t    \t\t\tarray.push( material.vertexShader );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.defines !== undefined ) {\n\t\n\t    \t\t\tfor ( var name in material.defines ) {\n\t\n\t    \t\t\t\tarray.push( name );\n\t    \t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.join();\n\t\n\t    \t};\n\t\n\t    \tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t    \t\tvar program;\n\t\n\t    \t\t// Check if code has been already compiled\n\t    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tvar programInfo = programs[ p ];\n\t\n\t    \t\t\tif ( programInfo.code === code ) {\n\t\n\t    \t\t\t\tprogram = programInfo;\n\t    \t\t\t\t++ program.usedTimes;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t    \t\t\tprograms.push( program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t};\n\t\n\t    \tthis.releaseProgram = function( program ) {\n\t\n\t    \t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t    \t\t\t// Remove from unordered set\n\t    \t\t\tvar i = programs.indexOf( program );\n\t    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t    \t\t\tprograms.pop();\n\t\n\t    \t\t\t// Free WebGL resources\n\t    \t\t\tprogram.destroy();\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Exposed for resource monitoring & error feedback via renderer.info:\n\t    \tthis.programs = programs;\n\t\n\t    }\n\t\n\t    function WebGLGeometries( gl, properties, info ) {\n\t\n\t    \tvar geometries = {};\n\t\n\t    \tfunction onGeometryDispose( event ) {\n\t\n\t    \t\tvar geometry = event.target;\n\t    \t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t    \t\tif ( buffergeometry.index !== null ) {\n\t\n\t    \t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t    \t\t}\n\t\n\t    \t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\tdelete geometries[ geometry.id ];\n\t\n\t    \t\t// TODO\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( property.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( geometry );\n\t\n\t    \t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t    \t\tif ( bufferproperty.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( buffergeometry );\n\t\n\t    \t\t//\n\t\n\t    \t\tinfo.memory.geometries --;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttribute( attribute ) {\n\t\n\t    \t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t    \t\tif ( buffer !== undefined ) {\n\t\n\t    \t\t\tgl.deleteBuffer( buffer );\n\t    \t\t\tremoveAttributeBuffer( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttributes( attributes ) {\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction removeAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\tproperties.delete( attribute.data );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tproperties.delete( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn geometries[ geometry.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\t\tvar buffergeometry;\n\t\n\t    \t\t\tif ( geometry.isBufferGeometry ) {\n\t\n\t    \t\t\t\tbuffergeometry = geometry;\n\t\n\t    \t\t\t} else if ( geometry.isGeometry ) {\n\t\n\t    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t    \t\t\tinfo.memory.geometries ++;\n\t\n\t    \t\t\treturn buffergeometry;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLObjects( gl, properties, info ) {\n\t\n\t    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\t\n\t    \t//\n\t\n\t    \tfunction update( object ) {\n\t\n\t    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t    \t\tvar geometry = geometries.get( object );\n\t\n\t    \t\tif ( object.geometry.isGeometry ) {\n\t\n\t    \t\t\tgeometry.updateFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\tfor ( var name in morphAttributes ) {\n\t\n\t    \t\t\tvar array = morphAttributes[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    \tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t    \t\tvar attributeProperties = properties.get( data );\n\t\n\t    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t    \t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\t\n\t    \t\t\t// Not using update ranges\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t    \t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t    \t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t    \t\t}\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction getWireframeAttribute( geometry ) {\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe !== undefined ) {\n\t\n\t    \t\t\treturn property.wireframe;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar indices = [];\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t    \t\tvar position = attributes.position;\n\t\n\t    \t\t// console.time( 'wireframe' );\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar edges = {};\n\t    \t\t\tvar array = index.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = array[ i + 0 ];\n\t    \t\t\t\tvar b = array[ i + 1 ];\n\t    \t\t\t\tvar c = array[ i + 2 ];\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar array = attributes.position.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = i + 0;\n\t    \t\t\t\tvar b = i + 1;\n\t    \t\t\t\tvar c = i + 2;\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// console.timeEnd( 'wireframe' );\n\t\n\t    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\tproperty.wireframe = attribute;\n\t\n\t    \t\treturn attribute;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tgetAttributeBuffer: getAttributeBuffer,\n\t    \t\tgetWireframeAttribute: getWireframeAttribute,\n\t\n\t    \t\tupdate: update\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t    \tvar _infoMemory = info.memory;\n\t    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t    \t//\n\t\n\t    \tfunction clampToMaxSize( image, maxSize ) {\n\t\n\t    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t    \t\t\t// premultiplied alpha.\n\t\n\t    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = Math.floor( image.width * scale );\n\t    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction isPowerOfTwo( image ) {\n\t\n\t    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\t\n\t    \t}\n\t\n\t    \tfunction makePowerOfTwo( image ) {\n\t\n\t    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n\t    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\t\n\t    \t\treturn false;\n\t\n\t    \t}\n\t\n\t    \t// Fallback filters for non-power-of-2 textures\n\t\n\t    \tfunction filterFallback( f ) {\n\t\n\t    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\t\n\t    \t\t\treturn _gl.NEAREST;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn _gl.LINEAR;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction onTextureDispose( event ) {\n\t\n\t    \t\tvar texture = event.target;\n\t\n\t    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\tdeallocateTexture( texture );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t\n\t    \t}\n\t\n\t    \tfunction onRenderTargetDispose( event ) {\n\t\n\t    \t\tvar renderTarget = event.target;\n\t\n\t    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\tdeallocateRenderTarget( renderTarget );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction deallocateTexture( texture ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t// cube texture\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// 2D texture\n\t\n\t    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove all webgl properties\n\t    \t\tproperties.delete( texture );\n\t\n\t    \t}\n\t\n\t    \tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\tif ( ! renderTarget ) return;\n\t\n\t    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\trenderTarget.depthTexture.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( renderTarget.texture );\n\t    \t\tproperties.delete( renderTarget );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t\n\t\n\t    \tfunction setTexture2D( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\tvar image = texture.image;\n\t\n\t    \t\t\tif ( image === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t    \t\t\t} else if ( image.complete === false ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCube( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image.length === 6 ) {\n\t\n\t    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t    \t\t\t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\t\n\t    \t\t\t\tvar cubeImage = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar image = cubeImage[ 0 ],\n\t    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t    \t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCubeDynamic( texture, slot ) {\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( isPowerOfTwoImage ) {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension ) {\n\t\n\t    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t    \t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t    \t\t\ttextureProperties.__webglInit = true;\n\t\n\t    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t    \t\t\timage = makePowerOfTwo( image );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t    \t\tif ( (texture && texture.isDepthTexture) ) {\n\t\n\t    \t\t\t// populate depth texture with dummy data\n\t\n\t    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t    \t\t\tif ( texture.type === FloatType ) {\n\t\n\t    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t    \t\t\t} else if ( _isWebGL2 ) {\n\t\n\t    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// regular Texture (image, video, canvas)\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t    \t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t}\n\t\n\t    \t// Render targets\n\t\n\t    \t// Setup storage for target texture and bind it to correct framebuffer\n\t    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// FIXME: We don't support !depth !stencil\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\t\n\t    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t    \t\t}\n\t\n\t    \t\t// upload an empty depth texture with framebuffer size\n\t    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t    \t\t}\n\t\n\t    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\n\t    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthrow new Error('Unknown depthTexture format')\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Setup GL resources for a non-texture depth buffer\n\t    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Set up GL resources for the render target\n\t    \tfunction setupRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t_infoMemory.textures ++;\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t    \t\t// Setup framebuffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup color buffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup depth and stencil buffers\n\t\n\t    \t\tif ( renderTarget.depthBuffer ) {\n\t\n\t    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t    \t\tvar texture = renderTarget.texture;\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t    \t\t\t\ttexture.minFilter !== NearestFilter &&\n\t    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t    \t\t\tstate.bindTexture( target, webglTexture );\n\t    \t\t\t_gl.generateMipmap( target );\n\t    \t\t\tstate.bindTexture( target, null );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setTexture2D = setTexture2D;\n\t    \tthis.setTextureCube = setTextureCube;\n\t    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t    \tthis.setupRenderTarget = setupRenderTarget;\n\t    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author fordacious / fordacious.github.io\n\t     */\n\t\n\t    function WebGLProperties() {\n\t\n\t    \tvar properties = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar uuid = object.uuid;\n\t    \t\t\tvar map = properties[ uuid ];\n\t\n\t    \t\t\tif ( map === undefined ) {\n\t\n\t    \t\t\t\tmap = {};\n\t    \t\t\t\tproperties[ uuid ] = map;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn map;\n\t\n\t    \t\t},\n\t\n\t    \t\tdelete: function ( object ) {\n\t\n\t    \t\t\tdelete properties[ object.uuid ];\n\t\n\t    \t\t},\n\t\n\t    \t\tclear: function () {\n\t\n\t    \t\t\tproperties = {};\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLState( gl, extensions, paramThreeToGL ) {\n\t\n\t    \tfunction ColorBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar color = new Vector4();\n\t    \t\tvar currentColorMask = null;\n\t    \t\tvar currentColorClear = new Vector4();\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetMask: function ( colorMask ) {\n\t\n\t    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t    \t\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( r, g, b, a ) {\n\t\n\t    \t\t\t\tcolor.set( r, g, b, a );\n\t\n\t    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t    \t\t\t\t\tgl.clearColor( r, g, b, a );\n\t    \t\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentColorMask = null;\n\t    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction DepthBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentDepthMask = null;\n\t    \t\tvar currentDepthFunc = null;\n\t    \t\tvar currentDepthClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( depthTest ) {\n\t\n\t    \t\t\t\tif ( depthTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( depthMask ) {\n\t\n\t    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.depthMask( depthMask );\n\t    \t\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( depthFunc ) {\n\t\n\t    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t    \t\t\t\t\tif ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\t\tcase NeverDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase AlwaysDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase EqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase NotEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( depth ) {\n\t\n\t    \t\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t    \t\t\t\t\tgl.clearDepth( depth );\n\t    \t\t\t\t\tcurrentDepthClear = depth;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentDepthMask = null;\n\t    \t\t\t\tcurrentDepthFunc = null;\n\t    \t\t\t\tcurrentDepthClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction StencilBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentStencilMask = null;\n\t    \t\tvar currentStencilFunc = null;\n\t    \t\tvar currentStencilRef = null;\n\t    \t\tvar currentStencilFuncMask = null;\n\t    \t\tvar currentStencilFail  = null;\n\t    \t\tvar currentStencilZFail = null;\n\t    \t\tvar currentStencilZPass = null;\n\t    \t\tvar currentStencilClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( stencilTest ) {\n\t\n\t    \t\t\t\tif ( stencilTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.stencilMask( stencilMask );\n\t    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( stencil ) {\n\t\n\t    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t    \t\t\t\t\tgl.clearStencil( stencil );\n\t    \t\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentStencilMask = null;\n\t    \t\t\t\tcurrentStencilFunc = null;\n\t    \t\t\t\tcurrentStencilRef = null;\n\t    \t\t\t\tcurrentStencilFuncMask = null;\n\t    \t\t\t\tcurrentStencilFail = null;\n\t    \t\t\t\tcurrentStencilZFail = null;\n\t    \t\t\t\tcurrentStencilZPass = null;\n\t    \t\t\t\tcurrentStencilClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar colorBuffer = new ColorBuffer();\n\t    \tvar depthBuffer = new DepthBuffer();\n\t    \tvar stencilBuffer = new StencilBuffer();\n\t\n\t    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t    \tvar capabilities = {};\n\t\n\t    \tvar compressedTextureFormats = null;\n\t\n\t    \tvar currentBlending = null;\n\t    \tvar currentBlendEquation = null;\n\t    \tvar currentBlendSrc = null;\n\t    \tvar currentBlendDst = null;\n\t    \tvar currentBlendEquationAlpha = null;\n\t    \tvar currentBlendSrcAlpha = null;\n\t    \tvar currentBlendDstAlpha = null;\n\t    \tvar currentPremultipledAlpha = false;\n\t\n\t    \tvar currentFlipSided = null;\n\t    \tvar currentCullFace = null;\n\t\n\t    \tvar currentLineWidth = null;\n\t\n\t    \tvar currentPolygonOffsetFactor = null;\n\t    \tvar currentPolygonOffsetUnits = null;\n\t\n\t    \tvar currentScissorTest = null;\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t    \tvar currentTextureSlot = null;\n\t    \tvar currentBoundTextures = {};\n\t\n\t    \tvar currentScissor = new Vector4();\n\t    \tvar currentViewport = new Vector4();\n\t\n\t    \tfunction createTexture( type, target, count ) {\n\t\n\t    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t    \t\tvar texture = gl.createTexture();\n\t\n\t    \t\tgl.bindTexture( type, texture );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t    \t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    \tvar emptyTextures = {};\n\t    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t    \t//\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tclearColor( 0, 0, 0, 1 );\n\t    \t\tclearDepth( 1 );\n\t    \t\tclearStencil( 0 );\n\t\n\t    \t\tenable( gl.DEPTH_TEST );\n\t    \t\tsetDepthFunc( LessEqualDepth );\n\t\n\t    \t\tsetFlipSided( false );\n\t    \t\tsetCullFace( CullFaceBack );\n\t    \t\tenable( gl.CULL_FACE );\n\t\n\t    \t\tenable( gl.BLEND );\n\t    \t\tsetBlending( NormalBlending );\n\t\n\t    \t}\n\t\n\t    \tfunction initAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tnewAttributes[ i ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttribute( attribute ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t    \t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disableUnusedAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== true ) {\n\t\n\t    \t\t\tgl.enable( id );\n\t    \t\t\tcapabilities[ id ] = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== false ) {\n\t\n\t    \t\t\tgl.disable( id );\n\t    \t\t\tcapabilities[ id ] = false;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getCompressedTextureFormats() {\n\t\n\t    \t\tif ( compressedTextureFormats === null ) {\n\t\n\t    \t\t\tcompressedTextureFormats = [];\n\t\n\t    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn compressedTextureFormats;\n\t\n\t    \t}\n\t\n\t    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t    \t\tif ( blending !== NoBlending ) {\n\t\n\t    \t\t\tenable( gl.BLEND );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.BLEND );\n\t    \t\t\tcurrentBlending = blending; // no blending, that is\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t    \t\t\tif ( blending === AdditiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === MultiplyBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentBlending = blending;\n\t    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending === CustomBlending ) {\n\t\n\t    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendEquation = blendEquation;\n\t    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendSrc = blendSrc;\n\t    \t\t\t\tcurrentBlendDst = blendDst;\n\t    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcurrentBlendEquation = null;\n\t    \t\t\tcurrentBlendSrc = null;\n\t    \t\t\tcurrentBlendDst = null;\n\t    \t\t\tcurrentBlendEquationAlpha = null;\n\t    \t\t\tcurrentBlendSrcAlpha = null;\n\t    \t\t\tcurrentBlendDstAlpha = null;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction setColorWrite( colorWrite ) {\n\t\n\t    \t\tcolorBuffer.setMask( colorWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthTest( depthTest ) {\n\t\n\t    \t\tdepthBuffer.setTest( depthTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthWrite( depthWrite ) {\n\t\n\t    \t\tdepthBuffer.setMask( depthWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthFunc( depthFunc ) {\n\t\n\t    \t\tdepthBuffer.setFunc( depthFunc );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilTest( stencilTest ) {\n\t\n\t    \t\tstencilBuffer.setTest( stencilTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilWrite( stencilWrite ) {\n\t\n\t    \t\tstencilBuffer.setMask( stencilWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction setFlipSided( flipSided ) {\n\t\n\t    \t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t    \t\t\tif ( flipSided ) {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CW );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentFlipSided = flipSided;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setCullFace( cullFace ) {\n\t\n\t    \t\tif ( cullFace !== CullFaceNone ) {\n\t\n\t    \t\t\tenable( gl.CULL_FACE );\n\t\n\t    \t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.CULL_FACE );\n\t\n\t    \t\t}\n\t\n\t    \t\tcurrentCullFace = cullFace;\n\t\n\t    \t}\n\t\n\t    \tfunction setLineWidth( width ) {\n\t\n\t    \t\tif ( width !== currentLineWidth ) {\n\t\n\t    \t\t\tgl.lineWidth( width );\n\t\n\t    \t\t\tcurrentLineWidth = width;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\t\n\t    \t\tif ( polygonOffset ) {\n\t\n\t    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t    \t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getScissorTest() {\n\t\n\t    \t\treturn currentScissorTest;\n\t\n\t    \t}\n\t\n\t    \tfunction setScissorTest( scissorTest ) {\n\t\n\t    \t\tcurrentScissorTest = scissorTest;\n\t\n\t    \t\tif ( scissorTest ) {\n\t\n\t    \t\t\tenable( gl.SCISSOR_TEST );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.SCISSOR_TEST );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// texture\n\t\n\t    \tfunction activeTexture( webglSlot ) {\n\t\n\t    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t    \t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t    \t\t\tgl.activeTexture( webglSlot );\n\t    \t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction bindTexture( webglType, webglTexture ) {\n\t\n\t    \t\tif ( currentTextureSlot === null ) {\n\t\n\t    \t\t\tactiveTexture();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t    \t\tif ( boundTexture === undefined ) {\n\t\n\t    \t\t\tboundTexture = { type: undefined, texture: undefined };\n\t    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t    \t\t\tboundTexture.type = webglType;\n\t    \t\t\tboundTexture.texture = webglTexture;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction compressedTexImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction texImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction clearColor( r, g, b, a ) {\n\t\n\t    \t\tcolorBuffer.setClear( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction clearDepth( depth ) {\n\t\n\t    \t\tdepthBuffer.setClear( depth );\n\t\n\t    \t}\n\t\n\t    \tfunction clearStencil( stencil ) {\n\t\n\t    \t\tstencilBuffer.setClear( stencil );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction scissor( scissor ) {\n\t\n\t    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t    \t\t\tcurrentScissor.copy( scissor );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction viewport( viewport ) {\n\t\n\t    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t    \t\t\tcurrentViewport.copy( viewport );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction reset() {\n\t\n\t    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tcapabilities = {};\n\t\n\t    \t\tcompressedTextureFormats = null;\n\t\n\t    \t\tcurrentTextureSlot = null;\n\t    \t\tcurrentBoundTextures = {};\n\t\n\t    \t\tcurrentBlending = null;\n\t\n\t    \t\tcurrentFlipSided = null;\n\t    \t\tcurrentCullFace = null;\n\t\n\t    \t\tcolorBuffer.reset();\n\t    \t\tdepthBuffer.reset();\n\t    \t\tstencilBuffer.reset();\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tbuffers: {\n\t    \t\t\tcolor: colorBuffer,\n\t    \t\t\tdepth: depthBuffer,\n\t    \t\t\tstencil: stencilBuffer\n\t    \t\t},\n\t\n\t    \t\tinit: init,\n\t    \t\tinitAttributes: initAttributes,\n\t    \t\tenableAttribute: enableAttribute,\n\t    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t    \t\tenable: enable,\n\t    \t\tdisable: disable,\n\t    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\t\n\t    \t\tsetBlending: setBlending,\n\t\n\t    \t\tsetColorWrite: setColorWrite,\n\t    \t\tsetDepthTest: setDepthTest,\n\t    \t\tsetDepthWrite: setDepthWrite,\n\t    \t\tsetDepthFunc: setDepthFunc,\n\t    \t\tsetStencilTest: setStencilTest,\n\t    \t\tsetStencilWrite: setStencilWrite,\n\t    \t\tsetStencilFunc: setStencilFunc,\n\t    \t\tsetStencilOp: setStencilOp,\n\t\n\t    \t\tsetFlipSided: setFlipSided,\n\t    \t\tsetCullFace: setCullFace,\n\t\n\t    \t\tsetLineWidth: setLineWidth,\n\t    \t\tsetPolygonOffset: setPolygonOffset,\n\t\n\t    \t\tgetScissorTest: getScissorTest,\n\t    \t\tsetScissorTest: setScissorTest,\n\t\n\t    \t\tactiveTexture: activeTexture,\n\t    \t\tbindTexture: bindTexture,\n\t    \t\tcompressedTexImage2D: compressedTexImage2D,\n\t    \t\ttexImage2D: texImage2D,\n\t\n\t    \t\tclearColor: clearColor,\n\t    \t\tclearDepth: clearDepth,\n\t    \t\tclearStencil: clearStencil,\n\t\n\t    \t\tscissor: scissor,\n\t    \t\tviewport: viewport,\n\t\n\t    \t\treset: reset\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLCapabilities( gl, extensions, parameters ) {\n\t\n\t    \tvar maxAnisotropy;\n\t\n\t    \tfunction getMaxAnisotropy() {\n\t\n\t    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmaxAnisotropy = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn maxAnisotropy;\n\t\n\t    \t}\n\t\n\t    \tfunction getMaxPrecision( precision ) {\n\t\n\t    \t\tif ( precision === 'highp' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'highp';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprecision = 'mediump';\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( precision === 'mediump' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'mediump';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 'lowp';\n\t\n\t    \t}\n\t\n\t    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t    \tvar maxPrecision = getMaxPrecision( precision );\n\t\n\t    \tif ( maxPrecision !== precision ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t    \t\tprecision = maxPrecision;\n\t\n\t    \t}\n\t\n\t    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t    \tvar vertexTextures = maxVertexTextures > 0;\n\t    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\n\t    \treturn {\n\t\n\t    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t    \t\tgetMaxPrecision: getMaxPrecision,\n\t\n\t    \t\tprecision: precision,\n\t    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\n\t    \t\tmaxTextures: maxTextures,\n\t    \t\tmaxVertexTextures: maxVertexTextures,\n\t    \t\tmaxTextureSize: maxTextureSize,\n\t    \t\tmaxCubemapSize: maxCubemapSize,\n\t\n\t    \t\tmaxAttributes: maxAttributes,\n\t    \t\tmaxVertexUniforms: maxVertexUniforms,\n\t    \t\tmaxVaryings: maxVaryings,\n\t    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\n\t    \t\tvertexTextures: vertexTextures,\n\t    \t\tfloatFragmentTextures: floatFragmentTextures,\n\t    \t\tfloatVertexTextures: floatVertexTextures\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLExtensions( gl ) {\n\t\n\t    \tvar extensions = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( name ) {\n\t\n\t    \t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t    \t\t\t\treturn extensions[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar extension;\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'WEBGL_depth_texture':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t    \t\t\t\t\textension = gl.getExtension( name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\textensions[ name ] = extension;\n\t\n\t    \t\t\treturn extension;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLClipping() {\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\tglobalState = null,\n\t    \t\tnumGlobalPlanes = 0,\n\t    \t\tlocalClippingEnabled = false,\n\t    \t\trenderingShadows = false,\n\t\n\t    \t\tplane = new Plane(),\n\t    \t\tviewNormalMatrix = new Matrix3(),\n\t\n\t    \t\tuniform = { value: null, needsUpdate: false };\n\t\n\t    \tthis.uniform = uniform;\n\t    \tthis.numPlanes = 0;\n\t\n\t    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t    \t\tvar enabled =\n\t    \t\t\tplanes.length !== 0 ||\n\t    \t\t\tenableLocalClipping ||\n\t    \t\t\t// enable state of previous frame - the clipping code has to\n\t    \t\t\t// run another frame in order to reset the state:\n\t    \t\t\tnumGlobalPlanes !== 0 ||\n\t    \t\t\tlocalClippingEnabled;\n\t\n\t    \t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t    \t\tglobalState = projectPlanes( planes, camera, 0 );\n\t    \t\tnumGlobalPlanes = planes.length;\n\t\n\t    \t\treturn enabled;\n\t\n\t    \t};\n\t\n\t    \tthis.beginShadows = function() {\n\t\n\t    \t\trenderingShadows = true;\n\t    \t\tprojectPlanes( null );\n\t\n\t    \t};\n\t\n\t    \tthis.endShadows = function() {\n\t\n\t    \t\trenderingShadows = false;\n\t    \t\tresetGlobalState();\n\t\n\t    \t};\n\t\n\t    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\t\n\t    \t\tif ( ! localClippingEnabled ||\n\t    \t\t\t\tplanes === null || planes.length === 0 ||\n\t    \t\t\t\trenderingShadows && ! clipShadows ) {\n\t    \t\t\t// there's no local clipping\n\t\n\t    \t\t\tif ( renderingShadows ) {\n\t    \t\t\t\t// there's no global clipping\n\t\n\t    \t\t\t\tprojectPlanes( null );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tresetGlobalState();\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t    \t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t    \t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t    \t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcache.clippingState = dstArray;\n\t    \t\t\tthis.numPlanes += nGlobal;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t};\n\t\n\t    \tfunction resetGlobalState() {\n\t\n\t    \t\tif ( uniform.value !== globalState ) {\n\t\n\t    \t\t\tuniform.value = globalState;\n\t    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = numGlobalPlanes;\n\t\n\t    \t}\n\t\n\t    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t    \t\t\tdstArray = null;\n\t\n\t    \t\tif ( nPlanes !== 0 ) {\n\t\n\t    \t\t\tdstArray = uniform.value;\n\t\n\t    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t    \t\t\t\t\tplane.copy( planes[ i ] ).\n\t    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuniform.value = dstArray;\n\t    \t\t\tuniform.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = nPlanes;\n\t    \t\treturn dstArray;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author tschw\n\t     */\n\t\n\t    function WebGLRenderer( parameters ) {\n\t\n\t    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t    \t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t    \tvar lights = [];\n\t\n\t    \tvar opaqueObjects = [];\n\t    \tvar opaqueObjectsLastIndex = - 1;\n\t    \tvar transparentObjects = [];\n\t    \tvar transparentObjectsLastIndex = - 1;\n\t\n\t    \tvar morphInfluences = new Float32Array( 8 );\n\t\n\t    \tvar sprites = [];\n\t    \tvar lensFlares = [];\n\t\n\t    \t// public properties\n\t\n\t    \tthis.domElement = _canvas;\n\t    \tthis.context = null;\n\t\n\t    \t// clearing\n\t\n\t    \tthis.autoClear = true;\n\t    \tthis.autoClearColor = true;\n\t    \tthis.autoClearDepth = true;\n\t    \tthis.autoClearStencil = true;\n\t\n\t    \t// scene graph\n\t\n\t    \tthis.sortObjects = true;\n\t\n\t    \t// user-defined clipping\n\t\n\t    \tthis.clippingPlanes = [];\n\t    \tthis.localClippingEnabled = false;\n\t\n\t    \t// physically based shading\n\t\n\t    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t    \tthis.gammaInput = false;\n\t    \tthis.gammaOutput = false;\n\t\n\t    \t// physical lights\n\t\n\t    \tthis.physicallyCorrectLights = false;\n\t\n\t    \t// tone mapping\n\t\n\t    \tthis.toneMapping = LinearToneMapping;\n\t    \tthis.toneMappingExposure = 1.0;\n\t    \tthis.toneMappingWhitePoint = 1.0;\n\t\n\t    \t// morphs\n\t\n\t    \tthis.maxMorphTargets = 8;\n\t    \tthis.maxMorphNormals = 4;\n\t\n\t    \t// internal properties\n\t\n\t    \tvar _this = this,\n\t\n\t    \t// internal state cache\n\t\n\t    \t_currentProgram = null,\n\t    \t_currentRenderTarget = null,\n\t    \t_currentFramebuffer = null,\n\t    \t_currentMaterialId = - 1,\n\t    \t_currentGeometryProgram = '',\n\t    \t_currentCamera = null,\n\t\n\t    \t_currentScissor = new Vector4(),\n\t    \t_currentScissorTest = null,\n\t\n\t    \t_currentViewport = new Vector4(),\n\t\n\t    \t//\n\t\n\t    \t_usedTextureUnits = 0,\n\t\n\t    \t//\n\t\n\t    \t_clearColor = new Color( 0x000000 ),\n\t    \t_clearAlpha = 0,\n\t\n\t    \t_width = _canvas.width,\n\t    \t_height = _canvas.height,\n\t\n\t    \t_pixelRatio = 1,\n\t\n\t    \t_scissor = new Vector4( 0, 0, _width, _height ),\n\t    \t_scissorTest = false,\n\t\n\t    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\n\t    \t// frustum\n\t\n\t    \t_frustum = new Frustum(),\n\t\n\t    \t// clipping\n\t\n\t    \t_clipping = new WebGLClipping(),\n\t    \t_clippingEnabled = false,\n\t    \t_localClippingEnabled = false,\n\t\n\t    \t_sphere = new Sphere(),\n\t\n\t    \t// camera matrices cache\n\t\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_vector3 = new Vector3(),\n\t\n\t    \t// light arrays cache\n\t\n\t    \t_lights = {\n\t\n\t    \t\thash: '',\n\t\n\t    \t\tambient: [ 0, 0, 0 ],\n\t    \t\tdirectional: [],\n\t    \t\tdirectionalShadowMap: [],\n\t    \t\tdirectionalShadowMatrix: [],\n\t    \t\tspot: [],\n\t    \t\tspotShadowMap: [],\n\t    \t\tspotShadowMatrix: [],\n\t    \t\tpoint: [],\n\t    \t\tpointShadowMap: [],\n\t    \t\tpointShadowMatrix: [],\n\t    \t\themi: [],\n\t\n\t    \t\tshadows: []\n\t\n\t    \t},\n\t\n\t    \t// info\n\t\n\t    \t_infoRender = {\n\t\n\t    \t\tcalls: 0,\n\t    \t\tvertices: 0,\n\t    \t\tfaces: 0,\n\t    \t\tpoints: 0\n\t\n\t    \t};\n\t\n\t    \tthis.info = {\n\t\n\t    \t\trender: _infoRender,\n\t    \t\tmemory: {\n\t\n\t    \t\t\tgeometries: 0,\n\t    \t\t\ttextures: 0\n\t\n\t    \t\t},\n\t    \t\tprograms: null\n\t\n\t    \t};\n\t\n\t\n\t    \t// initialize\n\t\n\t    \tvar _gl;\n\t\n\t    \ttry {\n\t\n\t    \t\tvar attributes = {\n\t    \t\t\talpha: _alpha,\n\t    \t\t\tdepth: _depth,\n\t    \t\t\tstencil: _stencil,\n\t    \t\t\tantialias: _antialias,\n\t    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t    \t\t};\n\t\n\t    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t    \t\tif ( _gl === null ) {\n\t\n\t    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t} catch ( error ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t    \t}\n\t\n\t    \tvar extensions = new WebGLExtensions( _gl );\n\t\n\t    \textensions.get( 'WEBGL_depth_texture' );\n\t    \textensions.get( 'OES_texture_float' );\n\t    \textensions.get( 'OES_texture_float_linear' );\n\t    \textensions.get( 'OES_texture_half_float' );\n\t    \textensions.get( 'OES_texture_half_float_linear' );\n\t    \textensions.get( 'OES_standard_derivatives' );\n\t    \textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\tBufferGeometry.MaxIndex = 4294967296;\n\t\n\t    \t}\n\t\n\t    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t    \tvar properties = new WebGLProperties();\n\t    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t    \tvar programCache = new WebGLPrograms( this, capabilities );\n\t    \tvar lightCache = new WebGLLights();\n\t\n\t    \tthis.info.programs = programCache.programs;\n\t\n\t    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t    \t//\n\t\n\t    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t    \tvar backgroundCamera2 = new PerspectiveCamera();\n\t    \tvar backgroundPlaneMesh = new Mesh(\n\t    \t\tnew PlaneBufferGeometry( 2, 2 ),\n\t    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t    \t);\n\t    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t    \tvar backgroundBoxMesh = new Mesh(\n\t    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t    \t\tnew ShaderMaterial( {\n\t    \t\t\tuniforms: backgroundBoxShader.uniforms,\n\t    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t    \t\t\tside: BackSide,\n\t    \t\t\tdepthTest: false,\n\t    \t\t\tdepthWrite: false,\n\t    \t\t\tfog: false\n\t    \t\t} )\n\t    \t);\n\t\n\t    \t//\n\t\n\t    \tfunction getTargetPixelRatio() {\n\t\n\t    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t    \t}\n\t\n\t    \tfunction glClearColor( r, g, b, a ) {\n\t\n\t    \t\tif ( _premultipliedAlpha === true ) {\n\t\n\t    \t\t\tr *= a; g *= a; b *= a;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.clearColor( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction setDefaultGLState() {\n\t\n\t    \t\tstate.init();\n\t\n\t    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t}\n\t\n\t    \tfunction resetGLState() {\n\t\n\t    \t\t_currentProgram = null;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t\n\t    \t\tstate.reset();\n\t\n\t    \t}\n\t\n\t    \tsetDefaultGLState();\n\t\n\t    \tthis.context = _gl;\n\t    \tthis.capabilities = capabilities;\n\t    \tthis.extensions = extensions;\n\t    \tthis.properties = properties;\n\t    \tthis.state = state;\n\t\n\t    \t// shadow map\n\t\n\t    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t    \tthis.shadowMap = shadowMap;\n\t\n\t\n\t    \t// Plugins\n\t\n\t    \tvar spritePlugin = new SpritePlugin( this, sprites );\n\t    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\t\n\t    \t// API\n\t\n\t    \tthis.getContext = function () {\n\t\n\t    \t\treturn _gl;\n\t\n\t    \t};\n\t\n\t    \tthis.getContextAttributes = function () {\n\t\n\t    \t\treturn _gl.getContextAttributes();\n\t\n\t    \t};\n\t\n\t    \tthis.forceContextLoss = function () {\n\t\n\t    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t    \t};\n\t\n\t    \tthis.getMaxAnisotropy = function () {\n\t\n\t    \t\treturn capabilities.getMaxAnisotropy();\n\t\n\t    \t};\n\t\n\t    \tthis.getPrecision = function () {\n\t\n\t    \t\treturn capabilities.precision;\n\t\n\t    \t};\n\t\n\t    \tthis.getPixelRatio = function () {\n\t\n\t    \t\treturn _pixelRatio;\n\t\n\t    \t};\n\t\n\t    \tthis.setPixelRatio = function ( value ) {\n\t\n\t    \t\tif ( value === undefined ) return;\n\t\n\t    \t\t_pixelRatio = value;\n\t\n\t    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t    \t};\n\t\n\t    \tthis.getSize = function () {\n\t\n\t    \t\treturn {\n\t    \t\t\twidth: _width,\n\t    \t\t\theight: _height\n\t    \t\t};\n\t\n\t    \t};\n\t\n\t    \tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t    \t\t_width = width;\n\t    \t\t_height = height;\n\t\n\t    \t\t_canvas.width = width * _pixelRatio;\n\t    \t\t_canvas.height = height * _pixelRatio;\n\t\n\t    \t\tif ( updateStyle !== false ) {\n\t\n\t    \t\t\t_canvas.style.width = width + 'px';\n\t    \t\t\t_canvas.style.height = height + 'px';\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setViewport( 0, 0, width, height );\n\t\n\t    \t};\n\t\n\t    \tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissorTest = function ( boolean ) {\n\t\n\t    \t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t    \t};\n\t\n\t    \t// Clearing\n\t\n\t    \tthis.getClearColor = function () {\n\t\n\t    \t\treturn _clearColor;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearColor = function ( color, alpha ) {\n\t\n\t    \t\t_clearColor.set( color );\n\t\n\t    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.getClearAlpha = function () {\n\t\n\t    \t\treturn _clearAlpha;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearAlpha = function ( alpha ) {\n\t\n\t    \t\t_clearAlpha = alpha;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.clear = function ( color, depth, stencil ) {\n\t\n\t    \t\tvar bits = 0;\n\t\n\t    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t    \t\t_gl.clear( bits );\n\t\n\t    \t};\n\t\n\t    \tthis.clearColor = function () {\n\t\n\t    \t\tthis.clear( true, false, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearDepth = function () {\n\t\n\t    \t\tthis.clear( false, true, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearStencil = function () {\n\t\n\t    \t\tthis.clear( false, false, true );\n\t\n\t    \t};\n\t\n\t    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t    \t\tthis.clear( color, depth, stencil );\n\t\n\t    \t};\n\t\n\t    \t// Reset\n\t\n\t    \tthis.resetGLState = resetGLState;\n\t\n\t    \tthis.dispose = function() {\n\t\n\t    \t\ttransparentObjects = [];\n\t    \t\ttransparentObjectsLastIndex = -1;\n\t    \t\topaqueObjects = [];\n\t    \t\topaqueObjectsLastIndex = -1;\n\t\n\t    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t};\n\t\n\t    \t// Events\n\t\n\t    \tfunction onContextLost( event ) {\n\t\n\t    \t\tevent.preventDefault();\n\t\n\t    \t\tresetGLState();\n\t    \t\tsetDefaultGLState();\n\t\n\t    \t\tproperties.clear();\n\t\n\t    \t}\n\t\n\t    \tfunction onMaterialDispose( event ) {\n\t\n\t    \t\tvar material = event.target;\n\t\n\t    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\tdeallocateMaterial( material );\n\t\n\t    \t}\n\t\n\t    \t// Buffer deallocation\n\t\n\t    \tfunction deallocateMaterial( material ) {\n\t\n\t    \t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\tproperties.delete( material );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction releaseMaterialProgramReference( material ) {\n\t\n\t    \t\tvar programInfo = properties.get( material ).program;\n\t\n\t    \t\tmaterial.program = undefined;\n\t\n\t    \t\tif ( programInfo !== undefined ) {\n\t\n\t    \t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Buffer rendering\n\t\n\t    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar buffers = properties.get( object );\n\t\n\t    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( object.hasPositions ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.position );\n\t    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasNormals ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t    \t\t\tif ( ! material.isMeshPhongMaterial &&\n\t    \t\t\t     ! material.isMeshStandardMaterial &&\n\t    \t\t\t       material.shading === FlatShading ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\tvar array = object.normalArray;\n\t\n\t    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t    \t\t\t\t\tarray[ i + 0 ] = nx;\n\t    \t\t\t\t\tarray[ i + 1 ] = ny;\n\t    \t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 3 ] = nx;\n\t    \t\t\t\t\tarray[ i + 4 ] = ny;\n\t    \t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 6 ] = nx;\n\t    \t\t\t\t\tarray[ i + 7 ] = ny;\n\t    \t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasUvs && material.map ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.color );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t    \t\tobject.count = 0;\n\t\n\t    \t};\n\t\n\t    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t    \t\tsetMaterial( material );\n\t\n\t    \t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\tvar updateBuffers = false;\n\t    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t    \t\t\t_currentGeometryProgram = geometryProgram;\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t    \t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t    \t\t\tvar activeInfluences = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t    \t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t    \t\t\t\tactiveInfluences.length = 8;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = activeInfluences[ i ];\n\t    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t    \t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprogram.getUniforms().setValue(\n\t    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar position = geometry.attributes.position;\n\t    \t\tvar rangeFactor = 1;\n\t\n\t    \t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\tindex = objects.getWireframeAttribute( geometry );\n\t    \t\t\trangeFactor = 2;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar renderer;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\trenderer = indexedBufferRenderer;\n\t    \t\t\trenderer.setIndex( index );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer = bufferRenderer;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( updateBuffers ) {\n\t\n\t    \t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t    \t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar dataCount = 0;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tdataCount = index.count;\n\t\n\t    \t\t} else if ( position !== undefined ) {\n\t\n\t    \t\t\tdataCount = position.count;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\n\t    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\n\t    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t    \t\tif ( drawCount === 0 ) return;\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( object.isMesh ) {\n\t\n\t    \t\t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tswitch ( object.drawMode ) {\n\t\n\t    \t\t\t\t\tcase TrianglesDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleStripDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleFanDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t} else if ( object.isLine ) {\n\t\n\t    \t\t\tvar lineWidth = material.linewidth;\n\t\n\t    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t    \t\t\tif ( object.isLineSegments ) {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( object.isPoints ) {\n\t\n\t    \t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer.render( drawStart, drawCount );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar geometryAttributes = geometry.attributes;\n\t\n\t    \t\tvar programAttributes = program.getAttributes();\n\t\n\t    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t    \t\tfor ( var name in programAttributes ) {\n\t\n\t    \t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t    \t\t\tif ( programAttribute >= 0 ) {\n\t\n\t    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t    \t\t\t\t\tvar type = _gl.FLOAT;\n\t    \t\t\t\t\tvar array = geometryAttribute.array;\n\t    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\tvar data = geometryAttribute.data;\n\t    \t\t\t\t\t\tvar stride = data.stride;\n\t    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t    \t\t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t    \t\t\t\t\t\t\tcase 2:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 3:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 4:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t}\n\t\n\t    \t// Sorting\n\t\n\t    \tfunction absNumericalSort( a, b ) {\n\t\n\t    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t    \t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t    \t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t    \t\t\treturn a.material.id - b.material.id;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn a.z - b.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction reversePainterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Rendering\n\t\n\t    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\t// reset caching for this frame\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t    \t\t// update camera matrices and frustum\n\t\n\t    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\tlights.length = 0;\n\t\n\t    \t\topaqueObjectsLastIndex = - 1;\n\t    \t\ttransparentObjectsLastIndex = - 1;\n\t\n\t    \t\tsprites.length = 0;\n\t    \t\tlensFlares.length = 0;\n\t\n\t    \t\t_localClippingEnabled = this.localClippingEnabled;\n\t    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t    \t\tprojectObject( scene, camera );\n\t\n\t    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t    \t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\topaqueObjects.sort( painterSortStable );\n\t    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t    \t\tsetupShadows( lights );\n\t\n\t    \t\tshadowMap.render( scene, camera );\n\t\n\t    \t\tsetupLights( lights, camera );\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t    \t\t//\n\t\n\t    \t\t_infoRender.calls = 0;\n\t    \t\t_infoRender.vertices = 0;\n\t    \t\t_infoRender.faces = 0;\n\t    \t\t_infoRender.points = 0;\n\t\n\t    \t\tif ( renderTarget === undefined ) {\n\t\n\t    \t\t\trenderTarget = null;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t\n\t    \t\t//\n\t\n\t    \t\tvar background = scene.background;\n\t\n\t    \t\tif ( background === null ) {\n\t\n\t    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t\t} else if ( background && background.isColor ) {\n\t\n\t    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t    \t\t\tforceClear = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClear || forceClear ) {\n\t\n\t    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( background && background.isCubeTexture ) {\n\t\n\t    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t    \t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t    \t\t} else if ( background && background.isTexture ) {\n\t\n\t    \t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t    \t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( scene.overrideMaterial ) {\n\t\n\t    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// opaque pass (front-to-back order)\n\t\n\t    \t\t\tstate.setBlending( NoBlending );\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\t\n\t    \t\t\t// transparent pass (back-to-front order)\n\t\n\t    \t\t\trenderObjects( transparentObjects, camera, fog );\n\t\n\t    \t\t}\n\t\n\t    \t\t// custom render plugins (post pass)\n\t\n\t    \t\tspritePlugin.render( scene, camera );\n\t    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t    \t\tstate.setDepthTest( true );\n\t    \t\tstate.setDepthWrite( true );\n\t    \t\tstate.setColorWrite( true );\n\t\n\t    \t\t// _gl.finish();\n\t\n\t    \t};\n\t\n\t    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t    \t\tvar array, index;\n\t\n\t    \t\t// allocate the next position in the appropriate array\n\t\n\t    \t\tif ( material.transparent ) {\n\t\n\t    \t\t\tarray = transparentObjects;\n\t    \t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray = opaqueObjects;\n\t    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\t// recycle existing render item or grow the array\n\t\n\t    \t\tvar renderItem = array[ index ];\n\t\n\t    \t\tif ( renderItem !== undefined ) {\n\t\n\t    \t\t\trenderItem.id = object.id;\n\t    \t\t\trenderItem.object = object;\n\t    \t\t\trenderItem.geometry = geometry;\n\t    \t\t\trenderItem.material = material;\n\t    \t\t\trenderItem.z = _vector3.z;\n\t    \t\t\trenderItem.group = group;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderItem = {\n\t    \t\t\t\tid: object.id,\n\t    \t\t\t\tobject: object,\n\t    \t\t\t\tgeometry: geometry,\n\t    \t\t\t\tmaterial: material,\n\t    \t\t\t\tz: _vector3.z,\n\t    \t\t\t\tgroup: group\n\t    \t\t\t};\n\t\n\t    \t\t\t// assert( index === array.length );\n\t    \t\t\tarray.push( renderItem );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Duplicated code (Frustum)\n\t\n\t    \tfunction isObjectViewable( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( geometry.boundingSphere === null )\n\t    \t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t_sphere.copy( geometry.boundingSphere ).\n\t    \t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSpriteViewable( sprite ) {\n\t\n\t    \t\t_sphere.center.set( 0, 0, 0 );\n\t    \t\t_sphere.radius = 0.7071067811865476;\n\t    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSphereViewable( sphere ) {\n\t\n\t    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t    \t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t    \t\tif ( numPlanes === 0 ) return true;\n\t\n\t    \t\tvar planes = _this.clippingPlanes,\n\t\n\t    \t\t\tcenter = sphere.center,\n\t    \t\t\tnegRad = - sphere.radius,\n\t    \t\t\ti = 0;\n\t\n\t    \t\tdo {\n\t\n\t    \t\t\t// out when deeper than radius in the negative halfspace\n\t    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t    \t\t} while ( ++ i !== numPlanes );\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible ) {\n\t\n\t    \t\t\tif ( object.isLight ) {\n\t\n\t    \t\t\t\tlights.push( object );\n\t\n\t    \t\t\t} else if ( object.isSprite ) {\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tsprites.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( object.isLensFlare ) {\n\t\n\t    \t\t\t\tlensFlares.push( object );\n\t\n\t    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\t\n\t    \t\t\t\tif ( object.isSkinnedMesh ) {\n\t\n\t    \t\t\t\t\tobject.skeleton.update();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\t\n\t    \t\t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\t\n\t    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar renderItem = renderList[ i ];\n\t\n\t    \t\t\tvar object = renderItem.object;\n\t    \t\t\tvar geometry = renderItem.geometry;\n\t    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t    \t\t\tvar group = renderItem.group;\n\t\n\t    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t    \t\t\tif ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tsetMaterial( material );\n\t\n\t    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\t\t\t_currentGeometryProgram = '';\n\t\n\t    \t\t\t\tobject.render( function ( object ) {\n\t\n\t    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\t\n\t    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction initMaterial( material, fog, object ) {\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tvar parameters = programCache.getParameters(\n\t    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\t\n\t    \t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t    \t\tvar program = materialProperties.program;\n\t    \t\tvar programChange = true;\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\t// new material\n\t    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\t} else if ( program.code !== code ) {\n\t\n\t    \t\t\t// changed glsl or parameters\n\t    \t\t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t    \t\t\t// same glsl and uniform list\n\t    \t\t\treturn;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// only rebuild uniform list\n\t    \t\t\tprogramChange = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( programChange ) {\n\t\n\t    \t\t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n\t    \t\t\t\t\tvertexShader: shader.vertexShader,\n\t    \t\t\t\t\tfragmentShader: shader.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: material.uniforms,\n\t    \t\t\t\t\tvertexShader: material.vertexShader,\n\t    \t\t\t\t\tfragmentShader: material.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t    \t\t\tmaterialProperties.program = program;\n\t    \t\t\tmaterial.program = program;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.morphNormals ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( ! material.isShaderMaterial &&\n\t    \t\t     ! material.isRawShaderMaterial ||\n\t    \t\t       material.clipping === true ) {\n\t\n\t    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterialProperties.fog = fog;\n\t\n\t    \t\t// store the light setup it was created for\n\t\n\t    \t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t    \t\tif ( material.lights ) {\n\t\n\t    \t\t\t// wire up the material to this renderer's lighting state\n\t\n\t    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t    \t\t\tuniforms.directionalLights.value = _lights.directional;\n\t    \t\t\tuniforms.spotLights.value = _lights.spot;\n\t    \t\t\tuniforms.pointLights.value = _lights.point;\n\t    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t    \t\t\tuniformsList =\n\t    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t    \t\tmaterialProperties.uniformsList = uniformsList;\n\t    \t\tmaterialProperties.dynamicUniforms =\n\t    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\t\n\t    \t}\n\t\n\t    \tfunction setMaterial( material ) {\n\t\n\t    \t\tmaterial.side === DoubleSide\n\t    \t\t\t? state.disable( _gl.CULL_FACE )\n\t    \t\t\t: state.enable( _gl.CULL_FACE );\n\t\n\t    \t\tstate.setFlipSided( material.side === BackSide );\n\t\n\t    \t\tmaterial.transparent === true\n\t    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t    \t\t\t: state.setBlending( NoBlending );\n\t\n\t    \t\tstate.setDepthFunc( material.depthFunc );\n\t    \t\tstate.setDepthTest( material.depthTest );\n\t    \t\tstate.setDepthWrite( material.depthWrite );\n\t    \t\tstate.setColorWrite( material.colorWrite );\n\t    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t    \t}\n\t\n\t    \tfunction setProgram( camera, fog, material, object ) {\n\t\n\t    \t\t_usedTextureUnits = 0;\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tif ( _clippingEnabled ) {\n\t\n\t    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t    \t\t\t\tvar useCache =\n\t    \t\t\t\t\t\tcamera === _currentCamera &&\n\t    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t    \t\t\t\t// we might want to call this function with some ClippingGroup\n\t    \t\t\t\t// object instead of the material, once it becomes feasible\n\t    \t\t\t\t// (#8465, #8379)\n\t    \t\t\t\t_clipping.setState(\n\t    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate === false ) {\n\t\n\t    \t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate ) {\n\t\n\t    \t\t\tinitMaterial( material, fog, object );\n\t    \t\t\tmaterial.needsUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar refreshProgram = false;\n\t    \t\tvar refreshMaterial = false;\n\t    \t\tvar refreshLights = false;\n\t\n\t    \t\tvar program = materialProperties.program,\n\t    \t\t\tp_uniforms = program.getUniforms(),\n\t    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( program.id !== _currentProgram ) {\n\t\n\t    \t\t\t_gl.useProgram( program.program );\n\t    \t\t\t_currentProgram = program.id;\n\t\n\t    \t\t\trefreshProgram = true;\n\t    \t\t\trefreshMaterial = true;\n\t    \t\t\trefreshLights = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t    \t\t\t_currentMaterialId = material.id;\n\t\n\t    \t\t\trefreshMaterial = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( camera !== _currentCamera ) {\n\t\n\t    \t\t\t\t_currentCamera = camera;\n\t\n\t    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t    \t\t\t\t// now, in case this material supports lights - or later, when\n\t    \t\t\t\t// the next material that does gets activated:\n\t\n\t    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// load material specific uniforms\n\t    \t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t    \t\t\tif ( material.isShaderMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.envMap ) {\n\t\n\t    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t    \t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t    \t\t\t\t\tuCamPos.setValue( _gl,\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isShaderMaterial ||\n\t    \t\t\t     material.skinning ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning uniforms must be set even if material didn't change\n\t    \t\t// auto-setting of texture unit for bone texture must go before other textures\n\t    \t\t// not sure why, but otherwise weird things happen\n\t\n\t    \t\tif ( material.skinning ) {\n\t\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t    \t\t\tvar skeleton = object.skeleton;\n\t\n\t    \t\t\tif ( skeleton ) {\n\t\n\t    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshMaterial ) {\n\t\n\t    \t\t\tif ( material.lights ) {\n\t\n\t    \t\t\t\t// the current material requires lighting info\n\t\n\t    \t\t\t\t// note: all lighting uniforms are always set correctly\n\t    \t\t\t\t// they simply reference the renderer's state for their\n\t    \t\t\t\t// values\n\t    \t\t\t\t//\n\t    \t\t\t\t// use the current material's .needsUpdate flags to set\n\t    \t\t\t\t// the GL state when required\n\t\n\t    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh uniforms common to several materials\n\t\n\t    \t\t\tif ( fog && material.fog ) {\n\t\n\t    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh single material specific uniforms\n\t\n\t    \t\t\tif ( material.isLineBasicMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isPointsMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\t\n\t    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tWebGLUniforms.upload(\n\t    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// common matrices\n\t\n\t    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\n\t    \t\t// dynamic uniforms\n\t\n\t    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\t\n\t    \t\tif ( dynUniforms !== null ) {\n\t\n\t    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n\t    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \t// Uniforms (refresh uniforms objects)\n\t\n\t    \tfunction refreshUniformsCommon( uniforms, material ) {\n\t\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t\n\t    \t\tif ( material.emissive ) {\n\t\n\t    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t    \t\tuniforms.specularMap.value = material.specularMap;\n\t    \t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t    \t\tif ( material.aoMap ) {\n\t\n\t    \t\t\tuniforms.aoMap.value = material.aoMap;\n\t    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\t// uv repeat and offset setting priorities\n\t    \t\t// 1. color map\n\t    \t\t// 2. specular map\n\t    \t\t// 3. normal map\n\t    \t\t// 4. bump map\n\t    \t\t// 5. alpha map\n\t    \t\t// 6. emissive map\n\t\n\t    \t\tvar uvScaleMap;\n\t\n\t    \t\tif ( material.map ) {\n\t\n\t    \t\t\tuvScaleMap = material.map;\n\t\n\t    \t\t} else if ( material.specularMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.specularMap;\n\t\n\t    \t\t} else if ( material.displacementMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.displacementMap;\n\t\n\t    \t\t} else if ( material.normalMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.normalMap;\n\t\n\t    \t\t} else if ( material.bumpMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.bumpMap;\n\t\n\t    \t\t} else if ( material.roughnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t    \t\t} else if ( material.metalnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t    \t\t} else if ( material.alphaMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.alphaMap;\n\t\n\t    \t\t} else if ( material.emissiveMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uvScaleMap !== undefined ) {\n\t\n\t    \t\t\t// backwards compatibility\n\t    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar offset = uvScaleMap.offset;\n\t    \t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.envMap.value = material.envMap;\n\t\n\t    \t\t// don't flip CubeTexture envMaps, flip everything else:\n\t    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\t\n\t    \t\tuniforms.reflectivity.value = material.reflectivity;\n\t    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLine( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsDash( uniforms, material ) {\n\t\n\t    \t\tuniforms.dashSize.value = material.dashSize;\n\t    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t    \t\tuniforms.scale.value = material.scale;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPoints( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t    \t\tuniforms.size.value = material.size * _pixelRatio;\n\t    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t\n\t    \t\tif ( material.map !== null ) {\n\t\n\t    \t\t\tvar offset = material.map.offset;\n\t    \t\t\tvar repeat = material.map.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsFog( uniforms, fog ) {\n\t\n\t    \t\tuniforms.fogColor.value = fog.color;\n\t\n\t    \t\tif ( fog.isFog ) {\n\t\n\t    \t\t\tuniforms.fogNear.value = fog.near;\n\t    \t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t    \t\t} else if ( fog.isFogExp2 ) {\n\t\n\t    \t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLambert( uniforms, material ) {\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhong( uniforms, material ) {\n\t\n\t    \t\tuniforms.specular.value = material.specular;\n\t    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsStandard( uniforms, material ) {\n\t\n\t    \t\tuniforms.roughness.value = material.roughness;\n\t    \t\tuniforms.metalness.value = material.metalness;\n\t\n\t    \t\tif ( material.roughnessMap ) {\n\t\n\t    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.metalnessMap ) {\n\t\n\t    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.envMap ) {\n\t\n\t    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\t\n\t    \t\tuniforms.clearCoat.value = material.clearCoat;\n\t    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t    \t\trefreshUniformsStandard( uniforms, material );\n\t\n\t    \t}\n\t\n\t    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\t\n\t    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t    \t\tuniforms.directionalLights.needsUpdate = value;\n\t    \t\tuniforms.pointLights.needsUpdate = value;\n\t    \t\tuniforms.spotLights.needsUpdate = value;\n\t    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t    \t}\n\t\n\t    \t// Lighting\n\t\n\t    \tfunction setupShadows( lights ) {\n\t\n\t    \t\tvar lightShadowsLength = 0;\n\t\n\t    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar light = lights[ i ];\n\t\n\t    \t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t    \t}\n\t\n\t    \tfunction setupLights( lights, camera ) {\n\t\n\t    \t\tvar l, ll, light,\n\t    \t\tr = 0, g = 0, b = 0,\n\t    \t\tcolor,\n\t    \t\tintensity,\n\t    \t\tdistance,\n\t    \t\tshadowMap,\n\t\n\t    \t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t    \t\tdirectionalLength = 0,\n\t    \t\tpointLength = 0,\n\t    \t\tspotLength = 0,\n\t    \t\themiLength = 0;\n\t\n\t    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t    \t\t\tlight = lights[ l ];\n\t\n\t    \t\t\tcolor = light.color;\n\t    \t\t\tintensity = light.intensity;\n\t    \t\t\tdistance = light.distance;\n\t\n\t    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t    \t\t\tif ( light.isAmbientLight ) {\n\t\n\t    \t\t\t\tr += color.r * intensity;\n\t    \t\t\t\tg += color.g * intensity;\n\t    \t\t\t\tb += color.b * intensity;\n\t\n\t    \t\t\t} else if ( light.isDirectionalLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isSpotLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.distance = distance;\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isPointLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.distance = light.distance;\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t    \t\t\t\t// equal to inverse of the light's position\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isHemisphereLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t    \t\t\t\tuniforms.direction.normalize();\n\t\n\t    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.ambient[ 0 ] = r;\n\t    \t\t_lights.ambient[ 1 ] = g;\n\t    \t\t_lights.ambient[ 2 ] = b;\n\t\n\t    \t\t_lights.directional.length = directionalLength;\n\t    \t\t_lights.spot.length = spotLength;\n\t    \t\t_lights.point.length = pointLength;\n\t    \t\t_lights.hemi.length = hemiLength;\n\t\n\t    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t    \t}\n\t\n\t    \t// GL state setting\n\t\n\t    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t    \t\tstate.setCullFace( cullFace );\n\t    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\t\n\t    \t};\n\t\n\t    \t// Textures\n\t\n\t    \tfunction allocTextureUnit() {\n\t\n\t    \t\tvar textureUnit = _usedTextureUnits;\n\t\n\t    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t    \t\t}\n\t\n\t    \t\t_usedTextureUnits += 1;\n\t\n\t    \t\treturn textureUnit;\n\t\n\t    \t}\n\t\n\t    \tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t    \t// this.setTexture2D = setTexture2D;\n\t    \tthis.setTexture2D = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\t// backwards compatibility: peel texture.texture\n\t    \t\treturn function setTexture2D( texture, slot ) {\n\t\n\t    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTexture = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTexture( texture, slot ) {\n\t\n\t    \t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t    \t\t\t\twarned = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTextureCube = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTextureCube( texture, slot ) {\n\t\n\t    \t\t\t// backwards compatibility: peel texture.texture\n\t    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t    \t\t\t// TODO: unify these code paths\n\t    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t    \t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t    \t\t\t\t// this function alone should take care of cube textures\n\t    \t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.getCurrentRenderTarget = function() {\n\t\n\t    \t\treturn _currentRenderTarget;\n\t\n\t    \t};\n\t\n\t    \tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t    \t\t_currentRenderTarget = renderTarget;\n\t\n\t    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t    \t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t    \t\tvar framebuffer;\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_currentScissor.copy( renderTarget.scissor );\n\t    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tframebuffer = null;\n\t\n\t    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t    \t\t\t_currentScissorTest = _scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t\t_currentFramebuffer = framebuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.scissor( _currentScissor );\n\t    \t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t    \t\tstate.viewport( _currentViewport );\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t    \t\tif ( framebuffer ) {\n\t\n\t    \t\t\tvar restore = false;\n\t\n\t    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\t\t\trestore = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tvar texture = renderTarget.texture;\n\t    \t\t\t\tvar textureFormat = texture.format;\n\t    \t\t\t\tvar textureType = texture.type;\n\t\n\t    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} finally {\n\t\n\t    \t\t\t\tif ( restore ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Map three.js constants to WebGL constants\n\t\n\t    \tfunction paramThreeToGL( p ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t    \t\tif ( p === ByteType ) return _gl.BYTE;\n\t    \t\tif ( p === ShortType ) return _gl.SHORT;\n\t    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t    \t\tif ( p === IntType ) return _gl.INT;\n\t    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\t\n\t    \t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t    \t\tif ( p === RGBFormat ) return _gl.RGB;\n\t    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\t\n\t    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t    \t\tif ( p === OneFactor ) return _gl.ONE;\n\t    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\t\n\t    \t\tif ( extension !== null ){\n\t\n\t    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 0;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function FogExp2 ( color, density ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t    }\n\t\n\t    FogExp2.prototype.isFogExp2 = true;\n\t\n\t    FogExp2.prototype.clone = function () {\n\t\n\t    \treturn new FogExp2( this.color.getHex(), this.density );\n\t\n\t    };\n\t\n\t    FogExp2.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'FogExp2',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tdensity: this.density\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Fog ( color, near, far ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 1;\n\t    \tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t    }\n\t\n\t    Fog.prototype.isFog = true;\n\t\n\t    Fog.prototype.clone = function () {\n\t\n\t    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\t\n\t    };\n\t\n\t    Fog.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'Fog',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tnear: this.near,\n\t    \t\tfar: this.far\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Scene () {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Scene';\n\t\n\t    \tthis.background = null;\n\t    \tthis.fog = null;\n\t    \tthis.overrideMaterial = null;\n\t\n\t    \tthis.autoUpdate = true; // checked by the renderer\n\t\n\t    }\n\t\n\t    Scene.prototype = Object.create( Object3D.prototype );\n\t\n\t    Scene.prototype.constructor = Scene;\n\t\n\t    Scene.prototype.copy = function ( source, recursive ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source, recursive );\n\t\n\t    \tif ( source.background !== null ) this.background = source.background.clone();\n\t    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t    \tthis.autoUpdate = source.autoUpdate;\n\t    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    Scene.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlare( texture, size, distance, blending, color ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.lensFlares = [];\n\t\n\t    \tthis.positionScreen = new Vector3();\n\t    \tthis.customUpdateCallback = undefined;\n\t\n\t    \tif ( texture !== undefined ) {\n\t\n\t    \t\tthis.add( texture, size, distance, blending, color );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LensFlare,\n\t\n\t    \tisLensFlare: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.positionScreen.copy( source.positionScreen );\n\t    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t    \t\tif ( size === undefined ) size = - 1;\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t    \t\tif ( opacity === undefined ) opacity = 1;\n\t    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t    \t\tif ( blending === undefined ) blending = NormalBlending;\n\t\n\t    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t    \t\tthis.lensFlares.push( {\n\t    \t\t\ttexture: texture,\t// THREE.Texture\n\t    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t    \t\t\tscale: 1, \t\t// scale\n\t    \t\t\trotation: 0, \t\t// rotation\n\t    \t\t\topacity: opacity,\t// opacity\n\t    \t\t\tcolor: color,\t\t// color\n\t    \t\t\tblending: blending\t// blending\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Update lens flares update positions on all flares based on the screen position\n\t    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t    \t */\n\t\n\t    \tupdateLensFlares: function () {\n\t\n\t    \t\tvar f, fl = this.lensFlares.length;\n\t    \t\tvar flare;\n\t    \t\tvar vecX = - this.positionScreen.x * 2;\n\t    \t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t    \t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t    \t\t\tflare = this.lensFlares[ f ];\n\t\n\t    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *\tuvOffset: new THREE.Vector2(),\n\t     *\tuvScale: new THREE.Vector2()\n\t     * }\n\t     */\n\t\n\t    function SpriteMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'SpriteMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t    \tthis.map = null;\n\t\n\t    \tthis.rotation = 0;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    SpriteMaterial.prototype = Object.create( Material.prototype );\n\t    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\t\n\t    SpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.rotation = source.rotation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Sprite( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Sprite';\n\t\n\t    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\t\n\t    }\n\t\n\t    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Sprite,\n\t\n\t    \tisSprite: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t    \t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tintersects.push( {\n\t\n\t    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t    \t\t\t\tpoint: this.position,\n\t    \t\t\t\tface: null,\n\t    \t\t\t\tobject: this\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LOD() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'LOD';\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tlevels: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: []\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t\n\t    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LOD,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source, false );\n\t\n\t    \t\tvar levels = source.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddLevel: function ( object, distance ) {\n\t\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t\n\t    \t\tdistance = Math.abs( distance );\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t    \t\tthis.add( object );\n\t\n\t    \t},\n\t\n\t    \tgetObjectForDistance: function ( distance ) {\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn levels[ i - 1 ].object;\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar levels = this.levels;\n\t\n\t    \t\t\tif ( levels.length > 1 ) {\n\t\n\t    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t    \t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.levels = [];\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tdata.object.levels.push( {\n\t    \t\t\t\tobject: level.object.uuid,\n\t    \t\t\t\tdistance: level.distance\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { data: data, width: width, height: height };\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps  = false;\n\t\n\t    }\n\t\n\t    DataTexture.prototype = Object.create( Texture.prototype );\n\t    DataTexture.prototype.constructor = DataTexture;\n\t\n\t    DataTexture.prototype.isDataTexture = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author michael guerrero / http://realitymeltdown.com\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\t\n\t    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t    \tthis.identityMatrix = new Matrix4();\n\t\n\t    \t// copy the bone array\n\t\n\t    \tbones = bones || [];\n\t\n\t    \tthis.bones = bones.slice( 0 );\n\t\n\t    \t// create a bone texture or an array of floats\n\t\n\t    \tif ( this.useVertexTexture ) {\n\t\n\t    \t\t// layout (1 matrix = 4 pixels)\n\t    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t    \t\tsize = Math.max( size, 4 );\n\t\n\t    \t\tthis.boneTextureWidth = size;\n\t    \t\tthis.boneTextureHeight = size;\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t    \t}\n\t\n\t    \t// use the supplied bone inverses or calculate the inverses\n\t\n\t    \tif ( boneInverses === undefined ) {\n\t\n\t    \t\tthis.calculateInverses();\n\t\n\t    \t} else {\n\t\n\t    \t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t    \t\t\tthis.boneInverses = [];\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Object.assign( Skeleton.prototype, {\n\t\n\t    \tcalculateInverses: function () {\n\t\n\t    \t\tthis.boneInverses = [];\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tvar inverse = new Matrix4();\n\t\n\t    \t\t\tif ( this.bones[ b ] ) {\n\t\n\t    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.boneInverses.push( inverse );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tvar bone;\n\t\n\t    \t\t// recover the bind-time world matrices\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// compute the local matrices, positions, rotations and scales\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar offsetMatrix = new Matrix4();\n\t\n\t    \t\treturn function update() {\n\t\n\t    \t\t\t// flatten bone matrices to array\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\t// compute the offset between the current and the original transform\n\t\n\t    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.useVertexTexture ) {\n\t\n\t    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Bone( skin ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Bone';\n\t\n\t    \tthis.skin = skin;\n\t\n\t    }\n\t\n\t    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Bone,\n\t\n\t    \tisBone: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.skin = source.skin;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.type = 'SkinnedMesh';\n\t\n\t    \tthis.bindMode = \"attached\";\n\t    \tthis.bindMatrix = new Matrix4();\n\t    \tthis.bindMatrixInverse = new Matrix4();\n\t\n\t    \t// init bones\n\t\n\t    \t// TODO: remove bone creation as there is no reason (other than\n\t    \t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t    \tvar bones = [];\n\t\n\t    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t    \t\tvar bone, gbone;\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tbone = new Bone( this );\n\t    \t\t\tbones.push( bone );\n\t\n\t    \t\t\tbone.name = gbone.name;\n\t    \t\t\tbone.position.fromArray( gbone.pos );\n\t    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.add( bones[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.normalizeSkinWeights();\n\t\n\t    \tthis.updateMatrixWorld( true );\n\t    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t    }\n\t\n\t\n\t    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\t\n\t    \tconstructor: SkinnedMesh,\n\t\n\t    \tisSkinnedMesh: true,\n\t\n\t    \tbind: function( skeleton, bindMatrix ) {\n\t\n\t    \t\tthis.skeleton = skeleton;\n\t\n\t    \t\tif ( bindMatrix === undefined ) {\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.skeleton.calculateInverses();\n\t\n\t    \t\t\tbindMatrix = this.matrixWorld;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.bindMatrix.copy( bindMatrix );\n\t    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tthis.skeleton.pose();\n\t\n\t    \t},\n\t\n\t    \tnormalizeSkinWeights: function () {\n\t\n\t    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar vec = new Vector4();\n\t\n\t    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t    \t\t\t\tvec.x = skinWeight.getX( i );\n\t    \t\t\t\tvec.y = skinWeight.getY( i );\n\t    \t\t\t\tvec.z = skinWeight.getZ( i );\n\t    \t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function( force ) {\n\t\n\t    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t    \t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t    \t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function() {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *  linecap: \"round\",\n\t     *  linejoin: \"round\"\n\t     * }\n\t     */\n\t\n\t    function LineBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t    \tthis.linecap = 'round';\n\t    \tthis.linejoin = 'round';\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineBasicMaterial.prototype = Object.create( Material.prototype );\n\t    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\t\n\t    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\t\n\t    LineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t    \tthis.linecap = source.linecap;\n\t    \tthis.linejoin = source.linejoin;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Line( geometry, material, mode ) {\n\t\n\t    \tif ( mode === 1 ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t    \t\treturn new LineSegments( geometry, material );\n\t\n\t    \t}\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Line';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Line,\n\t\n\t    \tisLine: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar precision = raycaster.linePrecision;\n\t    \t\t\tvar precisionSq = precision * precision;\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar vStart = new Vector3();\n\t    \t\t\tvar vEnd = new Vector3();\n\t    \t\t\tvar interSegment = new Vector3();\n\t    \t\t\tvar interRay = new Vector3();\n\t    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar nbVertices = vertices.length;\n\t\n\t    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LineSegments( geometry, material ) {\n\t\n\t    \tLine.call( this, geometry, material );\n\t\n\t    \tthis.type = 'LineSegments';\n\t\n\t    }\n\t\n\t    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\t\n\t    \tconstructor: LineSegments,\n\t\n\t    \tisLineSegments: true\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  size: <float>,\n\t     *  sizeAttenuation: <bool>\n\t     * }\n\t     */\n\t\n\t    function PointsMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'PointsMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.size = 1;\n\t    \tthis.sizeAttenuation = true;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    PointsMaterial.prototype = Object.create( Material.prototype );\n\t    PointsMaterial.prototype.constructor = PointsMaterial;\n\t\n\t    PointsMaterial.prototype.isPointsMaterial = true;\n\t\n\t    PointsMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.size = source.size;\n\t    \tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Points( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Points';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Points,\n\t\n\t    \tisPoints: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar object = this;\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t    \t\t\tvar position = new Vector3();\n\t\n\t    \t\t\tfunction testPoint( point, index ) {\n\t\n\t    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t    \t\t\t\t\t\tindex: index,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tobject: object\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, a );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, i );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Group() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Group';\n\t\n\t    }\n\t\n\t    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Group\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    \tvar scope = this;\n\t\n\t    \tfunction update() {\n\t\n\t    \t\trequestAnimationFrame( update );\n\t\n\t    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t    \t\t\tscope.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tupdate();\n\t\n\t    }\n\t\n\t    VideoTexture.prototype = Object.create( Texture.prototype );\n\t    VideoTexture.prototype.constructor = VideoTexture;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t    \tthis.mipmaps = mipmaps;\n\t\n\t    \t// no flipping for cube textures\n\t    \t// (also flipping doesn't work for compressed textures )\n\t\n\t    \tthis.flipY = false;\n\t\n\t    \t// can't generate mipmaps for compressed textures\n\t    \t// mips must be embedded in DDS files\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    }\n\t\n\t    CompressedTexture.prototype = Object.create( Texture.prototype );\n\t    CompressedTexture.prototype.constructor = CompressedTexture;\n\t\n\t    CompressedTexture.prototype.isCompressedTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.needsUpdate = true;\n\t\n\t    }\n\t\n\t    CanvasTexture.prototype = Object.create( Texture.prototype );\n\t    CanvasTexture.prototype.constructor = CanvasTexture;\n\t\n\t    /**\n\t     * @author Matt DesLauriers / @mattdesl\n\t     * @author atix / arthursilber.de\n\t     */\n\t\n\t    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\t\n\t    \tformat = format !== undefined ? format : DepthFormat;\n\t\n\t    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\t\n\t    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\t\n\t    \t}\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t\n\t    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps\t= false;\n\t\n\t    }\n\t\n\t    DepthTexture.prototype = Object.create( Texture.prototype );\n\t    DepthTexture.prototype.constructor = DepthTexture;\n\t    DepthTexture.prototype.isDepthTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WireframeGeometry( geometry ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar numEdges = 0;\n\t\n\t    \t\t// allocate maximal size\n\t    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t    \t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tif ( geometry.index !== null ) {\n\t\n\t    \t\t\t// Indexed BufferGeometry\n\t\n\t    \t\t\tvar indices = geometry.index.array;\n\t    \t\t\tvar vertices = geometry.attributes.position;\n\t    \t\t\tvar groups = geometry.groups;\n\t    \t\t\tvar numEdges = 0;\n\t\n\t    \t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// allocate maximal size\n\t    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t    \t\t\t\tvar group = groups[ o ];\n\t\n\t    \t\t\t\tvar start = group.start;\n\t    \t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t    \t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// non-indexed BufferGeometry\n\t\n\t    \t\t\tvar vertices = geometry.attributes.position.array;\n\t    \t\t\tvar numEdges = vertices.length / 3;\n\t    \t\t\tvar numTris = numEdges / 3;\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\t\n\t    /**\n\t     * @author zz85 / https://github.com/zz85\n\t     * Parametric Surfaces Geometry\n\t     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t     *\n\t     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t     *\n\t     */\n\t\n\t    function ParametricGeometry( func, slices, stacks ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ParametricGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tfunc: func,\n\t    \t\tslices: slices,\n\t    \t\tstacks: stacks\n\t    \t};\n\t\n\t    \tvar verts = this.vertices;\n\t    \tvar faces = this.faces;\n\t    \tvar uvs = this.faceVertexUvs[ 0 ];\n\t\n\t    \tvar i, j, p;\n\t    \tvar u, v;\n\t\n\t    \tvar sliceCount = slices + 1;\n\t\n\t    \tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t    \t\tv = i / stacks;\n\t\n\t    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t    \t\t\tu = j / slices;\n\t\n\t    \t\t\tp = func( u, v );\n\t    \t\t\tverts.push( p );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar a, b, c, d;\n\t    \tvar uva, uvb, uvc, uvd;\n\t\n\t    \tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t    \t\t\ta = i * sliceCount + j;\n\t    \t\t\tb = i * sliceCount + j + 1;\n\t    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t    \t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t    \t\t\tuva = new Vector2( j / slices, i / stacks );\n\t    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n\t    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\t\n\t    \t\t\tfaces.push( new Face3( a, b, d ) );\n\t    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tfaces.push( new Face3( b, c, d ) );\n\t    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// console.log(this);\n\t\n\t    \t// magic bullet\n\t    \t// var diff = this.mergeVertices();\n\t    \t// console.log('removed ', diff, ' vertices by merging');\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n\t    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\t\n\t    /**\n\t     * @author clockworkgeek / https://github.com/clockworkgeek\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PolyhedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tvertices: vertices,\n\t    \t\tindices: indices,\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    \tradius = radius || 1;\n\t    \tdetail = detail || 0;\n\t\n\t    \tvar that = this;\n\t\n\t    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\t\n\t    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\t\n\t    \t}\n\t\n\t    \tvar p = this.vertices;\n\t\n\t    \tvar faces = [];\n\t\n\t    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\t\n\t    \t\tvar v1 = p[ indices[ i ] ];\n\t    \t\tvar v2 = p[ indices[ i + 1 ] ];\n\t    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\t\n\t    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\n\t    \t}\n\t\n\t    \tvar centroid = new Vector3();\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tsubdivide( faces[ i ], detail );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Handle case when face straddles the seam\n\t\n\t    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\t\n\t    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\tvar x0 = uvs[ 0 ].x;\n\t    \t\tvar x1 = uvs[ 1 ].x;\n\t    \t\tvar x2 = uvs[ 2 ].x;\n\t\n\t    \t\tvar max = Math.max( x0, x1, x2 );\n\t    \t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t    \t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t    \t\t\t// 0.9 is somewhat arbitrary\n\t\n\t    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Apply radius\n\t\n\t    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Merge vertices\n\t\n\t    \tthis.mergeVertices();\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\n\t    \t// Project vector onto sphere's surface\n\t\n\t    \tfunction prepare( vector ) {\n\t\n\t    \t\tvar vertex = vector.normalize().clone();\n\t    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\t\n\t    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\t\n\t    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t    \t\tvertex.uv = new Vector2( u, 1 - v );\n\t\n\t    \t\treturn vertex;\n\t\n\t    \t}\n\t\n\t\n\t    \t// Approximate a curved face with recursively sub-divided triangles.\n\t\n\t    \tfunction make( v1, v2, v3 ) {\n\t\n\t    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t    \t\tthat.faces.push( face );\n\t\n\t    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\t\n\t    \t\tvar azi = azimuth( centroid );\n\t\n\t    \t\tthat.faceVertexUvs[ 0 ].push( [\n\t    \t\t\tcorrectUV( v1.uv, v1, azi ),\n\t    \t\t\tcorrectUV( v2.uv, v2, azi ),\n\t    \t\t\tcorrectUV( v3.uv, v3, azi )\n\t    \t\t] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Analytically subdivide a face to the required detail level.\n\t\n\t    \tfunction subdivide( face, detail ) {\n\t\n\t    \t\tvar cols = Math.pow( 2, detail );\n\t    \t\tvar a = prepare( that.vertices[ face.a ] );\n\t    \t\tvar b = prepare( that.vertices[ face.b ] );\n\t    \t\tvar c = prepare( that.vertices[ face.c ] );\n\t    \t\tvar v = [];\n\t\n\t    \t\t// Construct all of the vertices for this subdivision.\n\t\n\t    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\t\n\t    \t\t\tv[ i ] = [];\n\t\n\t    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar rows = cols - i;\n\t\n\t    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\t\n\t    \t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Construct all of the faces.\n\t\n\t    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t    \t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t    \t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ],\n\t    \t\t\t\t\t\tv[ i ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t    \tfunction azimuth( vector ) {\n\t\n\t    \t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle above the XZ plane.\n\t\n\t    \tfunction inclination( vector ) {\n\t\n\t    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Texture fixing helper. Spheres have some odd behaviours.\n\t\n\t    \tfunction correctUV( uv, vector, azimuth ) {\n\t\n\t    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n\t    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t    \t\treturn uv.clone();\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function TetrahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'TetrahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function OctahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'OctahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function IcosahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t    \tvar vertices = [\n\t    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'IcosahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\t\n\t    /**\n\t     * @author Abe Pazos / https://hamoid.com\n\t     */\n\t\n\t    function DodecahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t    \tvar r = 1 / t;\n\t\n\t    \tvar vertices = [\n\t\n\t    \t\t// (±1, ±1, ±1)\n\t    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t    \t\t- 1,  1, - 1,    - 1,  1,  1,\n\t    \t\t 1, - 1, - 1,     1, - 1,  1,\n\t    \t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t    \t\t// (0, ±1/φ, ±φ)\n\t    \t\t 0, - r, - t,     0, - r,  t,\n\t    \t\t 0,  r, - t,     0,  r,  t,\n\t\n\t    \t\t// (±1/φ, ±φ, 0)\n\t    \t\t- r, - t,  0,    - r,  t,  0,\n\t    \t\t r, - t,  0,     r,  t,  0,\n\t\n\t    \t\t// (±φ, 0, ±1/φ)\n\t    \t\t- t,  0, - r,     t,  0, - r,\n\t    \t\t- t,  0,  r,     t,  0,  r\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'DodecahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\t\n\t    /**\n\t     * @author WestLangley / https://github.com/WestLangley\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author miningold / https://github.com/miningold\n\t     * @author jonobr1 / https://github.com/jonobr1\n\t     *\n\t     * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t     *\n\t     * Creates a tube which extrudes along a 3d spline\n\t     *\n\t     * Uses parallel transport frames as described in\n\t     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t     */\n\t\n\t    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TubeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpath: path,\n\t    \t\tsegments: segments,\n\t    \t\tradius: radius,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tclosed: closed,\n\t    \t\ttaper: taper\n\t    \t};\n\t\n\t    \tsegments = segments || 64;\n\t    \tradius = radius || 1;\n\t    \tradialSegments = radialSegments || 8;\n\t    \tclosed = closed || false;\n\t    \ttaper = taper || TubeGeometry.NoTaper;\n\t\n\t    \tvar grid = [];\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\ttangent,\n\t    \t\tnormal,\n\t    \t\tbinormal,\n\t\n\t    \t\tnumpoints = segments + 1,\n\t\n\t    \t\tu, v, r,\n\t\n\t    \t\tcx, cy,\n\t    \t\tpos, pos2 = new Vector3(),\n\t    \t\ti, j,\n\t    \t\tip, jp,\n\t    \t\ta, b, c, d,\n\t    \t\tuva, uvb, uvc, uvd;\n\t\n\t    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n\t    \t\ttangents = frames.tangents,\n\t    \t\tnormals = frames.normals,\n\t    \t\tbinormals = frames.binormals;\n\t\n\t    \t// proxy internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \tfunction vert( x, y, z ) {\n\t\n\t    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\t\n\t    \t}\n\t\n\t    \t// construct the grid\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tgrid[ i ] = [];\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\tpos = path.getPointAt( u );\n\t\n\t    \t\ttangent = tangents[ i ];\n\t    \t\tnormal = normals[ i ];\n\t    \t\tbinormal = binormals[ i ];\n\t\n\t    \t\tr = radius * taper( u );\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\t\n\t    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t    \t\t\tcy = r * Math.sin( v );\n\t\n\t    \t\t\tpos2.copy( pos );\n\t    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\t\n\t    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// construct the mesh\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t    \t\t\tjp = ( j + 1 ) % radialSegments;\n\t\n\t    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t    \t\t\tb = grid[ ip ][ j ];\n\t    \t\t\tc = grid[ ip ][ jp ];\n\t    \t\t\td = grid[ i ][ jp ];\n\t\n\t    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n\t    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\t\n\t    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    TubeGeometry.prototype = Object.create( Geometry.prototype );\n\t    TubeGeometry.prototype.constructor = TubeGeometry;\n\t\n\t    TubeGeometry.NoTaper = function ( u ) {\n\t\n\t    \treturn 1;\n\t\n\t    };\n\t\n\t    TubeGeometry.SinusoidalTaper = function ( u ) {\n\t\n\t    \treturn Math.sin( Math.PI * u );\n\t\n\t    };\n\t\n\t    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\t    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\t\n\t    \tvar\tnormal = new Vector3(),\n\t\n\t    \t\ttangents = [],\n\t    \t\tnormals = [],\n\t    \t\tbinormals = [],\n\t\n\t    \t\tvec = new Vector3(),\n\t    \t\tmat = new Matrix4(),\n\t\n\t    \t\tnumpoints = segments + 1,\n\t    \t\ttheta,\n\t    \t\tsmallest,\n\t\n\t    \t\ttx, ty, tz,\n\t    \t\ti, u;\n\t\n\t\n\t    \t// expose internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \t// compute the tangent vectors for each segment on the path\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\ttangents[ i ] = path.getTangentAt( u );\n\t    \t\ttangents[ i ].normalize();\n\t\n\t    \t}\n\t\n\t    \tinitialNormal3();\n\t\n\t    \t/*\n\t    \tfunction initialNormal1(lastBinormal) {\n\t    \t\t// fixed start binormal. Has dangers of 0 vectors\n\t    \t\tnormals[ 0 ] = new THREE.Vector3();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3();\n\t    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t    \t}\n\t\n\t    \tfunction initialNormal2() {\n\t\n\t    \t\t// This uses the Frenet-Serret formula for deriving binormal\n\t    \t\tvar t2 = path.getTangentAt( epsilon );\n\t\n\t    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    \tfunction initialNormal3() {\n\t\n\t    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t    \t\t// and in the direction of the smallest tangent xyz component\n\t\n\t    \t\tnormals[ 0 ] = new Vector3();\n\t    \t\tbinormals[ 0 ] = new Vector3();\n\t    \t\tsmallest = Number.MAX_VALUE;\n\t    \t\ttx = Math.abs( tangents[ 0 ].x );\n\t    \t\tty = Math.abs( tangents[ 0 ].y );\n\t    \t\ttz = Math.abs( tangents[ 0 ].z );\n\t\n\t    \t\tif ( tx <= smallest ) {\n\t\n\t    \t\t\tsmallest = tx;\n\t    \t\t\tnormal.set( 1, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ty <= smallest ) {\n\t\n\t    \t\t\tsmallest = ty;\n\t    \t\t\tnormal.set( 0, 1, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tz <= smallest ) {\n\t\n\t    \t\t\tnormal.set( 0, 0, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\t\n\t    \tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t    \t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t    \t\t\tvec.normalize();\n\t\n\t    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t    \tif ( closed ) {\n\t\n\t    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t    \t\ttheta /= ( numpoints - 1 );\n\t\n\t    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\t\n\t    \t\t\ttheta = - theta;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\t\t// twist a little...\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     *\n\t     * see: http://www.blackpawn.com/texts/pqtorus/\n\t     */\n\t    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \tp = p || 2;\n\t    \tq = q || 3;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar i, j, index = 0, indexOffset = 0;\n\t\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t    \tvar uv = new Vector2();\n\t\n\t    \tvar P1 = new Vector3();\n\t    \tvar P2 = new Vector3();\n\t\n\t    \tvar B = new Vector3();\n\t    \tvar T = new Vector3();\n\t    \tvar N = new Vector3();\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t    \t\t// calculate orthonormal basis\n\t\n\t    \t\tT.subVectors( P2, P1 );\n\t    \t\tN.addVectors( P2, P1 );\n\t    \t\tB.crossVectors( T, N );\n\t    \t\tN.crossVectors( B, T );\n\t\n\t    \t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t    \t\tB.normalize();\n\t    \t\tN.normalize();\n\t\n\t    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t    \t\t\tvar cx = - tube * Math.cos( v );\n\t    \t\t\tvar cy = tube * Math.sin( v );\n\t\n\t    \t\t\t// now calculate the final vertex position.\n\t    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / tubularSegments;\n\t    \t\t\tuv.y = j / radialSegments;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// this function calculates the current position on the torus curve\n\t\n\t    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t    \t\tvar cu = Math.cos( u );\n\t    \t\tvar su = Math.sin( u );\n\t    \t\tvar quOverP = q / p * u;\n\t    \t\tvar cs = Math.cos( quOverP );\n\t\n\t    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     */\n\t\n\t    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t    \tarc = arc || Math.PI * 2;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t\n\t    \t// helper variables\n\t    \tvar center = new Vector3();\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\tvar u = i / tubularSegments * arc;\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t    \t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t    \t\t\t// this vector is used to calculate the normal\n\t    \t\t\tcenter.x = radius * Math.cos( u );\n\t    \t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t    \t\t\t// update offsets\n\t    \t\t\tvertexBufferOffset += 3;\n\t    \t\t\tuvBufferOffset += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t// update offset\n\t    \t\t\tindexBufferOffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t     */\n\t\n\t    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t    }\n\t\n\t    TorusGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusGeometry.prototype.constructor = TorusGeometry;\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.ShapeUtils = {\n\t\n\t    \t// calculate area of the contour polygon\n\t\n\t    \tarea: function ( contour ) {\n\t\n\t    \t\tvar n = contour.length;\n\t    \t\tvar a = 0.0;\n\t\n\t    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn a * 0.5;\n\t\n\t    \t},\n\t\n\t    \ttriangulate: ( function () {\n\t\n\t    \t\t/**\n\t    \t\t * This code is a quick port of code written in C++ which was submitted to\n\t    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t    \t\t * See original code and more information here:\n\t    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t    \t\t *\n\t    \t\t * ported to actionscript by Zevan Rosser\n\t    \t\t * www.actionsnippet.com\n\t    \t\t *\n\t    \t\t * ported to javascript by Joshua Koo\n\t    \t\t * http://www.lab4games.net/zz85/blog\n\t    \t\t *\n\t    \t\t */\n\t\n\t    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t    \t\t\tvar p;\n\t    \t\t\tvar ax, ay, bx, by;\n\t    \t\t\tvar cx, cy, px, py;\n\t\n\t    \t\t\tax = contour[ verts[ u ] ].x;\n\t    \t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t    \t\t\tbx = contour[ verts[ v ] ].x;\n\t    \t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t    \t\t\tcx = contour[ verts[ w ] ].x;\n\t    \t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\t\n\t    \t\t\tvar aX, aY, bX, bY, cX, cY;\n\t    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t    \t\t\taX = cx - bx;  aY = cy - by;\n\t    \t\t\tbX = ax - cx;  bY = ay - cy;\n\t    \t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t    \t\t\t\tpx = contour[ verts[ p ] ].x;\n\t    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t    \t\t\t\tapx = px - ax;  apy = py - ay;\n\t    \t\t\t\tbpx = px - bx;  bpy = py - by;\n\t    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t    \t\t\t\t// see if p is inside triangle abc\n\t\n\t    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// takes in an contour array and returns\n\t\n\t    \t\treturn function triangulate( contour, indices ) {\n\t\n\t    \t\t\tvar n = contour.length;\n\t\n\t    \t\t\tif ( n < 3 ) return null;\n\t\n\t    \t\t\tvar result = [],\n\t    \t\t\t\tverts = [],\n\t    \t\t\t\tvertIndices = [];\n\t\n\t    \t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t    \t\t\tvar u, v, w;\n\t\n\t    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar nv = n;\n\t\n\t    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t    \t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t    \t\t\t\t\t//return null;\n\t    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t    \t\t\t\t\tif ( indices ) return vertIndices;\n\t    \t\t\t\t\treturn result;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t    \t\t\t\t\tvar a, b, c, s, t;\n\t\n\t    \t\t\t\t\t/* true names of the vertices */\n\t\n\t    \t\t\t\t\ta = verts[ u ];\n\t    \t\t\t\t\tb = verts[ v ];\n\t    \t\t\t\t\tc = verts[ w ];\n\t\n\t    \t\t\t\t\t/* output Triangle */\n\t\n\t    \t\t\t\t\tresult.push( [ contour[ a ],\n\t    \t\t\t\t\t\tcontour[ b ],\n\t    \t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t    \t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tnv --;\n\t\n\t    \t\t\t\t\t/* reset error detection counter */\n\t\n\t    \t\t\t\t\tcount = 2 * nv;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( indices ) return vertIndices;\n\t    \t\t\treturn result;\n\t\n\t    \t\t}\n\t\n\t    \t} )(),\n\t\n\t    \ttriangulateShape: function ( contour, holes ) {\n\t\n\t    \t\tfunction removeDupEndPts(points) {\n\t\n\t    \t\t\tvar l = points.length;\n\t\n\t    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\t\tpoints.pop();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tremoveDupEndPts( contour );\n\t    \t\tholes.forEach( removeDupEndPts );\n\t\n\t    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t    \t\t\t// inOtherPt needs to be collinear to the inSegment\n\t    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// not parallel\n\t\n\t    \t\t\t\tvar perpSeg2;\n\t    \t\t\t\tif ( limit > 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// i.e. to reduce rounding errors\n\t    \t\t\t\t// intersection at endpoint of segment#1?\n\t    \t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// intersection at endpoint of segment#2?\n\t    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t    \t\t\t\t// return real intersection point\n\t    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// parallel or collinear\n\t    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t    \t\t\t\t// they are collinear or degenerate\n\t    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t    \t\t\t\t// both segments are points\n\t    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#1  is a single point\n\t    \t\t\t\tif ( seg1Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#2  is a single point\n\t    \t\t\t\tif ( seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// they are collinear segments, which might overlap\n\t    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t    \t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t    \t\t\t\t\t// the segments are NOT on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// the segments are on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg2min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg1min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t    \t\t\t// The order of legs is important\n\t\n\t    \t\t\t// translation of all points, so that Vertex is at (0,0)\n\t    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// angle != 180 deg.\n\t\n\t    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t    \t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t    \t\t\t\t\t// main angle < 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// main angle > 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// angle == 180 deg.\n\t    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t    \t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tfunction removeHoles( contour, holes ) {\n\t\n\t    \t\t\tvar shape = contour.concat(); // work on this shape\n\t    \t\t\tvar hole;\n\t\n\t    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t    \t\t\t\t// Check if hole point lies within angle around shape point\n\t    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Check if shape point lies within angle around hole point\n\t    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\ttrue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with shape edges\n\t    \t\t\t\tvar sIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar indepHoles = [];\n\t\n\t    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with hole edges\n\t    \t\t\t\tvar ihIdx, chkHole,\n\t    \t\t\t\t\thIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar holeIndex, shapeIndex,\n\t    \t\t\t\tshapePt, holePt,\n\t    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t    \t\t\t\ttmpShape1, tmpShape2,\n\t    \t\t\t\ttmpHole1, tmpHole2;\n\t\n\t    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\t\tindepHoles.push( h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar minShapeIndex = 0;\n\t    \t\t\tvar counter = indepHoles.length * 2;\n\t    \t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t    \t\t\t\tcounter --;\n\t    \t\t\t\tif ( counter < 0 ) {\n\t\n\t    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// search for shape-vertex and hole-vertex,\n\t    \t\t\t\t// which can be connected without intersections\n\t    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t    \t\t\t\t\tholeIndex\t= - 1;\n\t\n\t    \t\t\t\t\t// search for hole which can be reached without intersections\n\t    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t    \t\t\t\t\t\t// prevent multiple checks\n\t    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t    \t\t\t\t\t\thole = holes[ holeIdx ];\n\t    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t    \t\t\t\t\t\t\tholeIndex = h2;\n\t    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar i, il, f, face,\n\t    \t\t\tkey, index,\n\t    \t\t\tallPointsMap = {};\n\t\n\t    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t    \t\tvar allpoints = contour.concat();\n\t\n\t    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t    \t\t// prepare all points map\n\t\n\t    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tallPointsMap[ key ] = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove holes by cutting paths to holes and adding them to the shape\n\t    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t    \t\t// check all face vertices against all points map\n\t\n\t    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = triangles[ i ];\n\t\n\t    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t    \t\t\t\tindex = allPointsMap[ key ];\n\t\n\t    \t\t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\t\tface[ f ] = index;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn triangles.concat();\n\t\n\t    \t},\n\t\n\t    \tisClockWise: function ( pts ) {\n\t\n\t    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\t\n\t    \t},\n\t\n\t    \t// Bezier Curves formulas obtained from\n\t    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t    \t// Quad Bezier Functions\n\t\n\t    \tb2: ( function () {\n\t\n\t    \t\tfunction b2p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p1( t, p ) {\n\t\n\t    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p2( t, p ) {\n\t\n\t    \t\t\treturn t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \t// Cubic Bezier Functions\n\t\n\t    \tb3: ( function () {\n\t\n\t    \t\tfunction b3p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p1( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * k * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p2( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p3( t, p ) {\n\t\n\t    \t\t\treturn t * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     * Creates extruded geometry from a path shape.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t     *  amount: <int>, // Depth to extrude the shape\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t     *  bevelSize: <float>, // how far from shape outline is bevel\n\t     *  bevelSegments: <int>, // number of bevel layers\n\t     *\n\t     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t     *\n\t     *  uvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ExtrudeGeometry( shapes, options ) {\n\t\n\t    \tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t    \t\tshapes = [];\n\t    \t\treturn;\n\t\n\t    \t}\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ExtrudeGeometry';\n\t\n\t    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \t// can't really use automatic vertex normals\n\t    \t// as then front and back sides get smoothed too\n\t    \t// should do separate smoothing just for sides\n\t\n\t    \t//this.computeVertexNormals();\n\t\n\t    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t    }\n\t\n\t    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\t\n\t    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tvar sl = shapes.length;\n\t\n\t    \tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t    \t\tvar shape = shapes[ s ];\n\t    \t\tthis.addShape( shape, options );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t    \tvar extrudePath = options.extrudePath;\n\t    \tvar extrudePts, extrudeByPath = false;\n\t\n\t    \t// Use default WorldUVGenerator if no UV generators are specified.\n\t    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\t\n\t    \tvar splineTube, binormal, normal, position2;\n\t    \tif ( extrudePath ) {\n\t\n\t    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t    \t\textrudeByPath = true;\n\t    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t    \t\t// SETUP TNB variables\n\t\n\t    \t\t// Reuse TNB from TubeGeomtry for now.\n\t    \t\t// TODO1 - have a .isClosed in spline?\n\t\n\t    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\t\n\t    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t    \t\tbinormal = new Vector3();\n\t    \t\tnormal = new Vector3();\n\t    \t\tposition2 = new Vector3();\n\t\n\t    \t}\n\t\n\t    \t// Safeguards if bevels are not enabled\n\t\n\t    \tif ( ! bevelEnabled ) {\n\t\n\t    \t\tbevelSegments = 0;\n\t    \t\tbevelThickness = 0;\n\t    \t\tbevelSize = 0;\n\t\n\t    \t}\n\t\n\t    \t// Variables initialization\n\t\n\t    \tvar ahole, h, hl; // looping of holes\n\t    \tvar scope = this;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t    \t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t    \t}\n\t\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t/* Vertices */\n\t\n\t    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\tvertices = vertices.concat( ahole );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction scalePt2( pt, vec, size ) {\n\t\n\t    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t    \t}\n\t\n\t    \tvar b, bs, t, z,\n\t    \t\tvert, vlen = vertices.length,\n\t    \t\tface, flen = faces.length;\n\t\n\t\n\t    \t// Find directions for point movement\n\t\n\t\n\t    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t    \t\t// computes for inPt the corresponding point inPt' on a new contour\n\t    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t    \t\t//\n\t    \t\t// inPt' is the intersection of the two lines parallel to the two\n\t    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t    \t\t// good reading for geometry algorithms (here: line-line intersection)\n\t    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t    \t\t// check for collinear edges\n\t    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t    \t\t\t// not collinear\n\t\n\t    \t\t\t// length of vectors for normalizing\n\t\n\t    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t    \t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t    \t\t\t// scaling factor for v_prev to intersection point\n\t\n\t    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\t\t// vector from inPt to intersection point\n\t\n\t    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t    \t\t\t//  but prevent crazy spikes\n\t    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t    \t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// handle special case of collinear edges\n\t\n\t    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direction_eq ) {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t    \t\t\t\tv_trans_x = - v_prev_y;\n\t    \t\t\t\tv_trans_y =  v_prev_x;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t    \t\t\t\tv_trans_x = v_prev_x;\n\t    \t\t\t\tv_trans_y = v_prev_y;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t    \t}\n\t\n\t\n\t    \tvar contourMovements = [];\n\t\n\t    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\tif ( j === il ) j = 0;\n\t    \t\tif ( k === il ) k = 0;\n\t\n\t    \t\t//  (j)---(i)---(k)\n\t    \t\t// console.log('i,j,k', i, j , k)\n\t\n\t    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t    \t}\n\t\n\t    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\toneHoleMovements = [];\n\t\n\t    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\t\tif ( j === il ) j = 0;\n\t    \t\t\tif ( k === il ) k = 0;\n\t\n\t    \t\t\t//  (j)---(i)---(k)\n\t    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tholesMovements.push( oneHoleMovements );\n\t    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t    \t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tbs = bevelSize;\n\t\n\t    \t// Back facing vertices\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\tv( vert.x, vert.y, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Add stepped vertices...\n\t    \t// Including front facing vertices\n\t\n\t    \tvar s;\n\t\n\t    \tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Add bevel segments planes\n\t\n\t    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t    \t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t/* Faces */\n\t\n\t    \t// Top and bottom faces\n\t\n\t    \tbuildLidFaces();\n\t\n\t    \t// Sides faces\n\t\n\t    \tbuildSideFaces();\n\t\n\t\n\t    \t/////  Internal functions\n\t\n\t    \tfunction buildLidFaces() {\n\t\n\t    \t\tif ( bevelEnabled ) {\n\t\n\t    \t\t\tvar layer = 0; // steps + 1\n\t    \t\t\tvar offset = vlen * layer;\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlayer = steps + bevelSegments * 2;\n\t    \t\t\toffset = vlen * layer;\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Create faces for the z-sides of the shape\n\t\n\t    \tfunction buildSideFaces() {\n\t\n\t    \t\tvar layeroffset = 0;\n\t    \t\tsidewalls( contour, layeroffset );\n\t    \t\tlayeroffset += contour.length;\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\tsidewalls( ahole, layeroffset );\n\t\n\t    \t\t\t//, true\n\t    \t\t\tlayeroffset += ahole.length;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction sidewalls( contour, layeroffset ) {\n\t\n\t    \t\tvar j, k;\n\t    \t\ti = contour.length;\n\t\n\t    \t\twhile ( -- i >= 0 ) {\n\t\n\t    \t\t\tj = i;\n\t    \t\t\tk = i - 1;\n\t    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t    \t\t\t\tvar slen1 = vlen * s;\n\t    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t    \t\t\t\tvar a = layeroffset + j + slen1,\n\t    \t\t\t\t\tb = layeroffset + k + slen1,\n\t    \t\t\t\t\tc = layeroffset + k + slen2,\n\t    \t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction v( x, y, z ) {\n\t\n\t    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\t\n\t    \t}\n\t\n\t    \tfunction f3( a, b, c ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t    \t}\n\t\n\t    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t    \t\td += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.WorldUVGenerator = {\n\t\n\t    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t\n\t    \t\treturn [\n\t    \t\t\tnew Vector2( a.x, a.y ),\n\t    \t\t\tnew Vector2( b.x, b.y ),\n\t    \t\t\tnew Vector2( c.x, c.y )\n\t    \t\t];\n\t\n\t    \t},\n\t\n\t    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t    \t\tvar d = vertices[ indexD ];\n\t\n\t    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * Text = 3D Text\n\t     *\n\t     * parameters = {\n\t     *  font: <THREE.Font>, // font\n\t     *\n\t     *  size: <float>, // size of the text\n\t     *  height: <float>, // thickness to extrude text\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into text bevel goes\n\t     *  bevelSize: <float> // how far from text outline is bevel\n\t     * }\n\t     */\n\t\n\t    function TextGeometry( text, parameters ) {\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar font = parameters.font;\n\t\n\t    \tif ( (font && font.isFont) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t    \t\treturn new Geometry();\n\t\n\t    \t}\n\t\n\t    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t    \t// translate parameters to ExtrudeGeometry API\n\t\n\t    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t    \t// defaults\n\t\n\t    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t    \tExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t    \tthis.type = 'TextGeometry';\n\t\n\t    }\n\t\n\t    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\t    TextGeometry.prototype.constructor = TextGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     * based on THREE.SphereGeometry\n\t     */\n\t\n\t    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t\n\t    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t    \tphiStart = phiStart !== undefined ? phiStart : 0;\n\t    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t    \tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \tvar index = 0, vertices = [], normal = new Vector3();\n\t\n\t    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\tvar verticesRow = [];\n\t\n\t    \t\tvar v = y / heightSegments;\n\t\n\t    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / widthSegments;\n\t\n\t    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t    \t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t    \t\t\tpositions.setXYZ( index, px, py, pz );\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t    \t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\tverticesRow.push( index );\n\t\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tvertices.push( verticesRow );\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t    \t\t\tvar v2 = vertices[ y ][ x ];\n\t    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', positions );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    SphereGeometry.prototype = Object.create( Geometry.prototype );\n\t    SphereGeometry.prototype.constructor = SphereGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'RingBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tinnerRadius = innerRadius || 20;\n\t    \touterRadius = outerRadius || 50;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// some helper variables\n\t    \tvar index = 0, indexOffset = 0, segment;\n\t    \tvar radius = innerRadius;\n\t    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \t// values are generate from the inside of the ring to the outside\n\t\n\t    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * Math.cos( segment );\n\t    \t\t\tvertex.y = radius * Math.sin( segment );\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// increase the radius for next row of vertices\n\t    \t\tradius += radiusStep;\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = segment;\n\t    \t\t\tvar b = segment + thetaSegments + 1;\n\t    \t\t\tvar c = segment + thetaSegments + 2;\n\t    \t\t\tvar d = segment + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    }\n\t\n\t    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\t\n\t    /**\n\t     * @author Kaleb Murphy\n\t     */\n\t\n\t    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'RingGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    RingGeometry.prototype = Object.create( Geometry.prototype );\n\t    RingGeometry.prototype.constructor = RingGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t    }\n\t\n\t    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t     // points - to create a closed torus, one must use a set of points\n\t     //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t     // segments - the number of circumference segments to create\n\t     // phiStart - the starting radian\n\t     // phiLength - the radian (0 to 2PI) range of the lathed section\n\t     //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tsegments = Math.floor( segments ) || 12;\n\t    \tphiStart = phiStart || 0;\n\t    \tphiLength = phiLength || Math.PI * 2;\n\t\n\t    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( segments + 1 ) * points.length;\n\t    \tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar index = 0, indexOffset = 0, base;\n\t    \tvar inverseSegments = 1.0 / segments;\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar i, j;\n\t\n\t    \t// generate vertices and uvs\n\t\n\t    \tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t    \t\tvar sin = Math.sin( phi );\n\t    \t\tvar cos = Math.cos( phi );\n\t\n\t    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = points[ j ].x * sin;\n\t    \t\t\tvertex.y = points[ j ].y;\n\t    \t\t\tvertex.z = points[ j ].x * cos;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / segments;\n\t    \t\t\tuv.y = j / ( points.length - 1 );\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\tbase = j + i * points.length;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = base;\n\t    \t\t\tvar b = base + points.length;\n\t    \t\t\tvar c = base + points.length + 1;\n\t    \t\t\tvar d = base + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// generate normals\n\t\n\t    \tthis.computeVertexNormals();\n\t\n\t    \t// if the geometry is closed, we need to average the normals along the seam.\n\t    \t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t    \tif( phiLength === Math.PI * 2 ) {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t    \t\tvar n1 = new Vector3();\n\t    \t\tvar n2 = new Vector3();\n\t    \t\tvar n = new Vector3();\n\t\n\t    \t\t// this is the buffer offset for the last line of vertices\n\t    \t\tbase = segments * points.length * 3;\n\t\n\t    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t    \t\t\t// select the normal of the vertex in the first line\n\t    \t\t\tn1.x = normals[ j + 0 ];\n\t    \t\t\tn1.y = normals[ j + 1 ];\n\t    \t\t\tn1.z = normals[ j + 2 ];\n\t\n\t    \t\t\t// select the normal of the vertex in the last line\n\t    \t\t\tn2.x = normals[ base + j + 0 ];\n\t    \t\t\tn2.y = normals[ base + j + 1 ];\n\t    \t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t    \t\t\t// average normals\n\t    \t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t    \t\t\t// assign the new values to both normals\n\t    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t    \t\t} // next row\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\t\n\t    /**\n\t     * @author astrodud / http://astrodud.isgreat.org/\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    // points - to create a closed torus, one must use a set of points\n\t    //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t    // segments - the number of circumference segments to create\n\t    // phiStart - the starting radian\n\t    // phiLength - the radian (0 to 2PI) range of the lathed section\n\t    //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    LatheGeometry.prototype = Object.create( Geometry.prototype );\n\t    LatheGeometry.prototype.constructor = LatheGeometry;\n\t\n\t    /**\n\t     * @author jonobr1 / http://jonobr1.com\n\t     *\n\t     * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t     * ExtrudeGeometry.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t     *\n\t     *\tmaterial: <int> // material index for front and back faces\n\t     *\tuvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ShapeGeometry( shapes, options ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ShapeGeometry';\n\t\n\t    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    }\n\t\n\t    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\t\n\t    /**\n\t     * Add an array of shapes to THREE.ShapeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.addShape( shapes[ i ], options );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tif ( options === undefined ) options = {};\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar material = options.material;\n\t    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t    \t//\n\t\n\t    \tvar i, l, hole;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\thole = holes[ i ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\t\n\t    \t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false;\n\t\n\t    \t}\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t// Vertices\n\t\n\t    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\thole = holes[ i ];\n\t    \t\tvertices = vertices.concat( hole );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar vert, vlen = vertices.length;\n\t    \tvar face, flen = faces.length;\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = vertices[ i ];\n\t\n\t    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\t\n\t    \t}\n\t\n\t    \tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\tface = faces[ i ];\n\t\n\t    \t\tvar a = face[ 0 ] + shapesOffset;\n\t    \t\tvar b = face[ 1 ] + shapesOffset;\n\t    \t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function EdgesGeometry( geometry, thresholdAngle ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tvar geometry2;\n\t\n\t    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tgeometry2 = new Geometry();\n\t    \t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t    \t} else {\n\t\n\t    \t\tgeometry2 = geometry.clone();\n\t\n\t    \t}\n\t\n\t    \tgeometry2.mergeVertices();\n\t    \tgeometry2.computeFaceNormals();\n\t\n\t    \tvar vertices = geometry2.vertices;\n\t    \tvar faces = geometry2.faces;\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tvar face = faces[ i ];\n\t\n\t    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\tvar key = edge.toString();\n\t\n\t    \t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thash[ key ].face2 = i;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar coords = [];\n\t\n\t    \tfor ( var key in hash ) {\n\t\n\t    \t\tvar h = hash[ key ];\n\t\n\t    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t    \t\t\tvar vertex = vertices[ h.vert1 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t\tvertex = vertices[ h.vert2 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t    }\n\t\n\t    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t    \theight = height !== undefined ? height : 100;\n\t\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t    \topenEnded = openEnded !== undefined ? openEnded : false;\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t    \t// used to calculate buffer length\n\t\n\t    \tvar nbCap = 0;\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) nbCap ++;\n\t    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t    \t}\n\t\n\t    \tvar vertexCount = calculateVertexCount();\n\t    \tvar indexCount = calculateIndexCount();\n\t\n\t    \t// buffers\n\t\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t\n\t    \tvar index = 0,\n\t    \t    indexOffset = 0,\n\t    \t    indexArray = [],\n\t    \t    halfHeight = height / 2;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// generate geometry\n\t\n\t    \tgenerateTorso();\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) generateCap( true );\n\t    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount() {\n\t\n\t    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount() {\n\t\n\t    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction generateTorso() {\n\t\n\t    \t\tvar x, y;\n\t    \t\tvar normal = new Vector3();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\t// this will be used to calculate the normal\n\t    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\t\tvar indexRow = [];\n\t\n\t    \t\t\tvar v = y / heightSegments;\n\t\n\t    \t\t\t// calculate the radius of the current row\n\t    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t\tvar u = x / radialSegments;\n\t\n\t    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\t\tvar sinTheta = Math.sin( theta );\n\t    \t\t\t\tvar cosTheta = Math.cos( theta );\n\t\n\t    \t\t\t\t// vertex\n\t    \t\t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\t\tvertex.y = - v * height + halfHeight;\n\t    \t\t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t\t// normal\n\t    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t\t// uv\n\t    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\t\t// save index of vertex in respective row\n\t    \t\t\t\tindexRow.push( index );\n\t\n\t    \t\t\t\t// increase index\n\t    \t\t\t\tindex ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// now save vertices of the row in our index array\n\t    \t\t\tindexArray.push( indexRow );\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\t\t\t// we use the index array to access the correct indices\n\t    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// update counters\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    \tfunction generateCap( top ) {\n\t\n\t    \t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t    \t\tvar uv = new Vector2();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t    \t\t// save the index of the first center vertex\n\t    \t\tcenterIndexStart = index;\n\t\n\t    \t\t// first we generate the center vertex data of the cap.\n\t    \t\t// because the geometry needs one set of uvs per face,\n\t    \t\t// we must generate a center vertex per face/segment\n\t\n\t    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = 0.5;\n\t    \t\t\tuv.y = 0.5;\n\t\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// save the index of the last center vertex\n\t    \t\tcenterIndexEnd = index;\n\t\n\t    \t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / radialSegments;\n\t    \t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\tvar cosTheta = Math.cos( theta );\n\t    \t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\tvertex.y = halfHeight * sign;\n\t    \t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar c = centerIndexStart + x;\n\t    \t\t\tvar i = centerIndexEnd + x;\n\t\n\t    \t\t\tif ( top === true ) {\n\t\n\t    \t\t\t\t// face top\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// face bottom\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// update counters\n\t    \t\t\tgroupCount += 3;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\t\n\t    /**\n\t     * @author abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t    ConeGeometry.prototype.constructor = ConeGeometry;\n\t\n\t    /*\n\t     * @author: abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeBufferGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderBufferGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tvar vertices = segments + 2;\n\t\n\t    \tvar positions = new Float32Array( vertices * 3 );\n\t    \tvar normals = new Float32Array( vertices * 3 );\n\t    \tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t    \t// center data is already zero, but need to set a few extras\n\t    \tnormals[ 2 ] = 1.0;\n\t    \tuvs[ 0 ] = 0.5;\n\t    \tuvs[ 1 ] = 0.5;\n\t\n\t    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t    \t\tpositions[ i ] = radius * Math.cos( segment );\n\t    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t    \t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t    \t\tindices.push( i, i + 1, 0 );\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\t\n\t    /**\n\t     * @author hughes\n\t     */\n\t\n\t    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    CircleGeometry.prototype = Object.create( Geometry.prototype );\n\t    CircleGeometry.prototype.constructor = CircleGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t     */\n\t\n\t    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    BoxGeometry.prototype = Object.create( Geometry.prototype );\n\t    BoxGeometry.prototype.constructor = BoxGeometry;\n\t\n\t\n\t\n\t    var Geometries = Object.freeze({\n\t    \tWireframeGeometry: WireframeGeometry,\n\t    \tParametricGeometry: ParametricGeometry,\n\t    \tTetrahedronGeometry: TetrahedronGeometry,\n\t    \tOctahedronGeometry: OctahedronGeometry,\n\t    \tIcosahedronGeometry: IcosahedronGeometry,\n\t    \tDodecahedronGeometry: DodecahedronGeometry,\n\t    \tPolyhedronGeometry: PolyhedronGeometry,\n\t    \tTubeGeometry: TubeGeometry,\n\t    \tTorusKnotGeometry: TorusKnotGeometry,\n\t    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t    \tTorusGeometry: TorusGeometry,\n\t    \tTorusBufferGeometry: TorusBufferGeometry,\n\t    \tTextGeometry: TextGeometry,\n\t    \tSphereBufferGeometry: SphereBufferGeometry,\n\t    \tSphereGeometry: SphereGeometry,\n\t    \tRingGeometry: RingGeometry,\n\t    \tRingBufferGeometry: RingBufferGeometry,\n\t    \tPlaneBufferGeometry: PlaneBufferGeometry,\n\t    \tPlaneGeometry: PlaneGeometry,\n\t    \tLatheGeometry: LatheGeometry,\n\t    \tLatheBufferGeometry: LatheBufferGeometry,\n\t    \tShapeGeometry: ShapeGeometry,\n\t    \tExtrudeGeometry: ExtrudeGeometry,\n\t    \tEdgesGeometry: EdgesGeometry,\n\t    \tConeGeometry: ConeGeometry,\n\t    \tConeBufferGeometry: ConeBufferGeometry,\n\t    \tCylinderGeometry: CylinderGeometry,\n\t    \tCylinderBufferGeometry: CylinderBufferGeometry,\n\t    \tCircleBufferGeometry: CircleBufferGeometry,\n\t    \tCircleGeometry: CircleGeometry,\n\t    \tBoxBufferGeometry: BoxBufferGeometry,\n\t    \tBoxGeometry: BoxGeometry\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ShadowMaterial() {\n\t\n\t    \tShaderMaterial.call( this, {\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t    \t\t\tUniformsLib[ \"lights\" ],\n\t    \t\t\t{\n\t    \t\t\t\topacity: { value: 1.0 }\n\t    \t\t\t}\n\t    \t\t] ),\n\t    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t    \t} );\n\t\n\t    \tthis.lights = true;\n\t    \tthis.transparent = true;\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\topacity: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tget: function () {\n\t    \t\t\t\treturn this.uniforms.opacity.value;\n\t    \t\t\t},\n\t    \t\t\tset: function ( value ) {\n\t    \t\t\t\tthis.uniforms.opacity.value = value;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\t\n\t    ShadowMaterial.prototype.isShadowMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function RawShaderMaterial( parameters ) {\n\t\n\t    \tShaderMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'RawShaderMaterial';\n\t\n\t    }\n\t\n\t    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\t\n\t    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MultiMaterial( materials ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.type = 'MultiMaterial';\n\t\n\t    \tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t    \tthis.visible = true;\n\t\n\t    }\n\t\n\t    MultiMaterial.prototype = {\n\t\n\t    \tconstructor: MultiMaterial,\n\t\n\t    \tisMultiMaterial: true,\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.2,\n\t    \t\t\t\ttype: 'material',\n\t    \t\t\t\tgenerator: 'MaterialExporter'\n\t    \t\t\t},\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\ttype: this.type,\n\t    \t\t\tmaterials: []\n\t    \t\t};\n\t\n\t    \t\tvar materials = this.materials;\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar material = materials[ i ].toJSON( meta );\n\t    \t\t\tdelete material.metadata;\n\t\n\t    \t\t\toutput.materials.push( material );\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.visible = this.visible;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\tvar material = new this.constructor();\n\t\n\t    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterial.visible = this.visible;\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  roughness: <float>,\n\t     *  metalness: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  roughnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  metalnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t     *  envMapIntensity: <float>\n\t     *\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshStandardMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.type = 'MeshStandardMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.roughness = 0.5;\n\t    \tthis.metalness = 0.5;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.roughnessMap = null;\n\t\n\t    \tthis.metalnessMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.envMapIntensity = 1.0;\n\t\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n\t    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\t\n\t    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\t\n\t    MeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.roughness = source.roughness;\n\t    \tthis.metalness = source.metalness;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.roughnessMap = source.roughnessMap;\n\t\n\t    \tthis.metalnessMap = source.metalnessMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  reflectivity: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshPhysicalMaterial( parameters ) {\n\t\n\t    \tMeshStandardMaterial.call( this );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.type = 'MeshPhysicalMaterial';\n\t\n\t    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t    \tthis.clearCoat = 0.0;\n\t    \tthis.clearCoatRoughness = 0.0;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\t    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\t\n\t    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\t\n\t    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.reflectivity = source.reflectivity;\n\t\n\t    \tthis.clearCoat = source.clearCoat;\n\t    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  specular: <hex>,\n\t     *  shininess: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshPhongMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshPhongMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.specular = new Color( 0x111111 );\n\t    \tthis.shininess = 30;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n\t    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\t\n\t    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\t\n\t    MeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.specular.copy( source.specular );\n\t    \tthis.shininess = source.shininess;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * parameters = {\n\t     *  opacity: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshNormalMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'MeshNormalMaterial';\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n\t    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\t\n\t    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\t\n\t    MeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshLambertMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshLambertMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n\t    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\t\n\t    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\t\n\t    MeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *\n\t     *  scale: <float>,\n\t     *  dashSize: <float>,\n\t     *  gapSize: <float>\n\t     * }\n\t     */\n\t\n\t    function LineDashedMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineDashedMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.scale = 1;\n\t    \tthis.dashSize = 3;\n\t    \tthis.gapSize = 1;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineDashedMaterial.prototype = Object.create( Material.prototype );\n\t    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\t\n\t    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\t\n\t    LineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t\n\t    \tthis.scale = source.scale;\n\t    \tthis.dashSize = source.dashSize;\n\t    \tthis.gapSize = source.gapSize;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t\n\t\n\t    var Materials = Object.freeze({\n\t    \tShadowMaterial: ShadowMaterial,\n\t    \tSpriteMaterial: SpriteMaterial,\n\t    \tRawShaderMaterial: RawShaderMaterial,\n\t    \tShaderMaterial: ShaderMaterial,\n\t    \tPointsMaterial: PointsMaterial,\n\t    \tMultiMaterial: MultiMaterial,\n\t    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t    \tMeshStandardMaterial: MeshStandardMaterial,\n\t    \tMeshPhongMaterial: MeshPhongMaterial,\n\t    \tMeshNormalMaterial: MeshNormalMaterial,\n\t    \tMeshLambertMaterial: MeshLambertMaterial,\n\t    \tMeshDepthMaterial: MeshDepthMaterial,\n\t    \tMeshBasicMaterial: MeshBasicMaterial,\n\t    \tLineDashedMaterial: LineDashedMaterial,\n\t    \tLineBasicMaterial: LineBasicMaterial,\n\t    \tMaterial: Material\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Cache = {\n\t\n\t    \tenabled: false,\n\t\n\t    \tfiles: {},\n\t\n\t    \tadd: function ( key, file ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t    \t\tthis.files[ key ] = file;\n\t\n\t    \t},\n\t\n\t    \tget: function ( key ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t    \t\treturn this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tremove: function ( key ) {\n\t\n\t    \t\tdelete this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tclear: function () {\n\t\n\t    \t\tthis.files = {};\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LoadingManager( onLoad, onProgress, onError ) {\n\t\n\t    \tvar scope = this;\n\t\n\t    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t    \tthis.onStart = undefined;\n\t    \tthis.onLoad = onLoad;\n\t    \tthis.onProgress = onProgress;\n\t    \tthis.onError = onError;\n\t\n\t    \tthis.itemStart = function ( url ) {\n\t\n\t    \t\titemsTotal ++;\n\t\n\t    \t\tif ( isLoading === false ) {\n\t\n\t    \t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tisLoading = true;\n\t\n\t    \t};\n\t\n\t    \tthis.itemEnd = function ( url ) {\n\t\n\t    \t\titemsLoaded ++;\n\t\n\t    \t\tif ( scope.onProgress !== undefined ) {\n\t\n\t    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t    \t\t\tisLoading = false;\n\t\n\t    \t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t    \t\t\t\tscope.onLoad();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.itemError = function ( url ) {\n\t\n\t    \t\tif ( scope.onError !== undefined ) {\n\t\n\t    \t\t\tscope.onError( url );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    exports.DefaultLoadingManager = new LoadingManager();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function XHRLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( XHRLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar cached = exports.Cache.get( url );\n\t\n\t    \t\tif ( cached !== undefined ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\tsetTimeout( function () {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, 0 );\n\t\n\t    \t\t\treturn cached;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar request = new XMLHttpRequest();\n\t    \t\trequest.open( 'GET', url, true );\n\t\n\t    \t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t    \t\t\tvar response = event.target.response;\n\t\n\t    \t\t\texports.Cache.add( url, response );\n\t\n\t    \t\t\tif ( this.status === 200 ) {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else if ( this.status === 0 ) {\n\t\n\t    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( onProgress !== undefined ) {\n\t\n\t    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t    \t\t\t\tonProgress( event );\n\t\n\t    \t\t\t}, false );\n\t\n\t    \t\t}\n\t\n\t    \t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t    \t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\t\n\t    \t\trequest.send( null );\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn request;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetResponseType: function ( value ) {\n\t\n\t    \t\tthis.responseType = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t     */\n\t\n\t    function CompressedTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( CompressedTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar images = [];\n\t\n\t    \t\tvar texture = new CompressedTexture();\n\t    \t\ttexture.image = images;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\timages[ i ] = {\n\t    \t\t\t\t\twidth: texDatas.width,\n\t    \t\t\t\t\theight: texDatas.height,\n\t    \t\t\t\t\tformat: texDatas.format,\n\t    \t\t\t\t\tmipmaps: texDatas.mipmaps\n\t    \t\t\t\t};\n\t\n\t    \t\t\t\tloaded += 1;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( Array.isArray( url ) ) {\n\t\n\t    \t\t\tvar loaded = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t    \t\t\t\tloadTexture( i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t    \t\t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttexture.image.width = texDatas.width;\n\t    \t\t\t\t\ttexture.image.height = texDatas.height;\n\t    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Nikos M. / https://github.com/foo123/\n\t     *\n\t     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t     */\n\t\n\t    var DataTextureLoader = BinaryTextureLoader;\n\t    function BinaryTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( BinaryTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texture = new DataTexture();\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar texData = scope._parser( buffer );\n\t\n\t    \t\t\tif ( ! texData ) return;\n\t\n\t    \t\t\tif ( undefined !== texData.image ) {\n\t\n\t    \t\t\t\ttexture.image = texData.image;\n\t\n\t    \t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t    \t\t\t\ttexture.image.width = texData.width;\n\t    \t\t\t\ttexture.image.height = texData.height;\n\t    \t\t\t\ttexture.image.data = texData.data;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\t\n\t    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\t\n\t    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t    \t\t\tif ( undefined !== texData.format ) {\n\t\n\t    \t\t\t\ttexture.format = texData.format;\n\t\n\t    \t\t\t}\n\t    \t\t\tif ( undefined !== texData.type ) {\n\t\n\t    \t\t\t\ttexture.type = texData.type;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t    \t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ImageLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( ImageLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t    \t\timage.onload = function () {\n\t\n\t    \t\t\timage.onload = null;\n\t\n\t    \t\t\tURL.revokeObjectURL( image.src );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( image );\n\t\n\t    \t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t};\n\t\n\t    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t    \t\t\timage.src = url;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar loader = new XHRLoader();\n\t    \t\t\tloader.setPath( this.path );\n\t    \t\t\tloader.setResponseType( 'blob' );\n\t    \t\t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\t\tloader.load( url, function ( blob ) {\n\t\n\t    \t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn image;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( CubeTextureLoader.prototype, {\n\t\n\t    \tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new CubeTexture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setPath( this.path );\n\t\n\t    \t\tvar loaded = 0;\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t    \t\t\t\ttexture.images[ i ] = image;\n\t\n\t    \t\t\t\tloaded ++;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, undefined, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t    \t\t\tloadTexture( i );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function TextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( TextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new Texture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.load( url, function ( image ) {\n\t\n\t    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t    \t\t\ttexture.image = image;\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad !== undefined ) {\n\t\n\t    \t\t\t\tonLoad( texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Light( color, intensity ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Light';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t    \tthis.receiveShadow = undefined;\n\t\n\t    }\n\t\n\t    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Light,\n\t\n\t    \tisLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.color.copy( source.color );\n\t    \t\tthis.intensity = source.intensity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.color = this.color.getHex();\n\t    \t\tdata.object.intensity = this.intensity;\n\t\n\t    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function HemisphereLight( skyColor, groundColor, intensity ) {\n\t\n\t    \tLight.call( this, skyColor, intensity );\n\t\n\t    \tthis.type = 'HemisphereLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.groundColor = new Color( groundColor );\n\t\n\t    }\n\t\n\t    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: HemisphereLight,\n\t\n\t    \tisHemisphereLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.groundColor.copy( source.groundColor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LightShadow( camera ) {\n\t\n\t    \tthis.camera = camera;\n\t\n\t    \tthis.bias = 0;\n\t    \tthis.radius = 1;\n\t\n\t    \tthis.mapSize = new Vector2( 512, 512 );\n\t\n\t    \tthis.map = null;\n\t    \tthis.matrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Object.assign( LightShadow.prototype, {\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.camera = source.camera.clone();\n\t\n\t    \t\tthis.bias = source.bias;\n\t    \t\tthis.radius = source.radius;\n\t\n\t    \t\tthis.mapSize.copy( source.mapSize );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\t\n\t    \t\tobject.camera = this.camera.toJSON( false ).object;\n\t    \t\tdelete object.camera.matrix;\n\t\n\t    \t\treturn object;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SpotLightShadow() {\n\t\n\t    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: SpotLightShadow,\n\t\n\t    \tisSpotLightShadow: true,\n\t\n\t    \tupdate: function ( light ) {\n\t\n\t    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n\t    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t    \t\tvar far = light.distance || 500;\n\t\n\t    \t\tvar camera = this.camera;\n\t\n\t    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t    \t\t\tcamera.fov = fov;\n\t    \t\t\tcamera.aspect = aspect;\n\t    \t\t\tcamera.far = far;\n\t    \t\t\tcamera.updateProjectionMatrix();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'SpotLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * Math.PI;\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / Math.PI;\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new SpotLightShadow();\n\t\n\t    }\n\t\n\t    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: SpotLight,\n\t\n\t    \tisSpotLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.angle = source.angle;\n\t    \t\tthis.penumbra = source.penumbra;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t\n\t    function PointLight( color, intensity, distance, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'PointLight';\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: PointLight,\n\t\n\t    \tisPointLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectionalLightShadow( light ) {\n\t\n\t    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: DirectionalLightShadow\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DirectionalLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'DirectionalLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tthis.shadow = new DirectionalLightShadow();\n\t\n\t    }\n\t\n\t    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: DirectionalLight,\n\t\n\t    \tisDirectionalLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AmbientLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'AmbientLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    }\n\t\n\t    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: AmbientLight,\n\t\n\t    \tisAmbientLight: true,\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    exports.AnimationUtils = {\n\t\n\t    \t// same as Array.prototype.slice, but also works on typed arrays\n\t    \tarraySlice: function( array, from, to ) {\n\t\n\t    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\t\n\t    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.slice( from, to );\n\t\n\t    \t},\n\t\n\t    \t// converts an array to a specific type\n\t    \tconvertArray: function( array, type, forceClone ) {\n\t\n\t    \t\tif ( ! array || // let 'undefined' and 'null' pass\n\t    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t    \t\t\treturn new type( array ); // create typed array\n\t\n\t    \t\t}\n\t\n\t    \t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t    \t},\n\t\n\t    \tisTypedArray: function( object ) {\n\t\n\t    \t\treturn ArrayBuffer.isView( object ) &&\n\t    \t\t\t\t! ( object instanceof DataView );\n\t\n\t    \t},\n\t\n\t    \t// returns an array by which times and values can be sorted\n\t    \tgetKeyframeOrder: function( times ) {\n\t\n\t    \t\tfunction compareTime( i, j ) {\n\t\n\t    \t\t\treturn times[ i ] - times[ j ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar n = times.length;\n\t    \t\tvar result = new Array( n );\n\t    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t    \t\tresult.sort( compareTime );\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t    \tsortedArray: function( values, stride, order ) {\n\t\n\t    \t\tvar nValues = values.length;\n\t    \t\tvar result = new values.constructor( nValues );\n\t\n\t    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t    \t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// function for parsing AOS keyframe formats\n\t    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t    \t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( key === undefined ) return; // no data\n\t\n\t    \t\tvar value = key[ valuePropertyName ];\n\t    \t\tif ( value === undefined ) return; // no data\n\t\n\t    \t\tif ( Array.isArray( value ) ) {\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else if ( value.toArray !== undefined ) {\n\t    \t\t\t// ...assume THREE.Math-ish\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else {\n\t    \t\t\t// otherwise push as-is\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push( value );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Abstract base class of interpolants over parametric samples.\n\t     *\n\t     * The parameter domain is one dimensional, typically the time or a path\n\t     * along a curve defined by the data.\n\t     *\n\t     * The sample values can have any dimensionality and derived classes may\n\t     * apply special interpretations to the data.\n\t     *\n\t     * This class provides the interval seek in a Template Method, deferring\n\t     * the actual interpolation to derived classes.\n\t     *\n\t     * Time complexity is O(1) for linear access crossing at most two points\n\t     * and O(log N) for random access, where N is the number of positions.\n\t     *\n\t     * References:\n\t     *\n\t     * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function Interpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tthis.parameterPositions = parameterPositions;\n\t    \tthis._cachedIndex = 0;\n\t\n\t    \tthis.resultBuffer = resultBuffer !== undefined ?\n\t    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t    \tthis.sampleValues = sampleValues;\n\t    \tthis.valueSize = sampleSize;\n\t\n\t    }\n\t\n\t    Interpolant.prototype = {\n\t\n\t    \tconstructor: Interpolant,\n\t\n\t    \tevaluate: function( t ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\ti1 = this._cachedIndex,\n\t\n\t    \t\t\tt1 = pp[   i1   ],\n\t    \t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\tvalidate_interval: {\n\t\n\t    \t\t\tseek: {\n\t\n\t    \t\t\t\tvar right;\n\t\n\t    \t\t\t\tlinear_scan: {\n\t    //- See http://jsperf.com/comparison-to-undefined/3\n\t    //- slower code:\n\t    //-\n\t    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t    \t\t\t\t\t\t\t\t// after end\n\t\n\t    \t\t\t\t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt0 = t1;\n\t    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the right side of the index\n\t    \t\t\t\t\t\tright = pp.length;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    //- slower code:\n\t    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t    \t\t\t\t\t\t// looping?\n\t\n\t    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t    \t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t    \t\t\t\t\t\t\tt0 = t1global;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// linear reverse scan\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\t// before start\n\t\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt1 = t0;\n\t    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the left side of the index\n\t    \t\t\t\t\t\tright = i1;\n\t    \t\t\t\t\t\ti1 = 0;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// the interval is valid\n\t\n\t    \t\t\t\t\tbreak validate_interval;\n\t\n\t    \t\t\t\t} // linear scan\n\t\n\t    \t\t\t\t// binary search\n\t\n\t    \t\t\t\twhile ( i1 < right ) {\n\t\n\t    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t    \t\t\t\t\t\tright = mid;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\ti1 = mid + 1;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tt1 = pp[   i1   ];\n\t    \t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\t\t\t// check boundary cases, again\n\t\n\t    \t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} // seek\n\t\n\t    \t\t\tthis._cachedIndex = i1;\n\t\n\t    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t    \t\t} // validate_interval\n\t\n\t    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t    \t},\n\t\n\t    \tsettings: null, // optional, subclass-specific settings structure\n\t    \t// Note: The indirection allows central control of many interpolants.\n\t\n\t    \t// --- Protected interface\n\t\n\t    \tDefaultSettings_: {},\n\t\n\t    \tgetSettings_: function() {\n\t\n\t    \t\treturn this.settings || this.DefaultSettings_;\n\t\n\t    \t},\n\t\n\t    \tcopySampleValue_: function( index ) {\n\t\n\t    \t\t// copies a sample value to the result buffer\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = index * stride;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// Template methods for derived classes:\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tthrow new Error( \"call to abstract method\" );\n\t    \t\t// implementations shall return this.resultBuffer\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\t// empty\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Interpolant.prototype, {\n\t\n\t    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_,\n\t\n\t    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_\n\t\n\t    } );\n\t\n\t    /**\n\t     * Fast and simple cubic spline interpolant.\n\t     *\n\t     * It was derived from a Hermitian construction setting the first derivative\n\t     * at each sample position to the linear slope between neighboring positions\n\t     * over their parameter interval.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function CubicInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    \tthis._weightPrev = -0;\n\t    \tthis._offsetPrev = -0;\n\t    \tthis._weightNext = -0;\n\t    \tthis._offsetNext = -0;\n\t\n\t    }\n\t\n\t    CubicInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: CubicInterpolant,\n\t\n\t    \tDefaultSettings_: {\n\t\n\t    \t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\tendingEnd:\t\tZeroCurvatureEnding\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\tiPrev = i1 - 2,\n\t    \t\t\tiNext = i1 + 1,\n\t\n\t    \t\t\ttPrev = pp[ iPrev ],\n\t    \t\t\ttNext = pp[ iNext ];\n\t\n\t    \t\tif ( tPrev === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(t0) = 0\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiPrev = pp.length - 2;\n\t    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = t1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tNext === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(tN) = 0\n\t    \t\t\t\t\tiNext = i1;\n\t    \t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiNext = 1;\n\t    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t    \t\t\t\t\tiNext = i1 - 1;\n\t    \t\t\t\t\ttNext = t0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t    \t\t\tstride = this.valueSize;\n\t\n\t    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t    \t\tthis._offsetPrev = iPrev * stride;\n\t    \t\tthis._offsetNext = iNext * stride;\n\t\n\t    \t},\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tpp = p * p,\n\t    \t\t\tppp = pp * p;\n\t\n\t    \t\t// evaluate polynomials\n\t\n\t    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t    \t\t// combine data linearly\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tsP * values[ oP + i ] +\n\t    \t\t\t\t\ts0 * values[ o0 + i ] +\n\t    \t\t\t\t\ts1 * values[ o1 + i ] +\n\t    \t\t\t\t\tsN * values[ oN + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     */\n\t\n\t    function LinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    LinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: LinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset1 = i1 * stride,\n\t    \t\t\toffset0 = offset1 - stride,\n\t\n\t    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tweight0 = 1 - weight1;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Interpolant that evaluates to the sample value at the position preceeding\n\t     * the parameter.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function DiscreteInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    DiscreteInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: DiscreteInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var KeyframeTrackPrototype;\n\t\n\t    KeyframeTrackPrototype = {\n\t\n\t    \tTimeBufferType: Float32Array,\n\t    \tValueBufferType: Float32Array,\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t    \t\treturn new DiscreteInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new LinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t    \t\treturn new CubicInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tsetInterpolation: function( interpolation ) {\n\t\n\t    \t\tvar factoryMethod;\n\t\n\t    \t\tswitch ( interpolation ) {\n\t\n\t    \t\t\tcase InterpolateDiscrete:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateLinear:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateSmooth:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( factoryMethod === undefined ) {\n\t\n\t    \t\t\tvar message = \"unsupported interpolation for \" +\n\t    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t    \t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t    \t\t\t\t// fall back to default, unless the default itself is messed up\n\t    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tconsole.warn( message );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.createInterpolant = factoryMethod;\n\t\n\t    \t},\n\t\n\t    \tgetInterpolation: function() {\n\t\n\t    \t\tswitch ( this.createInterpolant ) {\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t    \t\t\t\treturn InterpolateDiscrete;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t    \t\t\t\treturn InterpolateLinear;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t    \t\t\t\treturn InterpolateSmooth;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetValueSize: function() {\n\t\n\t    \t\treturn this.values.length / this.times.length;\n\t\n\t    \t},\n\t\n\t    \t// move all keyframes either forwards or backwards in time\n\t    \tshift: function( timeOffset ) {\n\t\n\t    \t\tif( timeOffset !== 0.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t    \tscale: function( timeScale ) {\n\t\n\t    \t\tif( timeScale !== 1.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t    \ttrim: function( startTime, endTime ) {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tnKeys = times.length,\n\t    \t\t\tfrom = 0,\n\t    \t\t\tto = nKeys - 1;\n\t\n\t    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t    \t\t++ to; // inclusive -> exclusive bound\n\t\n\t    \t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t    \t\t\tvar stride = this.getValueSize();\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n\t    \t\t\tthis.values = exports.AnimationUtils.\n\t    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t    \tvalidate: function() {\n\t\n\t    \t\tvar valid = true;\n\t\n\t    \t\tvar valueSize = this.getValueSize();\n\t    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t    \t\t\tconsole.error( \"invalid value size in track\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t\n\t    \t\t\tnKeys = times.length;\n\t\n\t    \t\tif( nKeys === 0 ) {\n\t\n\t    \t\t\tconsole.error( \"track is empty\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar prevTime = null;\n\t\n\t    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t    \t\t\tvar currTime = times[ i ];\n\t\n\t    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprevTime = currTime;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( values !== undefined ) {\n\t\n\t    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tvar value = values[ i ];\n\t\n\t    \t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t    \t\t\t\t\t\tvalid = false;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn valid;\n\t\n\t    \t},\n\t\n\t    \t// removes equivalent sequential keys as common in morph target sequences\n\t    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t    \toptimize: function() {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t    \t\t\tstride = this.getValueSize(),\n\t\n\t    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\n\t    \t\t\twriteIndex = 1,\n\t    \t\t\tlastIndex = times.length - 1;\n\t\n\t    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\t\n\t    \t\t\tvar keep = false;\n\t\n\t    \t\t\tvar time = times[ i ];\n\t    \t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t    \t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t    \t\t\t\tif ( ! smoothInterpolation ) {\n\t\n\t    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\n\t    \t\t\t\t\tvar offset = i * stride,\n\t    \t\t\t\t\t\toffsetP = offset - stride,\n\t    \t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t    \t\t\t\t\t\t\tkeep = true;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else keep = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// in-place compaction\n\t\n\t    \t\t\tif ( keep ) {\n\t\n\t    \t\t\t\tif ( i !== writeIndex ) {\n\t\n\t    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t    \t\t\t\t\tvar readOffset = i * stride,\n\t    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t++ writeIndex;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// flush last keyframe (compaction looks ahead)\n\t\n\t    \t\tif ( lastIndex > 0 ) {\n\t\n\t    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\t\n\t    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t++ writeIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( writeIndex !== times.length ) {\n\t\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\t\n\t    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t    \tif( times === undefined || times.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t    \t}\n\t\n\t    \tthis.name = name;\n\t\n\t    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t    \tthis.validate();\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    /**\n\t     *\n\t     * A Track of vectored keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    VectorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: VectorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'vector'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     * Spherical linear unit quaternion interpolant.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionLinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    QuaternionLinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: QuaternionLinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset = i1 * stride,\n\t\n\t    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t    \t\t\tQuaternion.slerpFlat( result, 0,\n\t    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of quaternion keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    QuaternionKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: QuaternionKeyframeTrack,\n\t\n\t    \tValueTypeName: 'quaternion',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new QuaternionLinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of numeric keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    NumberKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: NumberKeyframeTrack,\n\t\n\t    \tValueTypeName: 'number',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track that interpolates Strings\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function StringKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    StringKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: StringKeyframeTrack,\n\t\n\t    \tValueTypeName: 'string',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of Boolean keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function BooleanKeyframeTrack( name, times, values ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values );\n\t\n\t    }\n\t\n\t    BooleanKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: BooleanKeyframeTrack,\n\t\n\t    \tValueTypeName: 'bool',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    \t// Note: Actually this track could have a optimized / compressed\n\t    \t// representation of a single value and a custom interpolant that\n\t    \t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of keyframe values that represent color.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    ColorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: ColorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'color'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t\n\t    \t// Note: Very basic implementation and nothing special yet.\n\t    \t// However, this is the place for color space parameterization.\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A timed sequence of keyframes for a specific property.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function KeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.apply( this, arguments );\n\t\n\t    }\n\t\n\t    KeyframeTrack.prototype = KeyframeTrackPrototype;\n\t    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( KeyframeTrack, {\n\t\n\t    \t// Serialization (in static context, because of constructor invocation\n\t    \t// and automatic invocation of .toJSON):\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tif( json.type === undefined ) {\n\t\n\t    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t    \t\tif ( json.times === undefined ) {\n\t\n\t    \t\t\tvar times = [], values = [];\n\t\n\t    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t    \t\t\tjson.times = times;\n\t    \t\t\tjson.values = values;\n\t\n\t    \t\t}\n\t\n\t    \t\t// derived classes can define a static parse method\n\t    \t\tif ( trackType.parse !== undefined ) {\n\t\n\t    \t\t\treturn trackType.parse( json );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we asssume a constructor compatible with the base\n\t    \t\t\treturn new trackType(\n\t    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function( track ) {\n\t\n\t    \t\tvar trackType = track.constructor;\n\t\n\t    \t\tvar json;\n\t\n\t    \t\t// derived classes can define a static toJSON method\n\t    \t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t    \t\t\tjson = trackType.toJSON( track );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we assume the data can be serialized as-is\n\t    \t\t\tjson = {\n\t\n\t    \t\t\t\t'name': track.name,\n\t    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n\t    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\tvar interpolation = track.getInterpolation();\n\t\n\t    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t    \t\t\t\tjson.interpolation = interpolation;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t    \t\tswitch( typeName.toLowerCase() ) {\n\t\n\t    \t\t\tcase \"scalar\":\n\t    \t\t\tcase \"double\":\n\t    \t\t\tcase \"float\":\n\t    \t\t\tcase \"number\":\n\t    \t\t\tcase \"integer\":\n\t\n\t    \t\t\t\treturn NumberKeyframeTrack;\n\t\n\t    \t\t\tcase \"vector\":\n\t    \t\t\tcase \"vector2\":\n\t    \t\t\tcase \"vector3\":\n\t    \t\t\tcase \"vector4\":\n\t\n\t    \t\t\t\treturn VectorKeyframeTrack;\n\t\n\t    \t\t\tcase \"color\":\n\t\n\t    \t\t\t\treturn ColorKeyframeTrack;\n\t\n\t    \t\t\tcase \"quaternion\":\n\t\n\t    \t\t\t\treturn QuaternionKeyframeTrack;\n\t\n\t    \t\t\tcase \"bool\":\n\t    \t\t\tcase \"boolean\":\n\t\n\t    \t\t\t\treturn BooleanKeyframeTrack;\n\t\n\t    \t\t\tcase \"string\":\n\t\n\t    \t\t\t\treturn StringKeyframeTrack;\n\t\n\t    \t\t}\n\t\n\t    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Reusable set of Tracks that represent an animation.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    function AnimationClip( name, duration, tracks ) {\n\t\n\t    \tthis.name = name;\n\t    \tthis.tracks = tracks;\n\t    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// this means it should figure out its duration by scanning the tracks\n\t    \tif ( this.duration < 0 ) {\n\t\n\t    \t\tthis.resetDuration();\n\t\n\t    \t}\n\t\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    AnimationClip.prototype = {\n\t\n\t    \tconstructor: AnimationClip,\n\t\n\t    \tresetDuration: function() {\n\t\n\t    \t\tvar tracks = this.tracks,\n\t    \t\t\tduration = 0;\n\t\n\t    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar track = this.tracks[ i ];\n\t\n\t    \t\t\tduration = Math.max(\n\t    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.duration = duration;\n\t\n\t    \t},\n\t\n\t    \ttrim: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \toptimize: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].optimize();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( AnimationClip, {\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tjsonTracks = json.tracks,\n\t    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\t\n\t    \t},\n\t\n\t\n\t    \ttoJSON: function( clip ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tclipTracks = clip.tracks;\n\t\n\t    \t\tvar json = {\n\t\n\t    \t\t\t'name': clip.name,\n\t    \t\t\t'duration': clip.duration,\n\t    \t\t\t'tracks': tracks\n\t\n\t    \t\t};\n\t\n\t    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t\n\t    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t    \t\tvar numMorphTargets = morphTargetSequence.length;\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t    \t\t\tvar times = [];\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\ttimes.push(\n\t    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t    \t\t\t\t\ti,\n\t    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t    \t\t\tvalues.push( 0, 1, 0 );\n\t\n\t    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n\t    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n\t    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\t\n\t    \t\t\t// if there is a key at the first frame, duplicate it as the\n\t    \t\t\t// last frame as well for perfect loop.\n\t    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t    \t\t\t\ttimes.push( numMorphTargets );\n\t    \t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttracks.push(\n\t    \t\t\t\t\tnew NumberKeyframeTrack(\n\t    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t    \t\t\t\t\t\ttimes, values\n\t    \t\t\t\t\t).scale( 1.0 / fps ) );\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( name, -1, tracks );\n\t\n\t    \t},\n\t\n\t    \tfindByName: function( objectOrClipArray, name ) {\n\t\n\t    \t\tvar clipArray = objectOrClipArray;\n\t\n\t    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t    \t\t\tvar o = objectOrClipArray;\n\t    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t    \t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t    \t\t\t\treturn clipArray[ i ];\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t    \t\tvar animationToMorphTargets = {};\n\t\n\t    \t\t// tested with https://regex101.com/ on trick sequences\n\t    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t    \t\t// sort morph target names into animation groups based\n\t    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar morphTarget = morphTargets[ i ];\n\t    \t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t    \t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t    \t\t\t\tvar name = parts[ 1 ];\n\t\n\t    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t    \t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clips = [];\n\t\n\t    \t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn clips;\n\t\n\t    \t},\n\t\n\t    \t// parse the animation.hierarchy format\n\t    \tparseAnimation: function( animation, bones ) {\n\t\n\t    \t\tif ( ! animation ) {\n\t\n\t    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar addNonemptyTrack = function(\n\t    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t    \t\t\t// only return track if there are actually keys.\n\t    \t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t    \t\t\t\tvar times = [];\n\t    \t\t\t\tvar values = [];\n\t\n\t    \t\t\t\texports.AnimationUtils.flattenJSON(\n\t    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t    \t\t\t\t// empty keys are filtered out, so check again\n\t    \t\t\t\tif ( times.length !== 0 ) {\n\t\n\t    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tvar clipName = animation.name || 'default';\n\t    \t\t// automatic length determination in AnimationClip.\n\t    \t\tvar duration = animation.length || -1;\n\t    \t\tvar fps = animation.fps || 30;\n\t\n\t    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t    \t\t\t// skip empty tracks\n\t    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t    \t\t\t// process morph targets in a way exactly compatible\n\t    \t\t\t// with AnimationHandler.init( animation )\n\t    \t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t    \t\t\t\t// figure out all morph targets used in this track\n\t    \t\t\t\tvar morphTargetNames = {};\n\t    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// create a track for each morph target with all zero\n\t    \t\t\t\t// morphTargetInfluences except for the keys in which\n\t    \t\t\t\t// the morphTarget is named.\n\t    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t    \t\t\t\t\tvar times = [];\n\t    \t\t\t\t\tvar values = [];\n\t\n\t    \t\t\t\t\tfor ( var m = 0;\n\t    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t    \t\t\t\t\t\ttimes.push( animationKey.time );\n\t    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t    \t\t\t} else {\n\t    \t\t\t\t// ...assume skeletal animation\n\t\n\t    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tracks.length === 0 ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\t\n\t    \t\treturn clip;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MaterialLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.textures = {};\n\t\n\t    }\n\t\n\t    Object.assign( MaterialLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTextures: function ( value ) {\n\t\n\t    \t\tthis.textures = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar textures = this.textures;\n\t\n\t    \t\tfunction getTexture( name ) {\n\t\n\t    \t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn textures[ name ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar material = new Materials[ json.type ]();\n\t\n\t    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t    \t\tif ( json.name !== undefined ) material.name = json.name;\n\t    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t    \t\tif ( json.side !== undefined ) material.side = json.side;\n\t    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\n\t    \t\t// for PointsMaterial\n\t\n\t    \t\tif ( json.size !== undefined ) material.size = json.size;\n\t    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t    \t\t// maps\n\t\n\t    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\n\t    \t\tif ( json.alphaMap !== undefined ) {\n\t\n\t    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t    \t\t\tmaterial.transparent = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t    \t\tif ( json.normalScale !== undefined ) {\n\t\n\t    \t\t\tvar normalScale = json.normalScale;\n\t\n\t    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\t\n\t    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\n\t    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\n\t    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t    \t\t// MultiMaterial\n\t\n\t    \t\tif ( json.materials !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometryLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometryLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar geometry = new BufferGeometry();\n\t\n\t    \t\tvar index = json.data.index;\n\t\n\t    \t\tvar TYPED_ARRAYS = {\n\t    \t\t\t'Int8Array': Int8Array,\n\t    \t\t\t'Uint8Array': Uint8Array,\n\t    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t    \t\t\t'Int16Array': Int16Array,\n\t    \t\t\t'Uint16Array': Uint16Array,\n\t    \t\t\t'Int32Array': Int32Array,\n\t    \t\t\t'Uint32Array': Uint32Array,\n\t    \t\t\t'Float32Array': Float32Array,\n\t    \t\t\t'Float64Array': Float64Array\n\t    \t\t};\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = json.data.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t    \t\tif ( groups !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== undefined ) {\n\t\n\t    \t\t\tvar center = new Vector3();\n\t\n\t    \t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Loader() {\n\t\n\t    \tthis.onLoadStart = function () {};\n\t    \tthis.onLoadProgress = function () {};\n\t    \tthis.onLoadComplete = function () {};\n\t\n\t    }\n\t\n\t    Loader.prototype = {\n\t\n\t    \tconstructor: Loader,\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \textractUrlBase: function ( url ) {\n\t\n\t    \t\tvar parts = url.split( '/' );\n\t\n\t    \t\tif ( parts.length === 1 ) return './';\n\t\n\t    \t\tparts.pop();\n\t\n\t    \t\treturn parts.join( '/' ) + '/';\n\t\n\t    \t},\n\t\n\t    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tcreateMaterial: ( function () {\n\t\n\t    \t\tvar color, textureLoader, materialLoader;\n\t\n\t    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t    \t\t\tif ( color === undefined ) color = new Color();\n\t    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\t\n\t    \t\t\t// convert from old material format\n\t\n\t    \t\t\tvar textures = {};\n\t\n\t    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t    \t\t\t\tvar fullPath = texturePath + path;\n\t    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\t\n\t    \t\t\t\tvar texture;\n\t\n\t    \t\t\t\tif ( loader !== null ) {\n\t\n\t    \t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( repeat !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( offset !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( wrap !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\t\n\t    \t\t\t\ttextures[ uuid ] = texture;\n\t\n\t    \t\t\t\treturn uuid;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tvar json = {\n\t    \t\t\t\tuuid: exports.Math.generateUUID(),\n\t    \t\t\t\ttype: 'MeshLambertMaterial'\n\t    \t\t\t};\n\t\n\t    \t\t\tfor ( var name in m ) {\n\t\n\t    \t\t\t\tvar value = m[ name ];\n\t\n\t    \t\t\t\tswitch ( name ) {\n\t    \t\t\t\t\tcase 'DbgColor':\n\t    \t\t\t\t\tcase 'DbgIndex':\n\t    \t\t\t\t\tcase 'opticalDensity':\n\t    \t\t\t\t\tcase 'illumination':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'DbgName':\n\t    \t\t\t\t\t\tjson.name = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'blending':\n\t    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorAmbient':\n\t    \t\t\t\t\tcase 'mapAmbient':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorDiffuse':\n\t    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorSpecular':\n\t    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorEmissive':\n\t    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'specularCoef':\n\t    \t\t\t\t\t\tjson.shininess = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'shading':\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuse':\n\t    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuseRepeat':\n\t    \t\t\t\t\tcase 'mapDiffuseOffset':\n\t    \t\t\t\t\tcase 'mapDiffuseWrap':\n\t    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissive':\n\t    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissiveRepeat':\n\t    \t\t\t\t\tcase 'mapEmissiveOffset':\n\t    \t\t\t\t\tcase 'mapEmissiveWrap':\n\t    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLight':\n\t    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLightRepeat':\n\t    \t\t\t\t\tcase 'mapLightOffset':\n\t    \t\t\t\t\tcase 'mapLightWrap':\n\t    \t\t\t\t\tcase 'mapLightAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAO':\n\t    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAORepeat':\n\t    \t\t\t\t\tcase 'mapAOOffset':\n\t    \t\t\t\t\tcase 'mapAOWrap':\n\t    \t\t\t\t\tcase 'mapAOAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBump':\n\t    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpScale':\n\t    \t\t\t\t\t\tjson.bumpScale = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpRepeat':\n\t    \t\t\t\t\tcase 'mapBumpOffset':\n\t    \t\t\t\t\tcase 'mapBumpWrap':\n\t    \t\t\t\t\tcase 'mapBumpAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormal':\n\t    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalFactor':\n\t    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalRepeat':\n\t    \t\t\t\t\tcase 'mapNormalOffset':\n\t    \t\t\t\t\tcase 'mapNormalWrap':\n\t    \t\t\t\t\tcase 'mapNormalAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecular':\n\t    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecularRepeat':\n\t    \t\t\t\t\tcase 'mapSpecularOffset':\n\t    \t\t\t\t\tcase 'mapSpecularWrap':\n\t    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalness':\n\t    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalnessRepeat':\n\t    \t\t\t\t\tcase 'mapMetalnessOffset':\n\t    \t\t\t\t\tcase 'mapMetalnessWrap':\n\t    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughness':\n\t    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughnessRepeat':\n\t    \t\t\t\t\tcase 'mapRoughnessOffset':\n\t    \t\t\t\t\tcase 'mapRoughnessWrap':\n\t    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlpha':\n\t    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlphaRepeat':\n\t    \t\t\t\t\tcase 'mapAlphaOffset':\n\t    \t\t\t\t\tcase 'mapAlphaWrap':\n\t    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'flipSided':\n\t    \t\t\t\t\t\tjson.side = BackSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'doubleSided':\n\t    \t\t\t\t\t\tjson.side = DoubleSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'transparency':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t    \t\t\t\t\t\tjson.opacity = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'depthTest':\n\t    \t\t\t\t\tcase 'depthWrite':\n\t    \t\t\t\t\tcase 'colorWrite':\n\t    \t\t\t\t\tcase 'opacity':\n\t    \t\t\t\t\tcase 'reflectivity':\n\t    \t\t\t\t\tcase 'transparent':\n\t    \t\t\t\t\tcase 'visible':\n\t    \t\t\t\t\tcase 'wireframe':\n\t    \t\t\t\t\t\tjson[ name ] = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'vertexColors':\n\t    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tdefault:\n\t    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t    \t\t\tmaterialLoader.setTextures( textures );\n\t\n\t    \t\t\treturn materialLoader.parse( json );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    Loader.Handlers = {\n\t\n\t    \thandlers: [],\n\t\n\t    \tadd: function ( regex, loader ) {\n\t\n\t    \t\tthis.handlers.push( regex, loader );\n\t\n\t    \t},\n\t\n\t    \tget: function ( file ) {\n\t\n\t    \t\tvar handlers = this.handlers;\n\t\n\t    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t    \t\t\tvar regex = handlers[ i ];\n\t    \t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t    \t\t\tif ( regex.test( file ) ) {\n\t\n\t    \t\t\t\treturn loader;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function JSONLoader( manager ) {\n\t\n\t    \tif ( typeof manager === 'boolean' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t    \t\tmanager = undefined;\n\t\n\t    \t}\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \tthis.withCredentials = false;\n\t\n\t    }\n\t\n\t    Object.assign( JSONLoader.prototype, {\n\t\n\t    \tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json = JSON.parse( text );\n\t    \t\t\tvar metadata = json.metadata;\n\t\n\t    \t\t\tif ( metadata !== undefined ) {\n\t\n\t    \t\t\t\tvar type = metadata.type;\n\t\n\t    \t\t\t\tif ( type !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar object = scope.parse( json, texturePath );\n\t    \t\t\tonLoad( object.geometry, object.materials );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, texturePath ) {\n\t\n\t    \t\tvar geometry = new Geometry(),\n\t    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t    \t\tparseModel( scale );\n\t\n\t    \t\tparseSkin();\n\t    \t\tparseMorphing( scale );\n\t    \t\tparseAnimations();\n\t\n\t    \t\tgeometry.computeFaceNormals();\n\t    \t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\tfunction parseModel( scale ) {\n\t\n\t    \t\t\tfunction isBitSet( value, position ) {\n\t\n\t    \t\t\t\treturn value & ( 1 << position );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar i, j, fi,\n\t\n\t    \t\t\toffset, zLength,\n\t\n\t    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t    \t\t\ttype,\n\t    \t\t\tisQuad,\n\t    \t\t\thasMaterial,\n\t    \t\t\thasFaceVertexUv,\n\t    \t\t\thasFaceNormal, hasFaceVertexNormal,\n\t    \t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t    \t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t    \t\t\tuvLayer, uv, u, v,\n\t\n\t    \t\t\tfaces = json.faces,\n\t    \t\t\tvertices = json.vertices,\n\t    \t\t\tnormals = json.normals,\n\t    \t\t\tcolors = json.colors,\n\t\n\t    \t\t\tnUvLayers = 0;\n\t\n\t    \t\t\tif ( json.uvs !== undefined ) {\n\t\n\t    \t\t\t\t// disregard empty arrays\n\t\n\t    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = vertices.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\tvertex = new Vector3();\n\t\n\t    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t    \t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = faces.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t    \t\t\t\tisQuad              = isBitSet( type, 0 );\n\t    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t    \t\t\t\tif ( isQuad ) {\n\t\n\t    \t\t\t\t\tfaceA = new Face3();\n\t    \t\t\t\t\tfaceA.a = faces[ offset ];\n\t    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\tfaceB = new Face3();\n\t    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\toffset += 4;\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tfaceA.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\tfaceA.color.setHex( hex );\n\t    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( faceA );\n\t    \t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface = new Face3();\n\t    \t\t\t\t\tface.a = faces[ offset ++ ];\n\t    \t\t\t\t\tface.b = faces[ offset ++ ];\n\t    \t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tface.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( face );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseSkin() {\n\t\n\t    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t    \t\t\tif ( json.skinWeights ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.skinIndices ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.bones = json.bones;\n\t\n\t    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseMorphing( scale ) {\n\t\n\t    \t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t    \t\t\t\t\t\tvar vertex = new Vector3();\n\t    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t    \t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseAnimations() {\n\t\n\t    \t\t\tvar outputAnimations = [];\n\t\n\t    \t\t\t// parse old style Bone/Hierarchy animations\n\t    \t\t\tvar animations = [];\n\t\n\t    \t\t\tif ( json.animation !== undefined ) {\n\t\n\t    \t\t\t\tanimations.push( json.animation );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.animations !== undefined ) {\n\t\n\t    \t\t\t\tif ( json.animations.length ) {\n\t\n\t    \t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tanimations.push( json.animations );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// parse implicit morph animations\n\t    \t\t\tif ( geometry.morphTargets ) {\n\t\n\t    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t    \t\t\treturn { geometry: geometry };\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t    \t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ObjectLoader ( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.texturePath = '';\n\t\n\t    }\n\t\n\t    Object.assign( ObjectLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.texturePath === '' ) {\n\t\n\t    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, onLoad ) {\n\t\n\t    \t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t    \t\tvar images = this.parseImages( json.images, function () {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t} );\n\t\n\t    \t\tvar textures  = this.parseTextures( json.textures, images );\n\t    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t    \t\tif ( json.animations ) {\n\t\n\t    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn object;\n\t\n\t    \t},\n\t\n\t    \tparseGeometries: function ( json ) {\n\t\n\t    \t\tvar geometries = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar geometryLoader = new JSONLoader();\n\t    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar geometry;\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\t\tcase 'PlaneGeometry':\n\t    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BoxGeometry':\n\t    \t\t\t\t\tcase 'BoxBufferGeometry':\n\t    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.depth,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.depthSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CircleGeometry':\n\t    \t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CylinderGeometry':\n\t    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radiusTop,\n\t    \t\t\t\t\t\t\tdata.radiusBottom,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'ConeGeometry':\n\t    \t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'SphereGeometry':\n\t    \t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'DodecahedronGeometry':\n\t    \t\t\t\t\tcase 'IcosahedronGeometry':\n\t    \t\t\t\t\tcase 'OctahedronGeometry':\n\t    \t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.detail\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'RingGeometry':\n\t    \t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.innerRadius,\n\t    \t\t\t\t\t\t\tdata.outerRadius,\n\t    \t\t\t\t\t\t\tdata.thetaSegments,\n\t    \t\t\t\t\t\t\tdata.phiSegments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusGeometry':\n\t    \t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.arc\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusKnotGeometry':\n\t    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.p,\n\t    \t\t\t\t\t\t\tdata.q\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'LatheGeometry':\n\t    \t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.points,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'Geometry':\n\t\n\t    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t    \t\t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometries;\n\t\n\t    \t},\n\t\n\t    \tparseMaterials: function ( json, textures ) {\n\t\n\t    \t\tvar materials = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar loader = new MaterialLoader();\n\t    \t\t\tloader.setTextures( textures );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar material = loader.parse( json[ i ] );\n\t    \t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn materials;\n\t\n\t    \t},\n\t\n\t    \tparseAnimations: function ( json ) {\n\t\n\t    \t\tvar animations = [];\n\t\n\t    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\t\n\t    \t\t\tanimations.push( clip );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn animations;\n\t\n\t    \t},\n\t\n\t    \tparseImages: function ( json, onLoad ) {\n\t\n\t    \t\tvar scope = this;\n\t    \t\tvar images = {};\n\t\n\t    \t\tfunction loadImage( url ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\treturn loader.load( url, function () {\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, undefined, function () {\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t    \t\t\tvar manager = new LoadingManager( onLoad );\n\t\n\t    \t\t\tvar loader = new ImageLoader( manager );\n\t    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar image = json[ i ];\n\t    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn images;\n\t\n\t    \t},\n\t\n\t    \tparseTextures: function ( json, images ) {\n\t\n\t    \t\tfunction parseConstant( value, type ) {\n\t\n\t    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t    \t\t\treturn type[ value ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar textures = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tif ( data.image === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\ttexture.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\t\n\t    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t    \t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t    \t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn textures;\n\t\n\t    \t},\n\t\n\t    \tparseObject: function () {\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t\n\t    \t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t    \t\t\tvar object;\n\t\n\t    \t\t\tfunction getGeometry( name ) {\n\t\n\t    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn geometries[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction getMaterial( name ) {\n\t\n\t    \t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t    \t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn materials[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\tcase 'Scene':\n\t\n\t    \t\t\t\t\tobject = new Scene();\n\t\n\t    \t\t\t\t\tif ( data.background !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\t\n\t    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( data.fog !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\t\n\t    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PerspectiveCamera':\n\t\n\t    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'OrthographicCamera':\n\t\n\t    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'AmbientLight':\n\t\n\t    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t\n\t    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t\n\t    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t\n\t    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t\n\t    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Mesh':\n\t\n\t    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t    \t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LOD':\n\t\n\t    \t\t\t\t\tobject = new LOD();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Line':\n\t\n\t    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LineSegments':\n\t\n\t    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointCloud':\n\t    \t\t\t\tcase 'Points':\n\t\n\t    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Sprite':\n\t\n\t    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Group':\n\t\n\t    \t\t\t\t\tobject = new Group();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tobject = new Object3D();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.uuid = data.uuid;\n\t\n\t    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t    \t\t\tif ( data.matrix !== undefined ) {\n\t\n\t    \t\t\t\tmatrix.fromArray( data.matrix );\n\t    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t    \t\t\tif ( data.shadow ) {\n\t\n\t    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t    \t\t\tif ( data.children !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var child in data.children ) {\n\t\n\t    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.type === 'LOD' ) {\n\t\n\t    \t\t\t\tvar levels = data.levels;\n\t\n\t    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\t\t\tvar level = levels[ l ];\n\t    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t    \t\t\t\t\tif ( child !== undefined ) {\n\t\n\t    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn object;\n\t\n\t    \t\t};\n\t\n\t    \t}()\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Extensible curve object\n\t     *\n\t     * Some common of Curve methods\n\t     * .getPoint(t), getTangent(t)\n\t     * .getPointAt(u), getTangentAt(u)\n\t     * .getPoints(), .getSpacedPoints()\n\t     * .getLength()\n\t     * .updateArcLengths()\n\t     *\n\t     * This following classes subclasses THREE.Curve:\n\t     *\n\t     * -- 2d classes --\n\t     * THREE.LineCurve\n\t     * THREE.QuadraticBezierCurve\n\t     * THREE.CubicBezierCurve\n\t     * THREE.SplineCurve\n\t     * THREE.ArcCurve\n\t     * THREE.EllipseCurve\n\t     *\n\t     * -- 3d classes --\n\t     * THREE.LineCurve3\n\t     * THREE.QuadraticBezierCurve3\n\t     * THREE.CubicBezierCurve3\n\t     * THREE.SplineCurve3\n\t     *\n\t     * A series of curves can be represented as a THREE.CurvePath\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tAbstract Curve base class\n\t     **************************************************************/\n\t\n\t    function Curve() {}\n\t\n\t    Curve.prototype = {\n\t\n\t    \tconstructor: Curve,\n\t\n\t    \t// Virtual base class method to overwrite and implement in subclasses\n\t    \t//\t- t [0 .. 1]\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// Get point at relative position in curve according to arc length\n\t    \t// - u [0 .. 1]\n\t\n\t    \tgetPointAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getPoint( t );\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPoint( t )\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPointAt( u )\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get total curve arc length\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lengths = this.getLengths();\n\t    \t\treturn lengths[ lengths.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// Get list of cumulative segment lengths\n\t\n\t    \tgetLengths: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t    \t\tif ( this.cacheArcLengths\n\t    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t    \t\t\t&& ! this.needsUpdate ) {\n\t\n\t    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t    \t\t\treturn this.cacheArcLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.needsUpdate = false;\n\t\n\t    \t\tvar cache = [];\n\t    \t\tvar current, last = this.getPoint( 0 );\n\t    \t\tvar p, sum = 0;\n\t\n\t    \t\tcache.push( 0 );\n\t\n\t    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t    \t\t\tcurrent = this.getPoint ( p / divisions );\n\t    \t\t\tsum += current.distanceTo( last );\n\t    \t\t\tcache.push( sum );\n\t    \t\t\tlast = current;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheArcLengths = cache;\n\t\n\t    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t    \t},\n\t\n\t    \tupdateArcLengths: function() {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t    \tgetUtoTmapping: function ( u, distance ) {\n\t\n\t    \t\tvar arcLengths = this.getLengths();\n\t\n\t    \t\tvar i = 0, il = arcLengths.length;\n\t\n\t    \t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t    \t\tif ( distance ) {\n\t\n\t    \t\t\ttargetArcLength = distance;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t\t//var time = Date.now();\n\t\n\t    \t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t    \t\tvar low = 0, high = il - 1, comparison;\n\t\n\t    \t\twhile ( low <= high ) {\n\t\n\t    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t    \t\t\tif ( comparison < 0 ) {\n\t\n\t    \t\t\t\tlow = i + 1;\n\t\n\t    \t\t\t} else if ( comparison > 0 ) {\n\t\n\t    \t\t\t\thigh = i - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thigh = i;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t\t// DONE\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\ti = high;\n\t\n\t    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t    \t\t\tvar t = i / ( il - 1 );\n\t    \t\t\treturn t;\n\t\n\t    \t\t}\n\t\n\t    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t    \t\tvar lengthBefore = arcLengths[ i ];\n\t    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t    \t\t// determine where we are between the 'before' and 'after' points\n\t\n\t    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t    \t\t// add that fractional amount to t\n\t\n\t    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t    \t\treturn t;\n\t\n\t    \t},\n\t\n\t    \t// Returns a unit vector tangent at t\n\t    \t// In case any sub curve does not implement its tangent derivation,\n\t    \t// 2 points a small delta apart will be used to find its gradient\n\t    \t// which seems to give a reasonable approximation\n\t\n\t    \tgetTangent: function( t ) {\n\t\n\t    \t\tvar delta = 0.0001;\n\t    \t\tvar t1 = t - delta;\n\t    \t\tvar t2 = t + delta;\n\t\n\t    \t\t// Capping in case of danger\n\t\n\t    \t\tif ( t1 < 0 ) t1 = 0;\n\t    \t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t    \t\tvar pt1 = this.getPoint( t1 );\n\t    \t\tvar pt2 = this.getPoint( t2 );\n\t\n\t    \t\tvar vec = pt2.clone().sub( pt1 );\n\t    \t\treturn vec.normalize();\n\t\n\t    \t},\n\t\n\t    \tgetTangentAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getTangent( t );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // TODO: Transformation for Curves?\n\t\n\t    /**************************************************************\n\t     *\t3D Curves\n\t     **************************************************************/\n\t\n\t    // A Factory method for creating new curve subclasses\n\t\n\t    Curve.create = function ( constructor, getPointFunc ) {\n\t\n\t    \tconstructor.prototype = Object.create( Curve.prototype );\n\t    \tconstructor.prototype.constructor = constructor;\n\t    \tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t    \treturn constructor;\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tLine\n\t     **************************************************************/\n\t\n\t    function LineCurve( v1, v2 ) {\n\t\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    LineCurve.prototype = Object.create( Curve.prototype );\n\t    LineCurve.prototype.constructor = LineCurve;\n\t\n\t    LineCurve.prototype.isLineCurve = true;\n\t\n\t    LineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tif ( t === 1 ) {\n\t\n\t    \t\treturn this.v2.clone();\n\t\n\t    \t}\n\t\n\t    \tvar point = this.v2.clone().sub( this.v1 );\n\t    \tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t    \treturn point;\n\t\n\t    };\n\t\n\t    // Line curve is linear, so we can overwrite default getPointAt\n\t\n\t    LineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t    \treturn this.getPoint( u );\n\t\n\t    };\n\t\n\t    LineCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t    \treturn tangent.normalize();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tCurved Path - a curve path is simply a array of connected\n\t     *  curves, but retains the api of a curve\n\t     **************************************************************/\n\t\n\t    function CurvePath() {\n\t\n\t    \tthis.curves = [];\n\t\n\t    \tthis.autoClose = false; // Automatically closes the path\n\t\n\t    }\n\t\n\t    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\t\n\t    \tconstructor: CurvePath,\n\t\n\t    \tadd: function ( curve ) {\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t},\n\t\n\t    \tclosePath: function () {\n\t\n\t    \t\t// Add a line curve if start and end of lines are not connected\n\t    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// To get accurate point with reference to\n\t    \t// entire path distance at time t,\n\t    \t// following has to be done:\n\t\n\t    \t// 1. Length of each sub path have to be known\n\t    \t// 2. Locate and identify type of curve\n\t    \t// 3. Get t for the curve\n\t    \t// 4. Return curve.getPointAt(t')\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tvar d = t * this.getLength();\n\t    \t\tvar curveLengths = this.getCurveLengths();\n\t    \t\tvar i = 0;\n\t\n\t    \t\t// To think about boundaries points.\n\t\n\t    \t\twhile ( i < curveLengths.length ) {\n\t\n\t    \t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t    \t\t\t\tvar diff = curveLengths[ i ] - d;\n\t    \t\t\t\tvar curve = this.curves[ i ];\n\t\n\t    \t\t\t\tvar segmentLength = curve.getLength();\n\t    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t    \t\t\t\treturn curve.getPointAt( u );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ti ++;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t    \t},\n\t\n\t    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t    \t// getPoint() depends on getLength\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lens = this.getCurveLengths();\n\t    \t\treturn lens[ lens.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// cacheLengths must be recalculated.\n\t    \tupdateArcLengths: function () {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.cacheLengths = null;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Compute lengths and cache them\n\t    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t    \tgetCurveLengths: function () {\n\t\n\t    \t\t// We use cache values if curves and cache array are same length\n\t\n\t    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t    \t\t\treturn this.cacheLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\t// Get length of sub-curve\n\t    \t\t// Push sums into cached array\n\t\n\t    \t\tvar lengths = [], sums = 0;\n\t\n\t    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsums += this.curves[ i ].getLength();\n\t    \t\t\tlengths.push( sums );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheLengths = lengths;\n\t\n\t    \t\treturn lengths;\n\t\n\t    \t},\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 40;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tdivisions = divisions || 12;\n\t\n\t    \t\tvar points = [], last;\n\t\n\t    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t    \t\t\tvar curve = curves[ i ];\n\t    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t    \t\t\t\t: divisions;\n\t\n\t    \t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t    \t\t\t\tvar point = pts[ j ];\n\t\n\t    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t    \t\t\t\tpoints.push( point );\n\t    \t\t\t\tlast = point;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t/**************************************************************\n\t    \t *\tCreate Geometries Helpers\n\t    \t **************************************************************/\n\t\n\t    \t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t    \tcreatePointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \t// Generate geometry from equidistant sampling along the path\n\t\n\t    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getSpacedPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \tcreateGeometry: function ( points ) {\n\t\n\t    \t\tvar geometry = new Geometry();\n\t\n\t    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar point = points[ i ];\n\t    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**************************************************************\n\t     *\tEllipse curve\n\t     **************************************************************/\n\t\n\t    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \tthis.aX = aX;\n\t    \tthis.aY = aY;\n\t\n\t    \tthis.xRadius = xRadius;\n\t    \tthis.yRadius = yRadius;\n\t\n\t    \tthis.aStartAngle = aStartAngle;\n\t    \tthis.aEndAngle = aEndAngle;\n\t\n\t    \tthis.aClockwise = aClockwise;\n\t\n\t    \tthis.aRotation = aRotation || 0;\n\t\n\t    }\n\t\n\t    EllipseCurve.prototype = Object.create( Curve.prototype );\n\t    EllipseCurve.prototype.constructor = EllipseCurve;\n\t\n\t    EllipseCurve.prototype.isEllipseCurve = true;\n\t\n\t    EllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t    \tvar twoPi = Math.PI * 2;\n\t    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t    \t// ensures that deltaAngle is 0 .. 2 PI\n\t    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t    \tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t    \t\tif ( samePoints ) {\n\t\n\t    \t\t\tdeltaAngle = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t    \t\tif ( deltaAngle === twoPi ) {\n\t\n\t    \t\t\tdeltaAngle = - twoPi;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar angle = this.aStartAngle + t * deltaAngle;\n\t    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t    \tif ( this.aRotation !== 0 ) {\n\t\n\t    \t\tvar cos = Math.cos( this.aRotation );\n\t    \t\tvar sin = Math.sin( this.aRotation );\n\t\n\t    \t\tvar tx = x - this.aX;\n\t    \t\tvar ty = y - this.aY;\n\t\n\t    \t\t// Rotate the point about the center of the ellipse.\n\t    \t\tx = tx * cos - ty * sin + this.aX;\n\t    \t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t    \t}\n\t\n\t    \treturn new Vector2( x, y );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.CurveUtils = {\n\t\n\t    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t    \t},\n\t\n\t    \t// Puay Bing, thanks for helping with this derivative!\n\t\n\t    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t    \t\t\t3 * t * t * p3;\n\t\n\t    \t},\n\t\n\t    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t// To check if my formulas are correct\n\t\n\t    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t    \t\treturn h00 + h10 + h01 + h11;\n\t\n\t    \t},\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t * t2;\n\t    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tSpline curve\n\t     **************************************************************/\n\t\n\t    function SplineCurve( points /* array of Vector2 */ ) {\n\t\n\t    \tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    }\n\t\n\t    SplineCurve.prototype = Object.create( Curve.prototype );\n\t    SplineCurve.prototype.constructor = SplineCurve;\n\t\n\t    SplineCurve.prototype.isSplineCurve = true;\n\t\n\t    SplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar points = this.points;\n\t    \tvar point = ( points.length - 1 ) * t;\n\t\n\t    \tvar intPoint = Math.floor( point );\n\t    \tvar weight = point - intPoint;\n\t\n\t    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t    \tvar point1 = points[ intPoint ];\n\t    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \treturn new Vector2(\n\t    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t    \t);\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier curve\n\t     **************************************************************/\n\t\n\t    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t    \tthis.v3 = v3;\n\t\n\t    }\n\t\n\t    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n\t    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\t\n\t    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t);\n\t\n\t    };\n\t\n\t    CubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier curve\n\t     **************************************************************/\n\t\n\t\n\t    function QuadraticBezierCurve( v0, v1, v2 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\t    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b2 = exports.ShapeUtils.b2;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t);\n\t\n\t    };\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\t\n\t    \tfromPoints: function ( vectors ) {\n\t\n\t    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmoveTo: function ( x, y ) {\n\t\n\t    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t    \t},\n\t\n\t    \tlineTo: function ( x, y ) {\n\t\n\t    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( x, y );\n\t\n\t    \t},\n\t\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t    \t\tvar curve = new QuadraticBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCPx, aCPy ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t    \t\tvar curve = new CubicBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCP1x, aCP1y ),\n\t    \t\t\tnew Vector2( aCP2x, aCP2y ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t    \t\tvar curve = new SplineCurve( npts );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t    \t},\n\t\n\t    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t    \t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t},\n\t\n\t    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t\tif ( this.curves.length > 0 ) {\n\t\n\t    \t\t\t// if a previous curve is present, attempt to join\n\t    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tvar lastPoint = curve.getPoint( 1 );\n\t    \t\tthis.currentPoint.copy( lastPoint );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Defines a 2d shape plane using paths.\n\t     **/\n\t\n\t    // STEP 1 Create a path.\n\t    // STEP 2 Turn path into shape.\n\t    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t    // STEP 3a - Extract points from each shape, turn to vertices\n\t    // STEP 3b - Triangulate each shape, add faces.\n\t\n\t    function Shape() {\n\t\n\t    \tPath.apply( this, arguments );\n\t\n\t    \tthis.holes = [];\n\t\n\t    }\n\t\n\t    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\t\n\t    \tconstructor: Shape,\n\t\n\t    \tgetPointsHoles: function ( divisions ) {\n\t\n\t    \t\tvar holesPts = [];\n\t\n\t    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn holesPts;\n\t\n\t    \t},\n\t\n\t    \t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t    \textractAllPoints: function ( divisions ) {\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tshape: this.getPoints( divisions ),\n\t    \t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \textractPoints: function ( divisions ) {\n\t\n\t    \t\treturn this.extractAllPoints( divisions );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Creates free form 2d path using series of points, lines or curves.\n\t     *\n\t     **/\n\t\n\t    function Path( points ) {\n\t\n\t    \tCurvePath.call( this );\n\t    \tthis.currentPoint = new Vector2();\n\t\n\t    \tif ( points ) {\n\t\n\t    \t\tthis.fromPoints( points );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Path.prototype = PathPrototype;\n\t    PathPrototype.constructor = Path;\n\t\n\t\n\t    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t    function ShapePath() {\n\t    \tthis.subPaths = [];\n\t    \tthis.currentPath = null;\n\t    }\n\t\n\t    ShapePath.prototype = {\n\t    \tmoveTo: function ( x, y ) {\n\t    \t\tthis.currentPath = new Path();\n\t    \t\tthis.subPaths.push(this.currentPath);\n\t    \t\tthis.currentPath.moveTo( x, y );\n\t    \t},\n\t    \tlineTo: function ( x, y ) {\n\t    \t\tthis.currentPath.lineTo( x, y );\n\t    \t},\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t    \t},\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t    \t},\n\t    \tsplineThru: function ( pts ) {\n\t    \t\tthis.currentPath.splineThru( pts );\n\t    \t},\n\t\n\t    \ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t    \t\t\tvar shapes = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t    \t\t\t\tvar tmpShape = new Shape();\n\t    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tshapes.push( tmpShape );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t    \t\t\tvar polyLen = inPolygon.length;\n\t\n\t    \t\t\t// inPt on polygon contour => immediate success    or\n\t    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t    \t\t\t//  with the horizontal line through inPt, left of inPt\n\t    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t    \t\t\tvar inside = false;\n\t    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t// not parallel\n\t    \t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// parallel or collinear\n\t    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t    \t\t\t\t\t// continue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn\tinside;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\t\n\t    \t\tvar subPaths = this.subPaths;\n\t    \t\tif ( subPaths.length === 0 ) return [];\n\t\n\t    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t    \t\tif ( subPaths.length === 1 ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ 0 ];\n\t    \t\t\ttmpShape = new Shape();\n\t    \t\t\ttmpShape.curves = tmpPath.curves;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t    \t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t    \t\tvar betterShapeHoles = [];\n\t    \t\tvar newShapes = [];\n\t    \t\tvar newShapeHoles = [];\n\t    \t\tvar mainIdx = 0;\n\t    \t\tvar tmpPoints;\n\t\n\t    \t\tnewShapes[ mainIdx ] = undefined;\n\t    \t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ i ];\n\t    \t\t\ttmpPoints = tmpPath.getPoints();\n\t    \t\t\tsolid = isClockWise( tmpPoints );\n\t    \t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t    \t\t\tif ( solid ) {\n\t\n\t    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\t\t\t//console.log('cw', i);\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t    \t\t\t\t//console.log('ccw', i);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// only Holes? -> probably all Shapes with wrong orientation\n\t    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tif ( newShapes.length > 1 ) {\n\t\n\t    \t\t\tvar ambiguous = false;\n\t    \t\t\tvar toChange = [];\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\tvar ho = sho[ hIdx ];\n\t    \t\t\t\t\tvar hole_unassigned = true;\n\t\n\t    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\t\t\thole_unassigned = false;\n\t    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t    \t\t\tif ( toChange.length > 0 ) {\n\t\n\t    \t\t\t\t// console.log(\"to change: \", toChange);\n\t    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar tmpHoles;\n\t\n\t    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t    \t\t\ttmpShape = newShapes[ i ].s;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log(\"shape\", shapes);\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t    }\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Font( data ) {\n\t\n\t    \tthis.data = data;\n\t\n\t    }\n\t\n\t    Object.assign( Font.prototype, {\n\t\n\t    \tisFont: true,\n\t\n\t    \tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t    \t\tfunction createPaths( text ) {\n\t\n\t    \t\t\tvar chars = String( text ).split( '' );\n\t    \t\t\tvar scale = size / data.resolution;\n\t    \t\t\tvar offset = 0;\n\t\n\t    \t\t\tvar paths = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t    \t\t\t\toffset += ret.offset;\n\t\n\t    \t\t\t\tpaths.push( ret.path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn paths;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction createPath( c, scale, offset ) {\n\t\n\t    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t    \t\t\tif ( ! glyph ) return;\n\t\n\t    \t\t\tvar path = new ShapePath();\n\t\n\t    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n\t    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t    \t\t\tif ( glyph.o ) {\n\t\n\t    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t    \t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t    \t\t\t\t\tswitch ( action ) {\n\t\n\t    \t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( size === undefined ) size = 100;\n\t    \t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t    \t\tvar data = this.data;\n\t\n\t    \t\tvar paths = createPaths( text );\n\t    \t\tvar shapes = [];\n\t\n\t    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function FontLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( FontLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json;\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tjson = JSON.parse( text );\n\t\n\t    \t\t\t} catch ( e ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar font = scope.parse( json );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( font );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\treturn new Font( json );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var context;\n\t\n\t    function getAudioContext() {\n\t\n\t    \tif ( context === undefined ) {\n\t\n\t    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t    \t}\n\t\n\t    \treturn context;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t     */\n\t\n\t    function AudioLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( AudioLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar context = getAudioContext();\n\t\n\t    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t    \t\t\t\tonLoad( audioBuffer );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function StereoCamera() {\n\t\n\t    \tthis.type = 'StereoCamera';\n\t\n\t    \tthis.aspect = 1;\n\t\n\t    \tthis.eyeSep = 0.064;\n\t\n\t    \tthis.cameraL = new PerspectiveCamera();\n\t    \tthis.cameraL.layers.enable( 1 );\n\t    \tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t    \tthis.cameraR = new PerspectiveCamera();\n\t    \tthis.cameraR.layers.enable( 2 );\n\t    \tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( StereoCamera.prototype, {\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\t\n\t    \t\tvar eyeRight = new Matrix4();\n\t    \t\tvar eyeLeft = new Matrix4();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\t\n\t    \t\t\tif ( needsUpdate ) {\n\t\n\t    \t\t\t\tinstance = this;\n\t    \t\t\t\tfocus = camera.focus;\n\t    \t\t\t\tfov = camera.fov;\n\t    \t\t\t\taspect = camera.aspect * this.aspect;\n\t    \t\t\t\tnear = camera.near;\n\t    \t\t\t\tfar = camera.far;\n\t    \t\t\t\tzoom = camera.zoom;\n\t\n\t    \t\t\t\t// Off-axis stereoscopic effect based on\n\t    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t    \t\t\t\tvar xmin, xmax;\n\t\n\t    \t\t\t\t// translate xOffset\n\t\n\t    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t    \t\t\t\t// for left eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t\t// for right eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    /**\n\t     * Camera for rendering cube maps\n\t     *\t- renders scene into axis-aligned cube\n\t     *\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CubeCamera( near, far, cubeResolution ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'CubeCamera';\n\t\n\t    \tvar fov = 90, aspect = 1;\n\t\n\t    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPX.up.set( 0, - 1, 0 );\n\t    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t    \tthis.add( cameraPX );\n\t\n\t    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNX.up.set( 0, - 1, 0 );\n\t    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t    \tthis.add( cameraNX );\n\t\n\t    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPY.up.set( 0, 0, 1 );\n\t    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t    \tthis.add( cameraPY );\n\t\n\t    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNY.up.set( 0, 0, - 1 );\n\t    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t    \tthis.add( cameraNY );\n\t\n\t    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPZ.up.set( 0, - 1, 0 );\n\t    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t    \tthis.add( cameraPZ );\n\t\n\t    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNZ.up.set( 0, - 1, 0 );\n\t    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t    \tthis.add( cameraNZ );\n\t\n\t    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\t\n\t    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t    \tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t    \t\tvar renderTarget = this.renderTarget;\n\t    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t    \t\trenderTarget.activeCubeFace = 0;\n\t    \t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 1;\n\t    \t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 2;\n\t    \t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 3;\n\t    \t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 4;\n\t    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t    \t\trenderTarget.activeCubeFace = 5;\n\t    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t    \t\trenderer.setRenderTarget( null );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    CubeCamera.prototype = Object.create( Object3D.prototype );\n\t    CubeCamera.prototype.constructor = CubeCamera;\n\t\n\t    function AudioListener() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'AudioListener';\n\t\n\t    \tthis.context = getAudioContext();\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( this.context.destination );\n\t\n\t    \tthis.filter = null;\n\t\n\t    }\n\t\n\t    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: AudioListener,\n\t\n\t    \tgetInput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tremoveFilter: function ( ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t    \t\t\tthis.gain.connect( this.context.destination );\n\t    \t\t\tthis.filter = null;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.filter;\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( value ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.filter = value;\n\t    \t\tthis.gain.connect( this.filter );\n\t    \t\tthis.filter.connect( this.context.destination );\n\t\n\t    \t},\n\t\n\t    \tgetMasterVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t    \tsetMasterVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\tvar orientation = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tvar listener = this.context.listener;\n\t    \t\t\tvar up = this.up;\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    function Audio( listener ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Audio';\n\t\n\t    \tthis.context = listener.context;\n\t    \tthis.source = this.context.createBufferSource();\n\t    \tthis.source.onended = this.onEnded.bind( this );\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( listener.getInput() );\n\t\n\t    \tthis.autoplay = false;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.playbackRate = 1;\n\t    \tthis.isPlaying = false;\n\t    \tthis.hasPlaybackControl = true;\n\t    \tthis.sourceType = 'empty';\n\t\n\t    \tthis.filters = [];\n\t\n\t    }\n\t\n\t    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Audio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tsetNodeSource: function ( audioNode ) {\n\t\n\t    \t\tthis.hasPlaybackControl = false;\n\t    \t\tthis.sourceType = 'audioNode';\n\t    \t\tthis.source = audioNode;\n\t    \t\tthis.connect();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetBuffer: function ( audioBuffer ) {\n\t\n\t    \t\tthis.source.buffer = audioBuffer;\n\t    \t\tthis.sourceType = 'buffer';\n\t\n\t    \t\tif ( this.autoplay ) this.play();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tplay: function () {\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar source = this.context.createBufferSource();\n\t\n\t    \t\tsource.buffer = this.source.buffer;\n\t    \t\tsource.loop = this.source.loop;\n\t    \t\tsource.onended = this.source.onended;\n\t    \t\tsource.start( 0, this.startTime );\n\t    \t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t    \t\tthis.isPlaying = true;\n\t\n\t    \t\tthis.source = source;\n\t\n\t    \t\treturn this.connect();\n\t\n\t    \t},\n\t\n\t    \tpause: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = this.context.currentTime;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = 0;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.connect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdisconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilters: function () {\n\t\n\t    \t\treturn this.filters;\n\t\n\t    \t},\n\t\n\t    \tsetFilters: function ( value ) {\n\t\n\t    \t\tif ( ! value ) value = [];\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.disconnect();\n\t    \t\t\tthis.filters = value;\n\t    \t\t\tthis.connect();\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.filters = value;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.getFilters()[ 0 ];\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( filter ) {\n\t\n\t    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t    \t},\n\t\n\t    \tsetPlaybackRate: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.playbackRate = value;\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetPlaybackRate: function () {\n\t\n\t    \t\treturn this.playbackRate;\n\t\n\t    \t},\n\t\n\t    \tonEnded: function () {\n\t\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t},\n\t\n\t    \tgetLoop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.source.loop;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.loop = value;\n\t\n\t    \t},\n\t\n\t    \tgetVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t\n\t    \tsetVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    function PositionalAudio( listener ) {\n\t\n\t    \tAudio.call( this, listener );\n\t\n\t    \tthis.panner = this.context.createPanner();\n\t    \tthis.panner.connect( this.gain );\n\t\n\t    }\n\t\n\t    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\t\n\t    \tconstructor: PositionalAudio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.panner;\n\t\n\t    \t},\n\t\n\t    \tgetRefDistance: function () {\n\t\n\t    \t\treturn this.panner.refDistance;\n\t\n\t    \t},\n\t\n\t    \tsetRefDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.refDistance = value;\n\t\n\t    \t},\n\t\n\t    \tgetRolloffFactor: function () {\n\t\n\t    \t\treturn this.panner.rolloffFactor;\n\t\n\t    \t},\n\t\n\t    \tsetRolloffFactor: function ( value ) {\n\t\n\t    \t\tthis.panner.rolloffFactor = value;\n\t\n\t    \t},\n\t\n\t    \tgetDistanceModel: function () {\n\t\n\t    \t\treturn this.panner.distanceModel;\n\t\n\t    \t},\n\t\n\t    \tsetDistanceModel: function ( value ) {\n\t\n\t    \t\tthis.panner.distanceModel = value;\n\t\n\t    \t},\n\t\n\t    \tgetMaxDistance: function () {\n\t\n\t    \t\treturn this.panner.maxDistance;\n\t\n\t    \t},\n\t\n\t    \tsetMaxDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.maxDistance = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AudioAnalyser( audio, fftSize ) {\n\t\n\t    \tthis.analyser = audio.context.createAnalyser();\n\t    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t    \taudio.getOutput().connect( this.analyser );\n\t\n\t    }\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t\n\t    \tgetFrequencyData: function () {\n\t\n\t    \t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t    \t\treturn this.data;\n\t\n\t    \t},\n\t\n\t    \tgetAverageFrequency: function () {\n\t\n\t    \t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t    \t\t\tvalue += data[ i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn value / data.length;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Buffered scene graph property that allows weighted accumulation.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyMixer( binding, typeName, valueSize ) {\n\t\n\t    \tthis.binding = binding;\n\t    \tthis.valueSize = valueSize;\n\t\n\t    \tvar bufferType = Float64Array,\n\t    \t\tmixFunction;\n\t\n\t    \tswitch ( typeName ) {\n\t\n\t    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t    \t\tcase 'string':\n\t    \t\tcase 'bool':\n\t\n\t    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t    \t}\n\t\n\t    \tthis.buffer = new bufferType( valueSize * 4 );\n\t    \t// layout: [ incoming | accu0 | accu1 | orig ]\n\t    \t//\n\t    \t// interpolators can use .buffer as their .result\n\t    \t// the data then goes to 'incoming'\n\t    \t//\n\t    \t// 'accu0' and 'accu1' are used frame-interleaved for\n\t    \t// the cumulative result and are compared to detect\n\t    \t// changes\n\t    \t//\n\t    \t// 'orig' stores the original state of the property\n\t\n\t    \tthis._mixBufferRegion = mixFunction;\n\t\n\t    \tthis.cumulativeWeight = 0;\n\t\n\t    \tthis.useCount = 0;\n\t    \tthis.referenceCount = 0;\n\t\n\t    }\n\t\n\t    PropertyMixer.prototype = {\n\t\n\t    \tconstructor: PropertyMixer,\n\t\n\t    \t// accumulate data in the 'incoming' region into 'accu<i>'\n\t    \taccumulate: function( accuIndex, weight ) {\n\t\n\t    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t    \t\t// the weight and shouldn't have made the call in the first place\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t    \t\tif ( currentWeight === 0 ) {\n\t\n\t    \t\t\t// accuN := incoming * weight\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentWeight = weight;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// accuN := accuN + incoming * weight\n\t\n\t    \t\t\tcurrentWeight += weight;\n\t    \t\t\tvar mix = weight / currentWeight;\n\t    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = currentWeight;\n\t\n\t    \t},\n\t\n\t    \t// apply the state of 'accu<i>' to the binding when accus differ\n\t    \tapply: function( accuIndex ) {\n\t\n\t    \t\tvar stride = this.valueSize,\n\t    \t\t\tbuffer = this.buffer,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tweight = this.cumulativeWeight,\n\t\n\t    \t\t\tbinding = this.binding;\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t\tif ( weight < 1 ) {\n\t\n\t    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t    \t\t\tvar originalValueOffset = stride * 3;\n\t\n\t    \t\t\tthis._mixBufferRegion(\n\t    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t    \t\t\t\t// value has changed -> update scene graph\n\t\n\t    \t\t\t\tbinding.setValue( buffer, offset );\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remember the state of the bound property and copy it to both accus\n\t    \tsaveOriginalState: function() {\n\t\n\t    \t\tvar binding = this.binding;\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toriginalValueOffset = stride * 3;\n\t\n\t    \t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t    \t\t// accu[0..1] := orig -- initially detect changes against the original\n\t    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t},\n\t\n\t    \t// apply the state previously taken via 'saveOriginalState' to the binding\n\t    \trestoreOriginalState: function() {\n\t\n\t    \t\tvar originalValueOffset = this.valueSize * 3;\n\t    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t    \t},\n\t\n\t\n\t    \t// mix functions\n\t\n\t    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tif ( t >= 0.5 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t    \t},\n\t\n\t    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tvar s = 1 - t;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tvar j = dstOffset + i;\n\t\n\t    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A reference to a real property in the scene graph.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyBinding( rootNode, path, parsedPath ) {\n\t\n\t    \tthis.path = path;\n\t    \tthis.parsedPath = parsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis.node = PropertyBinding.findNode(\n\t    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t    \tthis.rootNode = rootNode;\n\t\n\t    }\n\t\n\t    PropertyBinding.prototype = {\n\t\n\t    \tconstructor: PropertyBinding,\n\t\n\t    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.getValue( targetArray, offset );\n\t\n\t    \t\t// Note: This class uses a State pattern on a per-method basis:\n\t    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t    \t\t// prototype version of these methods with one that represents\n\t    \t\t// the bound state. When the property is not found, the methods\n\t    \t\t// become no-ops.\n\t\n\t    \t},\n\t\n\t    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.setValue( sourceArray, offset );\n\t\n\t    \t},\n\t\n\t    \t// create getter / setter pair for a property in the scene graph\n\t    \tbind: function() {\n\t\n\t    \t\tvar targetObject = this.node,\n\t    \t\t\tparsedPath = this.parsedPath,\n\t\n\t    \t\t\tobjectName = parsedPath.objectName,\n\t    \t\t\tpropertyName = parsedPath.propertyName,\n\t    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\ttargetObject = PropertyBinding.findNode(\n\t    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t    \t\t\tthis.node = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// set fail state so we can just 'return' on error\n\t    \t\tthis.getValue = this._getValue_unavailable;\n\t    \t\tthis.setValue = this._setValue_unavailable;\n\t\n\t     \t\t// ensure there is a value node\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( objectName ) {\n\t\n\t    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t    \t\t\tswitch ( objectName ) {\n\t\n\t    \t\t\t\tcase 'materials':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'bones':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t    \t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t    \t\t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t    \t\t\t\t\t\t\tobjectIndex = i;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( objectIndex !== undefined ) {\n\t\n\t    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// resolve property\n\t    \t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t    \t\tif ( nodeProperty === undefined ) {\n\t\n\t    \t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine versioning scheme\n\t    \t\tvar versioning = this.Versioning.None;\n\t\n\t    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t    \t\t\tversioning = this.Versioning.NeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine how the property gets bound\n\t    \t\tvar bindingType = this.BindingType.Direct;\n\t\n\t    \t\tif ( propertyIndex !== undefined ) {\n\t    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t    \t\t\t\t\t\tpropertyIndex = i;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t    \t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t    \t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.propertyName = propertyName;\n\t\n\t    \t\t}\n\t\n\t    \t\t// select getter / setter\n\t    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tthis.node = null;\n\t\n\t    \t\t// back to the prototype version of getValue / setValue\n\t    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t    \t\tthis.getValue = this._getValue_unbound;\n\t    \t\tthis.setValue = this._setValue_unbound;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\t\n\t    \t// these are used to \"bind\" a nonexistent property\n\t    \t_getValue_unavailable: function() {},\n\t    \t_setValue_unavailable: function() {},\n\t\n\t    \t// initial state of these methods that calls 'bind'\n\t    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\t\n\t    \tBindingType: {\n\t    \t\tDirect: 0,\n\t    \t\tEntireArray: 1,\n\t    \t\tArrayElement: 2,\n\t    \t\tHasFromToArray: 3\n\t    \t},\n\t\n\t    \tVersioning: {\n\t    \t\tNone: 0,\n\t    \t\tNeedsUpdate: 1,\n\t    \t\tMatrixWorldNeedsUpdate: 2\n\t    \t},\n\t\n\t    \tGetterByBindingType: [\n\t\n\t    \t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_array( buffer, offset ) {\n\t\n\t    \t\t\tvar source = this.resolvedProperty;\n\t\n\t    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t    \t\t}\n\t\n\t    \t],\n\t\n\t    \tSetterByBindingTypeAndVersioning: [\n\t\n\t    \t\t[\n\t    \t\t\t// Direct\n\t\n\t    \t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// EntireArray\n\t\n\t    \t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// ArrayElement\n\t\n\t    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// HasToFromArray\n\t\n\t    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t]\n\t\n\t    \t]\n\t\n\t    } );\n\t\n\t    PropertyBinding.Composite =\n\t    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t    \tvar parsedPath = optionalParsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis._targetGroup = targetGroup;\n\t    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t    };\n\t\n\t    PropertyBinding.Composite.prototype = {\n\t\n\t    \tconstructor: PropertyBinding.Composite,\n\t\n\t    \tgetValue: function( array, offset ) {\n\t\n\t    \t\tthis.bind(); // bind all binding\n\t\n\t    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t    \t\t// and only call .getValue on the first\n\t    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t    \t},\n\t\n\t    \tsetValue: function( array, offset ) {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].bind();\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].unbind();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\t\n\t    \t\treturn new PropertyBinding( root, path, parsedPath );\n\t\n\t    \t} else {\n\t\n\t    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t    \t// matches strings in the form of:\n\t    \t//    nodeName.property\n\t    \t//    nodeName.property[accessor]\n\t    \t//    nodeName.material.property[accessor]\n\t    \t//    uuid.property[accessor]\n\t    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t    \t//    parentName/nodeName.property\n\t    \t//    parentName/parentName/nodeName.property[index]\n\t    \t//    .bone[Armature.DEF_cog].position\n\t    \t//    scene:helium_balloon_model:helium_balloon_model.position\n\t    \t// created and tested via https://regex101.com/#javascript\n\t\n\t    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t    \tvar matches = re.exec( trackName );\n\t\n\t    \tif ( ! matches ) {\n\t\n\t    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \tvar results = {\n\t    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t    \t\tobjectName: matches[ 3 ],\n\t    \t\tobjectIndex: matches[ 4 ],\n\t    \t\tpropertyName: matches[ 5 ],\n\t    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t    \t};\n\t\n\t    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \treturn results;\n\t\n\t    };\n\t\n\t    PropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t    \t\treturn root;\n\t\n\t    \t}\n\t\n\t    \t// search into skeleton bones.\n\t    \tif ( root.skeleton ) {\n\t\n\t    \t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t    \t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t    \t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t    \t\t\t\t\treturn bone;\n\t\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t    \t\tif ( bone ) {\n\t\n\t    \t\t\treturn bone;\n\t\n\t    \t\t}\n\t    \t}\n\t\n\t    \t// search into node subtree.\n\t    \tif ( root.children ) {\n\t\n\t    \t\tvar searchNodeSubtree = function( children ) {\n\t\n\t    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar childNode = children[ i ];\n\t\n\t    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t    \t\t\t\t\treturn childNode;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t    \t\t\t\tif ( result ) return result;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t    \t\tif ( subTreeNode ) {\n\t\n\t    \t\t\treturn subTreeNode;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn null;\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A group of objects that receives a shared animation state.\n\t     *\n\t     * Usage:\n\t     *\n\t     * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t     * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t     *\n\t     * \t-\tInstead pass this object as 'root'.\n\t     *\n\t     * \t-\tYou can also add and remove objects later when the mixer\n\t     * \t\tis running.\n\t     *\n\t     * Note:\n\t     *\n\t     *  \tObjects of this class appear as one object to the mixer,\n\t     *  \tso cache control of the individual objects must be done\n\t     *  \ton the group.\n\t     *\n\t     * Limitation:\n\t     *\n\t     * \t- \tThe animated properties must be compatible among the\n\t     * \t\tall objects in the group.\n\t     *\n\t     *  -\tA single property can either be controlled through a\n\t     *  \ttarget group or directly, but not both.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationObjectGroup( var_args ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// cached objects followed by the active ones\n\t    \tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t    \t// note: read by PropertyBinding.Composite\n\t\n\t    \tvar indices = {};\n\t    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t    \t}\n\t\n\t    \tthis._paths = [];\t\t\t\t\t// inside: string\n\t    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.stats = {\n\t\n\t    \t\tobjects: {\n\t    \t\t\tget total() { return scope._objects.length; },\n\t    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t    \t\t},\n\t\n\t    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    AnimationObjectGroup.prototype = {\n\t\n\t    \tconstructor: AnimationObjectGroup,\n\t\n\t    \tisAnimationObjectGroup: true,\n\t\n\t    \tadd: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tpaths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index === undefined ) {\n\t\n\t    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t    \t\t\t\tindex = nObjects ++;\n\t    \t\t\t\tindicesByUUID[ uuid ] = index;\n\t    \t\t\t\tobjects.push( object );\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tbindings[ j ].push(\n\t    \t\t\t\t\t\t\tnew PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\tvar knownObject = objects[ index ];\n\t\n\t    \t\t\t\t// move existing object to the ACTIVE region\n\t\n\t    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t    \t\t\t\t\tif ( binding === undefined ) {\n\t\n\t    \t\t\t\t\t\t// since we do not bother to create new bindings\n\t    \t\t\t\t\t\t// for objects that are cached, the binding may\n\t    \t\t\t\t\t\t// or may not exist\n\t\n\t    \t\t\t\t\t\tbinding = new PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t    \t\t\t} // else the object is already where we want it to be\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \tremove: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t    \t\t\t\t// move existing object into the CACHED region\n\t\n\t    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// remove & forget\n\t    \tuncache: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t    \t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t    \t\t\t\t\t\tlastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\t// last cached object takes this object's place\n\t    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\t\t// last object goes to the activated slot and pop\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t    \t\t\t\t\tvar lastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} // cached or active\n\t\n\t    \t\t\t} // if object is known\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t    \tsubscribe_: function( path, parsedPath ) {\n\t    \t\t// returns an array of bindings for the given path that is changed\n\t    \t\t// according to the contained objects in the group\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ],\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t    \t\tvar paths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tobjects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t    \t\tindex = bindings.length;\n\t\n\t    \t\tindicesByPath[ path ] = index;\n\t\n\t    \t\tpaths.push( path );\n\t    \t\tparsedPaths.push( parsedPath );\n\t    \t\tbindings.push( bindingsForPath );\n\t\n\t    \t\tfor ( var i = nCachedObjects,\n\t    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = objects[ i ];\n\t\n\t    \t\t\tbindingsForPath[ i ] =\n\t    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn bindingsForPath;\n\t\n\t    \t},\n\t\n\t    \tunsubscribe_: function( path ) {\n\t    \t\t// tells the group to forget about a property path and no longer\n\t    \t\t// update the array previously obtained with 'subscribe_'\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ];\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar paths = this._paths,\n\t    \t\t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\t\tbindings = this._bindings,\n\t    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t    \t\t\tbindings[ index ] = lastBindings;\n\t    \t\t\tbindings.pop();\n\t\n\t    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t    \t\t\tparsedPaths.pop();\n\t\n\t    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t    \t\t\tpaths.pop();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Action provided by AnimationMixer for scheduling clip playback on specific\n\t     * objects.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     *\n\t     */\n\t\n\t    function AnimationAction( mixer, clip, localRoot ) {\n\t\n\t    \tthis._mixer = mixer;\n\t    \tthis._clip = clip;\n\t    \tthis._localRoot = localRoot || null;\n\t\n\t    \tvar tracks = clip.tracks,\n\t    \t\tnTracks = tracks.length,\n\t    \t\tinterpolants = new Array( nTracks );\n\t\n\t    \tvar interpolantSettings = {\n\t    \t\t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t    \t};\n\t\n\t    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t    \t\tinterpolants[ i ] = interpolant;\n\t    \t\tinterpolant.settings = interpolantSettings;\n\t\n\t    \t}\n\t\n\t    \tthis._interpolantSettings = interpolantSettings;\n\t\n\t    \tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t    \t// inside: PropertyMixer (managed by the mixer)\n\t    \tthis._propertyBindings = new Array( nTracks );\n\t\n\t    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t    \tthis._timeScaleInterpolant = null;\n\t    \tthis._weightInterpolant = null;\n\t\n\t    \tthis.loop = LoopRepeat;\n\t    \tthis._loopCount = -1;\n\t\n\t    \t// global mixer time when the action is to be started\n\t    \t// it's set back to 'null' upon start of the action\n\t    \tthis._startTime = null;\n\t\n\t    \t// scaled local time of the action\n\t    \t// gets clamped or wrapped to 0..clip.duration according to loop\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1;\n\t    \tthis._effectiveTimeScale = 1;\n\t\n\t    \tthis.weight = 1;\n\t    \tthis._effectiveWeight = 1;\n\t\n\t    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t    };\n\t\n\t    AnimationAction.prototype = {\n\t\n\t    \tconstructor: AnimationAction,\n\t\n\t    \t// State & Scheduling\n\t\n\t    \tplay: function() {\n\t\n\t    \t\tthis._mixer._activateAction( this );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function() {\n\t\n\t    \t\tthis._mixer._deactivateAction( this );\n\t\n\t    \t\treturn this.reset();\n\t\n\t    \t},\n\t\n\t    \treset: function() {\n\t\n\t    \t\tthis.paused = false;\n\t    \t\tthis.enabled = true;\n\t\n\t    \t\tthis.time = 0;\t\t\t// restart clip\n\t    \t\tthis._loopCount = -1;\t// forget previous loops\n\t    \t\tthis._startTime = null;\t// forget scheduling\n\t\n\t    \t\treturn this.stopFading().stopWarping();\n\t\n\t    \t},\n\t\n\t    \tisRunning: function() {\n\t\n\t    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \t// return true when play has been called\n\t    \tisScheduled: function() {\n\t\n\t    \t\treturn this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \tstartAt: function( time ) {\n\t\n\t    \t\tthis._startTime = time;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function( mode, repetitions ) {\n\t\n\t    \t\tthis.loop = mode;\n\t    \t\tthis.repetitions = repetitions;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Weight\n\t\n\t    \t// set the weight stopping any scheduled fading\n\t    \t// although .enabled = false yields an effective weight of zero, this\n\t    \t// method does *not* change .enabled, because it would be confusing\n\t    \tsetEffectiveWeight: function( weight ) {\n\t\n\t    \t\tthis.weight = weight;\n\t\n\t    \t\t// note: same logic as when updated at runtime\n\t    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t    \t\treturn this.stopFading();\n\t\n\t    \t},\n\t\n\t    \t// return the weight considering fading and .enabled\n\t    \tgetEffectiveWeight: function() {\n\t\n\t    \t\treturn this._effectiveWeight;\n\t\n\t    \t},\n\t\n\t    \tfadeIn: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t    \t},\n\t\n\t    \tfadeOut: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t    \t},\n\t\n\t    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t    \t\tfadeOutAction.fadeOut( duration );\n\t    \t\tthis.fadeIn( duration );\n\t\n\t    \t\tif( warp ) {\n\t\n\t    \t\t\tvar fadeInDuration = this._clip.duration,\n\t    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t    \t},\n\t\n\t    \tstopFading: function() {\n\t\n\t    \t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( weightInterpolant !== null ) {\n\t\n\t    \t\t\tthis._weightInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Time Scale Control\n\t\n\t    \t// set the weight stopping any scheduled warping\n\t    \t// although .paused = true yields an effective time scale of zero, this\n\t    \t// method does *not* change .paused, because it would be confusing\n\t    \tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t    \t\tthis.timeScale = timeScale;\n\t    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \t// return the time scale considering warping and .paused\n\t    \tgetEffectiveTimeScale: function() {\n\t\n\t    \t\treturn this._effectiveTimeScale;\n\t\n\t    \t},\n\t\n\t    \tsetDuration: function( duration ) {\n\t\n\t    \t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \tsyncWith: function( action ) {\n\t\n\t    \t\tthis.time = action.time;\n\t    \t\tthis.timeScale = action.timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \thalt: function( duration ) {\n\t\n\t    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t    \t},\n\t\n\t    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now;\n\t    \t\ttimes[ 1 ] = now + duration;\n\t\n\t    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstopWarping: function() {\n\t\n\t    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t    \t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t    \t\t\tthis._timeScaleInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Object Accessors\n\t\n\t    \tgetMixer: function() {\n\t\n\t    \t\treturn this._mixer;\n\t\n\t    \t},\n\t\n\t    \tgetClip: function() {\n\t\n\t    \t\treturn this._clip;\n\t\n\t    \t},\n\t\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._localRoot || this._mixer._root;\n\t\n\t    \t},\n\t\n\t    \t// Interna\n\t\n\t    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t    \t\t// called by the mixer\n\t\n\t    \t\tvar startTime = this._startTime;\n\t\n\t    \t\tif ( startTime !== null ) {\n\t\n\t    \t\t\t// check for scheduled start of action\n\t\n\t    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// start\n\t\n\t    \t\t\tthis._startTime = null; // unschedule\n\t    \t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t    \t\t}\n\t\n\t    \t\t// apply time scale and advance time\n\t\n\t    \t\tdeltaTime *= this._updateTimeScale( time );\n\t    \t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t    \t\t// note: _updateTime may disable the action resulting in\n\t    \t\t// an effective weight of 0\n\t\n\t    \t\tvar weight = this._updateWeight( time );\n\t\n\t    \t\tif ( weight > 0 ) {\n\t\n\t    \t\t\tvar interpolants = this._interpolants;\n\t    \t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_updateWeight: function( time ) {\n\t\n\t    \t\tvar weight = 0;\n\t\n\t    \t\tif ( this.enabled ) {\n\t\n\t    \t\t\tweight = this.weight;\n\t    \t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\tweight *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopFading();\n\t\n\t    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t    \t\t\t\t\t\t// faded out, disable\n\t    \t\t\t\t\t\tthis.enabled = false;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveWeight = weight;\n\t    \t\treturn weight;\n\t\n\t    \t},\n\t\n\t    \t_updateTimeScale: function( time ) {\n\t\n\t    \t\tvar timeScale = 0;\n\t\n\t    \t\tif ( ! this.paused ) {\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\ttimeScale *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopWarping();\n\t\n\t    \t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t    \t\t\t\t\t\t// motion has halted, pause\n\t    \t\t\t\t\t\tthis.paused = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// warp done - apply final time scale\n\t    \t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveTimeScale = timeScale;\n\t    \t\treturn timeScale;\n\t\n\t    \t},\n\t\n\t    \t_updateTime: function( deltaTime ) {\n\t\n\t    \t\tvar time = this.time + deltaTime;\n\t\n\t    \t\tif ( deltaTime === 0 ) return time;\n\t\n\t    \t\tvar duration = this._clip.duration,\n\t\n\t    \t\t\tloop = this.loop,\n\t    \t\t\tloopCount = this._loopCount;\n\t\n\t    \t\tif ( loop === LoopOnce ) {\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tthis.loopCount = 0;\n\t    \t\t\t\tthis._setEndings( true, true, false );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thandle_stop: {\n\t\n\t    \t\t\t\tif ( time >= duration ) {\n\t\n\t    \t\t\t\t\ttime = duration;\n\t\n\t    \t\t\t\t} else if ( time < 0 ) {\n\t\n\t    \t\t\t\t\ttime = 0;\n\t\n\t    \t\t\t\t} else break handle_stop;\n\t\n\t    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else { // repetitive Repeat or PingPong\n\t\n\t    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t    \t\t\t\t\tloopCount = 0;\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// when looping in reverse direction, the initial\n\t    \t\t\t\t\t// transition through zero counts as a repetition,\n\t    \t\t\t\t\t// so leave loopCount at -1\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( time >= duration || time < 0 ) {\n\t    \t\t\t\t// wrap around\n\t\n\t    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t    \t\t\t\ttime -= duration * loopDelta;\n\t\n\t    \t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t    \t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t    \t\t\t\tif ( pending < 0 ) {\n\t    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\t// keep running\n\t\n\t    \t\t\t\t\tif ( pending === 0 ) {\n\t    \t\t\t\t\t\t// entering the last round\n\t\n\t    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t    \t\t\t\t// invert time for the \"pong round\"\n\t\n\t    \t\t\t\tthis.time = time;\n\t    \t\t\t\treturn duration - time;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.time = time;\n\t    \t\treturn time;\n\t\n\t    \t},\n\t\n\t    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t    \t\tvar settings = this._interpolantSettings;\n\t\n\t    \t\tif ( pingPong ) {\n\t\n\t    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t    \t\t\tif ( atStart ) {\n\t\n\t    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( atEnd ) {\n\t\n\t    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._weightInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Player for AnimationClips.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationMixer( root ) {\n\t\n\t    \tthis._root = root;\n\t    \tthis._initMemoryManager();\n\t    \tthis._accuIndex = 0;\n\t\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1.0;\n\t\n\t    }\n\t\n\t    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\t\n\t    \t// return an action for a clip optionally using a custom root target\n\t    \t// object (this method allocates a lot of dynamic memory in case a\n\t    \t// previously unknown clip/root combination is specified)\n\t    \tclipAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t    \t\t\tprototypeAction = null;\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\tvar existingAction =\n\t    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( existingAction !== undefined ) {\n\t\n\t    \t\t\t\treturn existingAction;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// we know the clip, so we don't have to parse all\n\t    \t\t\t// the bindings again but can just copy\n\t    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t    \t\t\t// also, take the clip from the prototype action\n\t    \t\t\tif ( clipObject === null )\n\t    \t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t    \t\t}\n\t\n\t    \t\t// clip must be known when specified via string\n\t    \t\tif ( clipObject === null ) return null;\n\t\n\t    \t\t// allocate all resources required to run it\n\t    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\t\n\t    \t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t    \t\t// and make the action known to the memory manager\n\t    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t    \t\treturn newAction;\n\t\n\t    \t},\n\t\n\t    \t// get an existing action\n\t    \texistingAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// deactivates all previously scheduled actions\n\t    \tstopAllAction: function() {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tthis._nActiveActions = 0;\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tactions[ i ].reset();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].useCount = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// advance the time and update apply the animation\n\t    \tupdate: function( deltaTime ) {\n\t\n\t    \t\tdeltaTime *= this.timeScale;\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t\n\t    \t\t\ttime = this.time += deltaTime,\n\t    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t    \t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t    \t\t// run active actions\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tvar action = actions[ i ];\n\t\n\t    \t\t\tif ( action.enabled ) {\n\t\n\t    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// return this mixer's root target object\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._root;\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular clip\n\t    \tuncacheClip: function( clip ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tclipUuid = clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\t// note: just calling _removeInactiveAction would mess up the\n\t    \t\t\t// iteration state and also require updating the state we can\n\t    \t\t\t// just throw away\n\t\n\t    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t\n\t    \t\t\t\tvar cacheIndex = action._cacheIndex,\n\t    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t    \t\t\t\taction._cacheIndex = null;\n\t    \t\t\t\taction._byClipCacheIndex = null;\n\t\n\t    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\t\t\tactions.pop();\n\t\n\t    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular root target object\n\t    \tuncacheRoot: function( root ) {\n\t\n\t    \t\tvar rootUuid = root.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip;\n\t\n\t    \t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t    \t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( action !== undefined ) {\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t    \t\t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingByName !== undefined ) {\n\t\n\t    \t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t    \t\t\t\tvar binding = bindingByName[ trackName ];\n\t    \t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remove a targeted clip from the cache\n\t    \tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t    \t\tif ( action !== null ) {\n\t\n\t    \t\t\tthis._deactivateAction( action );\n\t    \t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    // Implementation details:\n\t\n\t    Object.assign( AnimationMixer.prototype, {\n\t\n\t    \t_bindAction: function( action, prototypeAction ) {\n\t\n\t    \t\tvar root = action._localRoot || this._root,\n\t    \t\t\ttracks = action._clip.tracks,\n\t    \t\t\tnTracks = tracks.length,\n\t    \t\t\tbindings = action._propertyBindings,\n\t    \t\t\tinterpolants = action._interpolants,\n\t    \t\t\trootUuid = root.uuid,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingsByName === undefined ) {\n\t\n\t    \t\t\tbindingsByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\t\tvar track = tracks[ i ],\n\t    \t\t\t\ttrackName = track.name,\n\t    \t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t    \t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbinding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t    \t\t\t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar path = prototypeAction && prototypeAction.\n\t    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t    \t\t\t\tbinding = new PropertyMixer(\n\t    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t    \t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_activateAction: function( action ) {\n\t\n\t    \t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tif ( action._cacheIndex === null ) {\n\t\n\t    \t\t\t\t// this action has been forgotten by the cache, but the user\n\t    \t\t\t\t// appears to be still using it -> rebind\n\t\n\t    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t    \t\t\t\t\tclipUuid = action._clip.uuid,\n\t    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\t\t\tthis._bindAction( action,\n\t    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// increment reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t    \t\t\t\t\tthis._lendBinding( binding );\n\t    \t\t\t\t\tbinding.saveOriginalState();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._lendAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_deactivateAction: function( action ) {\n\t\n\t    \t\tif ( this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// decrement reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t    \t\t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._takeBackAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// Memory manager\n\t\n\t    \t_initMemoryManager: function() {\n\t\n\t    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t    \t\tthis._nActiveActions = 0;\n\t\n\t    \t\tthis._actionsByClip = {};\n\t    \t\t// inside:\n\t    \t\t// {\n\t    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t    \t\t// }\n\t\n\t\n\t    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t    \t\tthis._controlInterpolants = []; // same game as above\n\t    \t\tthis._nActiveControlInterpolants = 0;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tthis.stats = {\n\t\n\t    \t\t\tactions: {\n\t    \t\t\t\tget total() { return scope._actions.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveActions; }\n\t    \t\t\t},\n\t    \t\t\tbindings: {\n\t    \t\t\t\tget total() { return scope._bindings.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t    \t\t\t},\n\t    \t\t\tcontrolInterpolants: {\n\t    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \t// Memory management for AnimationAction objects\n\t\n\t    \t_isActiveAction: function( action ) {\n\t\n\t    \t\tvar index = action._cacheIndex;\n\t    \t\treturn index !== null && index < this._nActiveActions;\n\t\n\t    \t},\n\t\n\t    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip === undefined ) {\n\t\n\t    \t\t\tactionsForClip = {\n\t\n\t    \t\t\t\tknownActions: [ action ],\n\t    \t\t\t\tactionByRoot: {}\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\taction._byClipCacheIndex = 0;\n\t\n\t    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t    \t\t\taction._byClipCacheIndex = knownActions.length;\n\t    \t\t\tknownActions.push( action );\n\t\n\t    \t\t}\n\t\n\t    \t\taction._cacheIndex = actions.length;\n\t    \t\tactions.push( action );\n\t\n\t    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveAction: function( action ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t    \t\t\tcacheIndex = action._cacheIndex;\n\t\n\t    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\tactions.pop();\n\t\n\t    \t\taction._cacheIndex = null;\n\t\n\t\n\t    \t\tvar clipUuid = action._clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t    \t\t\tlastKnownAction =\n\t    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t    \t\tknownActionsForClip.pop();\n\t\n\t    \t\taction._byClipCacheIndex = null;\n\t\n\t\n\t    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t    \t\tdelete actionByRoot[ rootUuid ];\n\t\n\t    \t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t    \t\tvar bindings = action._propertyBindings;\n\t    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendAction: function( action ) {\n\t\n\t    \t\t// [ active actions |  inactive actions  ]\n\t    \t\t// [  active actions >| inactive actions ]\n\t    \t\t//                 s        a\n\t    \t\t//                  <-swap->\n\t    \t\t//                 a        s\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t    \t\taction._cacheIndex = lastActiveIndex;\n\t    \t\tactions[ lastActiveIndex ] = action;\n\t\n\t    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t    \t},\n\t\n\t    \t_takeBackAction: function( action ) {\n\t\n\t    \t\t// [  active actions  | inactive actions ]\n\t    \t\t// [ active actions |< inactive actions  ]\n\t    \t\t//        a        s\n\t    \t\t//         <-swap->\n\t    \t\t//        s        a\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t    \t\taction._cacheIndex = firstInactiveIndex;\n\t    \t\tactions[ firstInactiveIndex ] = action;\n\t\n\t    \t\tlastActiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t    \t},\n\t\n\t    \t// Memory management for PropertyMixer objects\n\t\n\t    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( bindingByName === undefined ) {\n\t\n\t    \t\t\tbindingByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tbindingByName[ trackName ] = binding;\n\t\n\t    \t\tbinding._cacheIndex = bindings.length;\n\t    \t\tbindings.push( binding );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tpropBinding = binding.binding,\n\t    \t\t\trootUuid = propBinding.rootNode.uuid,\n\t    \t\t\ttrackName = propBinding.path,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t    \t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t    \t\tbindings.pop();\n\t\n\t    \t\tdelete bindingByName[ trackName ];\n\t\n\t    \t\tremove_empty_map: {\n\t\n\t    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = lastActiveIndex;\n\t    \t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t    \t},\n\t\n\t    \t_takeBackBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = firstInactiveIndex;\n\t    \t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t    \t\tlastActiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t    \t},\n\t\n\t\n\t    \t// Memory management of Interpolants for weight and time scale\n\t\n\t    \t_lendControlInterpolant: function() {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t    \t\tif ( interpolant === undefined ) {\n\t\n\t    \t\t\tinterpolant = new LinearInterpolant(\n\t    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn interpolant;\n\t\n\t    \t},\n\t\n\t    \t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t    \t},\n\t\n\t    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Uniform( value ) {\n\t\n\t    \tif ( typeof value === 'string' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t    \t\tvalue = arguments[ 1 ];\n\t\n\t    \t}\n\t\n\t    \tthis.value = value;\n\t\n\t    \tthis.dynamic = false;\n\t\n\t    }\n\t\n\t    Uniform.prototype = {\n\t\n\t    \tconstructor: Uniform,\n\t\n\t    \tonUpdate: function ( callback ) {\n\t\n\t    \t\tthis.dynamic = true;\n\t    \t\tthis.onUpdateCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferGeometry() {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'InstancedBufferGeometry';\n\t    \tthis.maxInstancedCount = undefined;\n\t\n\t    }\n\t\n\t    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\t\n\t    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\t\n\t    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\t\n\t    \tthis.groups.push( {\n\t\n\t    \t\tstart: start,\n\t    \t\tcount: count,\n\t    \t\tinstances: instances\n\t\n\t    \t} );\n\t\n\t    };\n\t\n\t    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t    \tvar index = source.index;\n\t\n\t    \tif ( index !== null ) {\n\t\n\t    \t\tthis.setIndex( index.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar attributes = source.attributes;\n\t\n\t    \tfor ( var name in attributes ) {\n\t\n\t    \t\tvar attribute = attributes[ name ];\n\t    \t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar groups = source.groups;\n\t\n\t    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\tvar group = groups[ i ];\n\t    \t\tthis.addGroup( group.start, group.count, group.instances );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.data = interleavedBuffer;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.offset = offset;\n\t\n\t    \tthis.normalized = normalized === true;\n\t\n\t    }\n\t\n\t\n\t    InterleavedBufferAttribute.prototype = {\n\t\n\t    \tconstructor: InterleavedBufferAttribute,\n\t\n\t    \tisInterleavedBufferAttribute: true,\n\t\n\t    \tget count() {\n\t\n\t    \t\treturn this.data.count;\n\t\n\t    \t},\n\t\n\t    \tget array() {\n\t\n\t    \t\treturn this.data.array;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t    \t\tthis.data.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBuffer( array, stride ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.stride = stride;\n\t    \tthis.count = array !== undefined ? array.length / stride : 0;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    InterleavedBuffer.prototype = {\n\t\n\t    \tconstructor: InterleavedBuffer,\n\t\n\t    \tisInterleavedBuffer: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.stride = source.stride;\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.stride;\n\t    \t\tindex2 *= attribute.stride;\n\t\n\t    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\t\n\t    \tInterleavedBuffer.call( this, array, stride );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\t    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\t\n\t    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\t\n\t    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t    \tInterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\t\n\t    \tBufferAttribute.call( this, array, itemSize );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\t    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\t\n\t    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\t\n\t    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t    \tBufferAttribute.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author bhouston / http://clara.io/\n\t     * @author stephomi / http://stephaneginier.com/\n\t     */\n\t\n\t    function Raycaster( origin, direction, near, far ) {\n\t\n\t    \tthis.ray = new Ray( origin, direction );\n\t    \t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \tthis.near = near || 0;\n\t    \tthis.far = far || Infinity;\n\t\n\t    \tthis.params = {\n\t    \t\tMesh: {},\n\t    \t\tLine: {},\n\t    \t\tLOD: {},\n\t    \t\tPoints: { threshold: 1 },\n\t    \t\tSprite: {}\n\t    \t};\n\t\n\t    \tObject.defineProperties( this.params, {\n\t    \t\tPointCloud: {\n\t    \t\t\tget: function () {\n\t    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t    \t\t\t\treturn this.Points;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    function ascSort( a, b ) {\n\t\n\t    \treturn a.distance - b.distance;\n\t\n\t    }\n\t\n\t    function intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t    \tif ( object.visible === false ) return;\n\t\n\t    \tobject.raycast( raycaster, intersects );\n\t\n\t    \tif ( recursive === true ) {\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    //\n\t\n\t    Raycaster.prototype = {\n\t\n\t    \tconstructor: Raycaster,\n\t\n\t    \tlinePrecision: 1,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \t\tthis.ray.set( origin, direction );\n\t\n\t    \t},\n\t\n\t    \tsetFromCamera: function ( coords, camera ) {\n\t\n\t    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tintersectObject: function ( object, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tintersectObject( object, this, intersects, recursive );\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t},\n\t\n\t    \tintersectObjects: function ( objects, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t    \t\t\treturn intersects;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t    \t\t}\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Clock( autoStart ) {\n\t\n\t    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.oldTime = 0;\n\t    \tthis.elapsedTime = 0;\n\t\n\t    \tthis.running = false;\n\t\n\t    }\n\t\n\t    Clock.prototype = {\n\t\n\t    \tconstructor: Clock,\n\t\n\t    \tstart: function () {\n\t\n\t    \t\tthis.startTime = ( performance || Date ).now();\n\t\n\t    \t\tthis.oldTime = this.startTime;\n\t    \t\tthis.running = true;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tthis.getElapsedTime();\n\t    \t\tthis.running = false;\n\t\n\t    \t},\n\t\n\t    \tgetElapsedTime: function () {\n\t\n\t    \t\tthis.getDelta();\n\t    \t\treturn this.elapsedTime;\n\t\n\t    \t},\n\t\n\t    \tgetDelta: function () {\n\t\n\t    \t\tvar diff = 0;\n\t\n\t    \t\tif ( this.autoStart && ! this.running ) {\n\t\n\t    \t\t\tthis.start();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.running ) {\n\t\n\t    \t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t    \t\t\tthis.oldTime = newTime;\n\t\n\t    \t\t\tthis.elapsedTime += diff;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn diff;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Spline from Tween.js, slightly optimized (and trashed)\n\t     * http://sole.github.com/tween.js/examples/05_spline.html\n\t     *\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Spline( points ) {\n\t\n\t    \tthis.points = points;\n\t\n\t    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t    \tpoint, intPoint, weight, w2, w3,\n\t    \tpa, pb, pc, pd;\n\t\n\t    \tthis.initFromArray = function ( a ) {\n\t\n\t    \t\tthis.points = [];\n\t\n\t    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.getPoint = function ( k ) {\n\t\n\t    \t\tpoint = ( this.points.length - 1 ) * k;\n\t    \t\tintPoint = Math.floor( point );\n\t    \t\tweight = point - intPoint;\n\t\n\t    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t    \t\tc[ 1 ] = intPoint;\n\t    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t    \t\tpa = this.points[ c[ 0 ] ];\n\t    \t\tpb = this.points[ c[ 1 ] ];\n\t    \t\tpc = this.points[ c[ 2 ] ];\n\t    \t\tpd = this.points[ c[ 3 ] ];\n\t\n\t    \t\tw2 = weight * weight;\n\t    \t\tw3 = weight * w2;\n\t\n\t    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t    \t\treturn v3;\n\t\n\t    \t};\n\t\n\t    \tthis.getControlPointsArray = function () {\n\t\n\t    \t\tvar i, p, l = this.points.length,\n\t    \t\t\tcoords = [];\n\t\n\t    \t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t    \t\t\tp = this.points[ i ];\n\t    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn coords;\n\t\n\t    \t};\n\t\n\t    \t// approximate length by summing linear segments\n\t\n\t    \tthis.getLength = function ( nSubDivisions ) {\n\t\n\t    \t\tvar i, index, nSamples, position,\n\t    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t    \t\t\toldPosition = new Vector3(),\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tchunkLengths = [],\n\t    \t\t\ttotalLength = 0;\n\t\n\t    \t\t// first point has 0 length\n\t\n\t    \t\tchunkLengths[ 0 ] = 0;\n\t\n\t    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t    \t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t    \t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t    \t\t\tindex = i / nSamples;\n\t\n\t    \t\t\tposition = this.getPoint( index );\n\t    \t\t\ttmpVec.copy( position );\n\t\n\t    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t    \t\t\toldPosition.copy( position );\n\t\n\t    \t\t\tpoint = ( this.points.length - 1 ) * index;\n\t    \t\t\tintPoint = Math.floor( point );\n\t\n\t    \t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t    \t\t\t\toldIntPoint = intPoint;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// last point ends with total length\n\t\n\t    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t    \t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t    \t};\n\t\n\t    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t    \t\tvar i, j,\n\t    \t\t\tindex, indexCurrent, indexNext,\n\t    \t\t\trealDistance,\n\t    \t\t\tsampling, position,\n\t    \t\t\tnewpoints = [],\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tsl = this.getLength();\n\t\n\t    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t    \t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t    \t\t\t\tposition = this.getPoint( index );\n\t    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.points = newpoints;\n\t\n\t    \t};\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t     *\n\t     * The poles (phi) are at the positive and negative y axis.\n\t     * The equator starts at positive z.\n\t     */\n\t\n\t    function Spherical( radius, phi, theta ) {\n\t\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    Spherical.prototype = {\n\t\n\t    \tconstructor: Spherical,\n\t\n\t    \tset: function ( radius, phi, theta ) {\n\t\n\t    \t\tthis.radius = radius;\n\t    \t\tthis.phi = phi;\n\t    \t\tthis.theta = theta;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( other ) {\n\t\n\t    \t\tthis.radius.copy( other.radius );\n\t    \t\tthis.phi.copy( other.phi );\n\t    \t\tthis.theta.copy( other.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// restrict phi to be betwee EPS and PI-EPS\n\t    \tmakeSafe: function() {\n\t\n\t    \t\tvar EPS = 0.000001;\n\t    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromVector3: function( vec3 ) {\n\t\n\t    \t\tthis.radius = vec3.length();\n\t\n\t    \t\tif ( this.radius === 0 ) {\n\t\n\t    \t\t\tthis.theta = 0;\n\t    \t\t\tthis.phi = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    };\n\t\n\t    /**\r\n\t     * @author alteredq / http://alteredqualia.com/\r\n\t     */\r\n\t\r\n\t    function MorphBlendMesh( geometry, material ) {\n\t\r\n\t    \tMesh.call( this, geometry, material );\r\n\t\r\n\t    \tthis.animationsMap = {};\r\n\t    \tthis.animationsList = [];\r\n\t\r\n\t    \t// prepare default animation\r\n\t    \t// (all frames played together in 1 second)\r\n\t\r\n\t    \tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t    \tvar name = \"__default\";\r\n\t\r\n\t    \tvar startFrame = 0;\r\n\t    \tvar endFrame = numFrames - 1;\r\n\t\r\n\t    \tvar fps = numFrames / 1;\r\n\t\r\n\t    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t    \tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t    }\r\n\t\r\n\t    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\t    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\t\r\n\t    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t    \tvar animation = {\r\n\t\r\n\t    \t\tstart: start,\r\n\t    \t\tend: end,\r\n\t\r\n\t    \t\tlength: end - start + 1,\r\n\t\r\n\t    \t\tfps: fps,\r\n\t    \t\tduration: ( end - start ) / fps,\r\n\t\r\n\t    \t\tlastFrame: 0,\r\n\t    \t\tcurrentFrame: 0,\r\n\t\r\n\t    \t\tactive: false,\r\n\t\r\n\t    \t\ttime: 0,\r\n\t    \t\tdirection: 1,\r\n\t    \t\tweight: 1,\r\n\t\r\n\t    \t\tdirectionBackwards: false,\r\n\t    \t\tmirroredLoop: false\r\n\t\r\n\t    \t};\r\n\t\r\n\t    \tthis.animationsMap[ name ] = animation;\r\n\t    \tthis.animationsList.push( animation );\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t    \tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t    \tvar geometry = this.geometry;\r\n\t\r\n\t    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar morph = geometry.morphTargets[ i ];\r\n\t    \t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t    \t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t    \t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t    \t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t    \t\t\tif ( i < range.start ) range.start = i;\r\n\t    \t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tfor ( var name in frameRanges ) {\r\n\t\r\n\t    \t\tvar range = frameRanges[ name ];\r\n\t    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = 1;\r\n\t    \t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = - 1;\r\n\t    \t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.fps = fps;\r\n\t    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.duration = duration;\r\n\t    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.weight = weight;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t    \tvar time = 0;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\ttime = animation.time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn time;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t    \tvar duration = - 1;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tduration = animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn duration;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = 0;\r\n\t    \t\tanimation.active = true;\r\n\t\r\n\t    \t} else {\r\n\t\r\n\t    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.active = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t    \t\tif ( ! animation.active ) continue;\r\n\t\r\n\t    \t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t    \t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t    \t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = animation.duration;\r\n\t    \t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = 0;\r\n\t    \t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t}\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t    \t\tvar weight = animation.weight;\r\n\t\r\n\t    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t    \t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function ImmediateRenderObject( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.material = material;\n\t    \tthis.render = function ( renderCallback ) {};\n\t\n\t    }\n\t\n\t    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\t    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\t\n\t    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\t\n\t    VertexNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\t\tvar faces = objGeometry.faces;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function SpotLightHelper( light ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = [\n\t    \t\t0, 0, 0,   0,   0,   1,\n\t    \t\t0, 0, 0,   1,   0,   1,\n\t    \t\t0, 0, 0, - 1,   0,   1,\n\t    \t\t0, 0, 0,   0,   1,   1,\n\t    \t\t0, 0, 0,   0, - 1,   1\n\t    \t];\n\t\n\t    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t    \t\tpositions.push(\n\t    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.cone = new LineSegments( geometry, material );\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\t\n\t    SpotLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.cone.geometry.dispose();\n\t    \tthis.cone.material.dispose();\n\t\n\t    };\n\t\n\t    SpotLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar vector2 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author Sean Griffin / http://twitter.com/sgrif\n\t     * @author Michael Guerrero / http://realitymeltdown.com\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkeletonHelper( object ) {\n\t\n\t    \tthis.bones = this.getBoneList( object );\n\t\n\t    \tvar geometry = new Geometry();\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.dynamic = true;\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.root = object;\n\t\n\t    \tthis.matrix = object.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t\n\t    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\t\n\t    SkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t    \tvar boneList = [];\n\t\n\t    \tif ( (object && object.isBone) ) {\n\t\n\t    \t\tboneList.push( object );\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t    \t}\n\t\n\t    \treturn boneList;\n\t\n\t    };\n\t\n\t    SkeletonHelper.prototype.update = function () {\n\t\n\t    \tvar geometry = this.geometry;\n\t\n\t    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t    \tvar boneMatrix = new Matrix4();\n\t\n\t    \tvar j = 0;\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tj += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.verticesNeedUpdate = true;\n\t\n\t    \tgeometry.computeBoundingSphere();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function PointLightHelper( light, sphereSize ) {\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.matrix = this.light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \t/*\n\t    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t    \tvar d = light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t\n\t    \tthis.add( this.lightDistance );\n\t    \t*/\n\t\n\t    }\n\t\n\t    PointLightHelper.prototype = Object.create( Mesh.prototype );\n\t    PointLightHelper.prototype.constructor = PointLightHelper;\n\t\n\t    PointLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.geometry.dispose();\n\t    \tthis.material.dispose();\n\t\n\t    };\n\t\n\t    PointLightHelper.prototype.update = function () {\n\t\n\t    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t/*\n\t    \tvar d = this.light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.visible = true;\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function HemisphereLightHelper( light, sphereSize ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.colors = [ new Color(), new Color() ];\n\t\n\t    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t    \tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t    \t}\n\t\n\t    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\t\n\t    \tthis.lightSphere = new Mesh( geometry, material );\n\t    \tthis.add( this.lightSphere );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\t\n\t    HemisphereLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.lightSphere.geometry.dispose();\n\t    \tthis.lightSphere.material.dispose();\n\t\n\t    };\n\t\n\t    HemisphereLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function GridHelper( size, divisions, color1, color2 ) {\n\t\n\t    \tdivisions = divisions || 1;\n\t    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t    \tvar center = divisions / 2;\n\t    \tvar step = ( size * 2 ) / divisions;\n\t    \tvar vertices = [], colors = [];\n\t\n\t    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t    \t\tvertices.push( - size, 0, k, size, 0, k );\n\t    \t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t    \t\tvar color = i === center ? color1 : color2;\n\t\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t    \t}\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    GridHelper.prototype = Object.create( LineSegments.prototype );\n\t    GridHelper.prototype.constructor = GridHelper;\n\t\n\t    GridHelper.prototype.setColors = function () {\n\t\n\t    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length;\n\t\n\t    \t} else {\n\t\n\t    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\t\n\t    FaceNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\tvar faces = objGeometry.faces;\n\t\n\t    \t\tvar idx = 0;\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tvar normal = face.normal;\n\t\n\t    \t\t\tv1.copy( vertices[ face.a ] )\n\t    \t\t\t\t.add( vertices[ face.b ] )\n\t    \t\t\t\t.add( vertices[ face.c ] )\n\t    \t\t\t\t.divideScalar( 3 )\n\t    \t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function DirectionalLightHelper( light, size ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tif ( size === undefined ) size = 1;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t    \t\t- size,   size, 0,\n\t    \t\t  size,   size, 0,\n\t    \t\t  size, - size, 0,\n\t    \t\t- size, - size, 0,\n\t    \t\t- size,   size, 0\n\t    \t], 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.add( new Line( geometry, material ) );\n\t\n\t    \tgeometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t    \tthis.add( new Line( geometry, material ));\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\t\n\t    DirectionalLightHelper.prototype.dispose = function () {\n\t\n\t    \tvar lightPlane = this.children[ 0 ];\n\t    \tvar targetLine = this.children[ 1 ];\n\t\n\t    \tlightPlane.geometry.dispose();\n\t    \tlightPlane.material.dispose();\n\t    \ttargetLine.geometry.dispose();\n\t    \ttargetLine.material.dispose();\n\t\n\t    };\n\t\n\t    DirectionalLightHelper.prototype.update = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar v3 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t    \t\tv3.subVectors( v2, v1 );\n\t\n\t    \t\tvar lightPlane = this.children[ 0 ];\n\t    \t\tvar targetLine = this.children[ 1 ];\n\t\n\t    \t\tlightPlane.lookAt( v3 );\n\t    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\ttargetLine.lookAt( v3 );\n\t    \t\ttargetLine.scale.z = v3.length();\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     *\t- shows frustum, line of sight and up of the camera\n\t     *\t- suitable for fast updates\n\t     * \t- based on frustum visualization in lightgl.js shadowmap example\n\t     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t     */\n\t\n\t    function CameraHelper( camera ) {\n\t\n\t    \tvar geometry = new Geometry();\n\t    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\t\n\t    \tvar pointMap = {};\n\t\n\t    \t// colors\n\t\n\t    \tvar hexFrustum = 0xffaa00;\n\t    \tvar hexCone = 0xff0000;\n\t    \tvar hexUp = 0x00aaff;\n\t    \tvar hexTarget = 0xffffff;\n\t    \tvar hexCross = 0x333333;\n\t\n\t    \t// near\n\t\n\t    \taddLine( \"n1\", \"n2\", hexFrustum );\n\t    \taddLine( \"n2\", \"n4\", hexFrustum );\n\t    \taddLine( \"n4\", \"n3\", hexFrustum );\n\t    \taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t    \t// far\n\t\n\t    \taddLine( \"f1\", \"f2\", hexFrustum );\n\t    \taddLine( \"f2\", \"f4\", hexFrustum );\n\t    \taddLine( \"f4\", \"f3\", hexFrustum );\n\t    \taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t    \t// sides\n\t\n\t    \taddLine( \"n1\", \"f1\", hexFrustum );\n\t    \taddLine( \"n2\", \"f2\", hexFrustum );\n\t    \taddLine( \"n3\", \"f3\", hexFrustum );\n\t    \taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t    \t// cone\n\t\n\t    \taddLine( \"p\", \"n1\", hexCone );\n\t    \taddLine( \"p\", \"n2\", hexCone );\n\t    \taddLine( \"p\", \"n3\", hexCone );\n\t    \taddLine( \"p\", \"n4\", hexCone );\n\t\n\t    \t// up\n\t\n\t    \taddLine( \"u1\", \"u2\", hexUp );\n\t    \taddLine( \"u2\", \"u3\", hexUp );\n\t    \taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t    \t// target\n\t\n\t    \taddLine( \"c\", \"t\", hexTarget );\n\t    \taddLine( \"p\", \"c\", hexCross );\n\t\n\t    \t// cross\n\t\n\t    \taddLine( \"cn1\", \"cn2\", hexCross );\n\t    \taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t    \taddLine( \"cf1\", \"cf2\", hexCross );\n\t    \taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t    \tfunction addLine( a, b, hex ) {\n\t\n\t    \t\taddPoint( a, hex );\n\t    \t\taddPoint( b, hex );\n\t\n\t    \t}\n\t\n\t    \tfunction addPoint( id, hex ) {\n\t\n\t    \t\tgeometry.vertices.push( new Vector3() );\n\t    \t\tgeometry.colors.push( new Color( hex ) );\n\t\n\t    \t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t    \t\t\tpointMap[ id ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t    \t}\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.camera = camera;\n\t    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t    \tthis.matrix = camera.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.pointMap = pointMap;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    CameraHelper.prototype = Object.create( LineSegments.prototype );\n\t    CameraHelper.prototype.constructor = CameraHelper;\n\t\n\t    CameraHelper.prototype.update = function () {\n\t\n\t    \tvar geometry, pointMap;\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar camera = new Camera();\n\t\n\t    \tfunction setPoint( point, x, y, z ) {\n\t\n\t    \t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t    \t\tvar points = pointMap[ point ];\n\t\n\t    \t\tif ( points !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tgeometry = this.geometry;\n\t    \t\tpointMap = this.pointMap;\n\t\n\t    \t\tvar w = 1, h = 1;\n\t\n\t    \t\t// we need just camera projection matrix\n\t    \t\t// world matrix must be identity\n\t\n\t    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t    \t\t// center / target\n\t\n\t    \t\tsetPoint( \"c\", 0, 0, - 1 );\n\t    \t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t    \t\t// near\n\t\n\t    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t    \t\t// far\n\t\n\t    \t\tsetPoint( \"f1\", - w, - h, 1 );\n\t    \t\tsetPoint( \"f2\",   w, - h, 1 );\n\t    \t\tsetPoint( \"f3\", - w,   h, 1 );\n\t    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t    \t\t// up\n\t\n\t    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t    \t\t// cross\n\t\n\t    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t    \t\tgeometry.verticesNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    // a helper to show the world-axis-aligned bounding box for an object\n\t\n\t    function BoundingBoxHelper( object, hex ) {\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.box = new Box3();\n\t\n\t    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t    }\n\t\n\t    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\t    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\t\n\t    BoundingBoxHelper.prototype.update = function () {\n\t\n\t    \tthis.box.setFromObject( this.object );\n\t\n\t    \tthis.box.size( this.scale );\n\t\n\t    \tthis.box.getCenter( this.position );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BoxHelper( object, color ) {\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t\n\t    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t    \tvar positions = new Float32Array( 8 * 3 );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\t\n\t    \tif ( object !== undefined ) {\n\t\n\t    \t\tthis.update( object );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxHelper.prototype = Object.create( LineSegments.prototype );\n\t    BoxHelper.prototype.constructor = BoxHelper;\n\t\n\t    BoxHelper.prototype.update = ( function () {\n\t\n\t    \tvar box = new Box3();\n\t\n\t    \treturn function update( object ) {\n\t\n\t    \t\tif ( (object && object.isBox3) ) {\n\t\n\t    \t\t\tbox.copy( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tbox.setFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( box.isEmpty() ) return;\n\t\n\t    \t\tvar min = box.min;\n\t    \t\tvar max = box.max;\n\t\n\t    \t\t/*\n\t    \t\t  5____4\n\t    \t\t1/___0/|\n\t    \t\t| 6__|_7\n\t    \t\t2/___3/\n\t\n\t    \t\t0: max.x, max.y, max.z\n\t    \t\t1: min.x, max.y, max.z\n\t    \t\t2: min.x, min.y, max.z\n\t    \t\t3: max.x, min.y, max.z\n\t    \t\t4: max.x, max.y, min.z\n\t    \t\t5: min.x, max.y, min.z\n\t    \t\t6: min.x, min.y, min.z\n\t    \t\t7: max.x, min.y, min.z\n\t    \t\t*/\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t    \t\tvar array = position.array;\n\t\n\t    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\tthis.geometry.computeBoundingSphere();\n\t\n\t    \t};\n\t\n\t    } )();\n\t\n\t    var lineGeometry = new BufferGeometry();\n\t    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t    coneGeometry.translate( 0, - 0.5, 0 );\n\t\n\t    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t    \t// dir is assumed to be normalized\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t    \tif ( length === undefined ) length = 1;\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.position.copy( origin );\n\t\n\t    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t    \tthis.line.matrixAutoUpdate = false;\n\t    \tthis.add( this.line );\n\t\n\t    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t    \tthis.cone.matrixAutoUpdate = false;\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.setDirection( dir );\n\t    \tthis.setLength( length, headLength, headWidth );\n\t\n\t    }\n\t\n\t    ArrowHelper.prototype = Object.create( Object3D.prototype );\n\t    ArrowHelper.prototype.constructor = ArrowHelper;\n\t\n\t    ArrowHelper.prototype.setDirection = ( function () {\n\t\n\t    \tvar axis = new Vector3();\n\t    \tvar radians;\n\t\n\t    \treturn function setDirection( dir ) {\n\t\n\t    \t\t// dir is assumed to be normalized\n\t\n\t    \t\tif ( dir.y > 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t    \t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t    \t\t\tradians = Math.acos( dir.y );\n\t\n\t    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t    \tthis.line.updateMatrix();\n\t\n\t    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t    \tthis.cone.position.y = length;\n\t    \tthis.cone.updateMatrix();\n\t\n\t    };\n\t\n\t    ArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t    \tthis.line.material.color.copy( color );\n\t    \tthis.cone.material.color.copy( color );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author sroucheray / http://sroucheray.org/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AxisHelper( size ) {\n\t\n\t    \tsize = size || 1;\n\t\n\t    \tvar vertices = new Float32Array( [\n\t    \t\t0, 0, 0,  size, 0, 0,\n\t    \t\t0, 0, 0,  0, size, 0,\n\t    \t\t0, 0, 0,  0, 0, size\n\t    \t] );\n\t\n\t    \tvar colors = new Float32Array( [\n\t    \t\t1, 0, 0,  1, 0.6, 0,\n\t    \t\t0, 1, 0,  0.6, 1, 0,\n\t    \t\t0, 0, 1,  0, 0.6, 1\n\t    \t] );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    AxisHelper.prototype = Object.create( LineSegments.prototype );\n\t    AxisHelper.prototype.constructor = AxisHelper;\n\t\n\t    /**\n\t     * @author zz85 https://github.com/zz85\n\t     *\n\t     * Centripetal CatmullRom Curve - which is useful for avoiding\n\t     * cusps and self-intersections in non-uniform catmull rom curves.\n\t     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t     *\n\t     * curve.type accepts centripetal(default), chordal and catmullrom\n\t     * curve.tension is used for catmullrom which defaults to 0.5\n\t     */\n\t\n\t    exports.CatmullRomCurve3 = ( function() {\n\t\n\t    \tvar\n\t    \t\ttmp = new Vector3(),\n\t    \t\tpx = new CubicPoly(),\n\t    \t\tpy = new CubicPoly(),\n\t    \t\tpz = new CubicPoly();\n\t\n\t    \t/*\n\t    \tBased on an optimized c++ solution in\n\t    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t    \t - http://ideone.com/NoEbVM\n\t\n\t    \tThis CubicPoly class could be used for reusing some variables and calculations,\n\t    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t    \twhich can be placed in CurveUtils.\n\t    \t*/\n\t\n\t    \tfunction CubicPoly() {\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Compute coefficients for a cubic polynomial\n\t    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t    \t * such that\n\t    \t *   p(0) = x0, p(1) = x1\n\t    \t *  and\n\t    \t *   p'(0) = t0, p'(1) = t1.\n\t    \t */\n\t    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t    \t\tthis.c0 = x0;\n\t    \t\tthis.c1 = t0;\n\t    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t    \t\t// compute tangents when parameterized in [t1,t2]\n\t    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t    \t\t// rescale tangents for parametrization in [0,1]\n\t    \t\tt1 *= dt1;\n\t    \t\tt2 *= dt1;\n\t\n\t    \t\t// initCubicPoly\n\t    \t\tthis.init( x1, x2, t1, t2 );\n\t\n\t    \t};\n\t\n\t    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.calc = function( t ) {\n\t\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t2 * t;\n\t    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t    \t};\n\t\n\t    \t// Subclass Three.js curve\n\t    \treturn Curve.create(\n\t\n\t    \t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t    \t\t\tthis.points = p || [];\n\t    \t\t\tthis.closed = false;\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction ( t ) {\n\t\n\t    \t\t\tvar points = this.points,\n\t    \t\t\t\tpoint, intPoint, weight, l;\n\t\n\t    \t\t\tl = points.length;\n\t\n\t    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t    \t\t\tintPoint = Math.floor( point );\n\t    \t\t\tweight = point - intPoint;\n\t\n\t    \t\t\tif ( this.closed ) {\n\t\n\t    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t    \t\t\t\tintPoint = l - 2;\n\t    \t\t\t\tweight = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t    \t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate first point\n\t    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t    \t\t\t\tp0 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp1 = points[ intPoint % l ];\n\t    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate last point\n\t    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t    \t\t\t\tp3 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t    \t\t\t\t// safety check for repeated points\n\t    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar v = new Vector3(\n\t    \t\t\t\tpx.calc( weight ),\n\t    \t\t\t\tpy.calc( weight ),\n\t    \t\t\t\tpz.calc( weight )\n\t    \t\t\t);\n\t\n\t    \t\t\treturn v;\n\t\n\t    \t\t}\n\t\n\t    \t);\n\t\n\t    } )();\n\t\n\t    /**************************************************************\n\t     *\tClosed Spline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    function ClosedSplineCurve3( points ) {\n\t\n\t    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t    \texports.CatmullRomCurve3.call( this, points );\n\t    \tthis.type = 'catmullrom';\n\t    \tthis.closed = true;\n\t\n\t    }\n\t\n\t    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\t\n\t    /**************************************************************\n\t     *\tSpline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    var SplineCurve3 = Curve.create(\n\t\n\t    \tfunction ( points /* array of Vector3 */ ) {\n\t\n\t    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t    \t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar points = this.points;\n\t    \t\tvar point = ( points.length - 1 ) * t;\n\t\n\t    \t\tvar intPoint = Math.floor( point );\n\t    \t\tvar weight = point - intPoint;\n\t\n\t    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t    \t\tvar point1 = points[ intPoint ];\n\t    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.CubicBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2, v3 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t    \t\tthis.v3 = v3;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.QuadraticBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tLine3D\n\t     **************************************************************/\n\t\n\t    exports.LineCurve3 = Curve.create(\n\t\n\t    \tfunction ( v1, v2 ) {\n\t\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tif ( t === 1 ) {\n\t\n\t    \t\t\treturn this.v2.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t    \t\tvector.multiplyScalar( t );\n\t    \t\tvector.add( this.v1 );\n\t\n\t    \t\treturn vector;\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tArc curve\n\t     **************************************************************/\n\t\n\t    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    }\n\t\n\t    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\t    ArcCurve.prototype.constructor = ArcCurve;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    exports.SceneUtils = {\n\t\n\t    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t    \t\tvar group = new Group();\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn group;\n\t\n\t    \t},\n\t\n\t    \tdetach: function ( child, parent, scene ) {\n\t\n\t    \t\tchild.applyMatrix( parent.matrixWorld );\n\t    \t\tparent.remove( child );\n\t    \t\tscene.add( child );\n\t\n\t    \t},\n\t\n\t    \tattach: function ( child, scene, parent ) {\n\t\n\t    \t\tvar matrixWorldInverse = new Matrix4();\n\t    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t    \t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t    \t\tscene.remove( child );\n\t    \t\tparent.add( child );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t    \treturn new Face3( a, b, c, normal, color, materialIndex );\n\t    }\n\t\n\t    var LineStrip = 0;\n\t\n\t    var LinePieces = 1;\n\t\n\t    function PointCloud ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function ParticleSystem ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function PointCloudMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleBasicMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleSystemMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function Vertex ( x, y, z ) {\n\t    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t    \treturn new Vector3( x, y, z );\n\t    }\n\t\n\t    //\n\t\n\t    function EdgesHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    function WireframeHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    //\n\t\n\t    Object.assign( Box2.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Box3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Line3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix3.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix3( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix4.prototype, {\n\t    \textractPosition: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t    \t\treturn this.copyPosition( m );\n\t    \t},\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t    \t\treturn this.makeRotationFromQuaternion( q );\n\t    \t},\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t    \t\treturn vector.applyProjection( this );\n\t    \t},\n\t    \tmultiplyVector4: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t},\n\t    \trotateAxis: function ( v ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t    \t\tv.transformDirection( this );\n\t    \t},\n\t    \tcrossVector: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \ttranslate: function ( v ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t    \t},\n\t    \trotateX: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t    \t},\n\t    \trotateY: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t    \t},\n\t    \trotateZ: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t    \t},\n\t    \trotateByAxis: function ( axis, angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Plane.prototype, {\n\t    \tisIntersectionLine: function ( line ) {\n\t    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t    \t\treturn this.intersectsLine( line );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Quaternion.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t    \t\treturn vector.applyQuaternion( this );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Ray.prototype, {\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionPlane: function ( plane ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t    \t\treturn this.intersectsPlane( plane );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Shape.prototype, {\n\t    \textrude: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t    \t\treturn new ExtrudeGeometry( this, options );\n\t    \t},\n\t    \tmakeGeometry: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t    \t\treturn new ShapeGeometry( this, options );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Vector3.prototype, {\n\t    \tsetEulerFromRotationMatrix: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t    \t},\n\t    \tsetEulerFromQuaternion: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t    \t},\n\t    \tgetPositionFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t    \t\treturn this.setFromMatrixPosition( m );\n\t    \t},\n\t    \tgetScaleFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t    \t\treturn this.setFromMatrixScale( m );\n\t    \t},\n\t    \tgetColumnFromMatrix: function ( index, matrix ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t    \t\treturn this.setFromMatrixColumn( matrix, index );\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Object3D.prototype, {\n\t    \tgetChildByName: function ( name ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t    \t\treturn this.getObjectByName( name );\n\t    \t},\n\t    \trenderDepth: function ( value ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t    \t},\n\t    \ttranslate: function ( distance, axis ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t    \t\treturn this.translateOnAxis( axis, distance );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( Object3D.prototype, {\n\t    \teulerOrder: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\treturn this.rotation.order;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\tthis.rotation.order = value;\n\t    \t\t}\n\t    \t},\n\t    \tuseQuaternion: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( LOD.prototype, {\n\t    \tobjects: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t    \t\t\treturn this.levels;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t    \tthis.setFocalLength( focalLength );\n\t\n\t    };\n\t\n\t    //\n\t\n\t    Object.defineProperties( Light.prototype, {\n\t    \tonlyShadow: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFov: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t    \t\t\tthis.shadow.camera.fov = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraLeft: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t    \t\t\tthis.shadow.camera.left = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraRight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t    \t\t\tthis.shadow.camera.right = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraTop: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t    \t\t\tthis.shadow.camera.top = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraBottom: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t    \t\t\tthis.shadow.camera.bottom = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraNear: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t    \t\t\tthis.shadow.camera.near = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFar: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t    \t\t\tthis.shadow.camera.far = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraVisible: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowBias: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t    \t\t\tthis.shadow.bias = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowDarkness: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapWidth: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t    \t\t\tthis.shadow.mapSize.width = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapHeight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t    \t\t\tthis.shadow.mapSize.height = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( BufferAttribute.prototype, {\n\t    \tlength: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t    \t\t\treturn this.array.length;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( BufferGeometry.prototype, {\n\t    \taddIndex: function ( index ) {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t    \t\tthis.setIndex( index );\n\t    \t},\n\t    \taddDrawCall: function ( start, count, indexOffset ) {\n\t    \t\tif ( indexOffset !== undefined ) {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t    \t\t}\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t    \t\tthis.addGroup( start, count );\n\t    \t},\n\t    \tclearDrawCalls: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t    \t\tthis.clearGroups();\n\t    \t},\n\t    \tcomputeTangents: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t    \t},\n\t    \tcomputeOffsets: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( BufferGeometry.prototype, {\n\t    \tdrawcalls: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t},\n\t    \toffsets: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( Material.prototype, {\n\t    \twrapAround: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \twrapRGB: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t    \t\t\treturn new Color();\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( MeshPhongMaterial.prototype, {\n\t    \tmetal: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t    \t\t\treturn false;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( ShaderMaterial.prototype, {\n\t    \tderivatives: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\treturn this.extensions.derivatives;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\tthis.extensions.derivatives = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    EventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t    \tconstructor: EventDispatcher,\n\t\n\t    \tapply: function ( target ) {\n\t\n\t    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t    \t\tObject.assign( target, this );\n\t\n\t    \t}\n\t\n\t    } ), EventDispatcher.prototype );\n\t\n\t    //\n\t\n\t    Object.assign( WebGLRenderer.prototype, {\n\t    \tsupportsFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_float' );\n\t    \t},\n\t    \tsupportsHalfFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t    \t},\n\t    \tsupportsStandardDerivatives: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t    \t},\n\t    \tsupportsCompressedTextureS3TC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t    \t},\n\t    \tsupportsCompressedTexturePVRTC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t    \t},\n\t    \tsupportsBlendMinMax: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t    \t},\n\t    \tsupportsVertexTextures: function () {\n\t    \t\treturn this.capabilities.vertexTextures;\n\t    \t},\n\t    \tsupportsInstancedArrays: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t    \t},\n\t    \tenableScissorTest: function ( boolean ) {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t    \t\tthis.setScissorTest( boolean );\n\t    \t},\n\t    \tinitMaterial: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t    \t},\n\t    \taddPrePlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t    \t},\n\t    \taddPostPlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t    \t},\n\t    \tupdateShadowMap: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLRenderer.prototype, {\n\t    \tshadowMapEnabled: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.enabled;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t    \t\t\tthis.shadowMap.enabled = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapType: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t    \t\t\tthis.shadowMap.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapCullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.cullFace;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t    \t\t\tthis.shadowMap.cullFace = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLShadowMap.prototype, {\n\t    \tcullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t    \t\t},\n\t    \t\tset: function ( cullFace ) {\n\t    \t\t\tvar value = ( cullFace !== CullFaceBack );\n\t    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t    \t\t\tthis.renderReverseSided = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( WebGLRenderTarget.prototype, {\n\t    \twrapS: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\treturn this.texture.wrapS;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\tthis.texture.wrapS = value;\n\t    \t\t}\n\t    \t},\n\t    \twrapT: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\treturn this.texture.wrapT;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\tthis.texture.wrapT = value;\n\t    \t\t}\n\t    \t},\n\t    \tmagFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\treturn this.texture.magFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\tthis.texture.magFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tminFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\treturn this.texture.minFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\tthis.texture.minFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tanisotropy: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\treturn this.texture.anisotropy;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\tthis.texture.anisotropy = value;\n\t    \t\t}\n\t    \t},\n\t    \toffset: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\treturn this.texture.offset;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\tthis.texture.offset = value;\n\t    \t\t}\n\t    \t},\n\t    \trepeat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\treturn this.texture.repeat;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\tthis.texture.repeat = value;\n\t    \t\t}\n\t    \t},\n\t    \tformat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\treturn this.texture.format;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\tthis.texture.format = value;\n\t    \t\t}\n\t    \t},\n\t    \ttype: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\treturn this.texture.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\tthis.texture.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tgenerateMipmaps: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\treturn this.texture.generateMipmaps;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\tthis.texture.generateMipmaps = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Audio.prototype, {\n\t    \tload: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t    \t\tvar scope = this;\n\t    \t\tvar audioLoader = new AudioLoader();\n\t    \t\taudioLoader.load( file, function ( buffer ) {\n\t    \t\t\tscope.setBuffer( buffer );\n\t    \t\t} );\n\t    \t\treturn this;\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t    \tgetData: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t    \t\treturn this.getFrequencyData();\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    var GeometryUtils = {\n\t\n\t    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\tif ( geometry2.isMesh ) {\n\t\n\t    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t    \t\t\tmatrix = geometry2.matrix;\n\t    \t\t\tgeometry2 = geometry2.geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t    \t},\n\t\n\t    \tcenter: function ( geometry ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t    \t\treturn geometry.center();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var ImageUtils = {\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new TextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new CubeTextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTexture: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTextureCube: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Projector () {\n\t\n\t    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t    \tthis.projectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t    \t\tvector.project( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t    \t\tvector.unproject( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.pickingRay = function ( vector, camera ) {\n\t\n\t    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    //\n\t\n\t    function CanvasRenderer () {\n\t\n\t    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \tthis.clear = function () {};\n\t    \tthis.render = function () {};\n\t    \tthis.setClearColor = function () {};\n\t    \tthis.setSize = function () {};\n\t\n\t    }\n\t\n\t    Object.defineProperty( exports, 'AudioContext', {\n\t    \tget: function () {\n\t    \t\treturn exports.getAudioContext();\n\t    \t}\n\t    });\n\t\n\t    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\t    exports.WebGLRenderTarget = WebGLRenderTarget;\n\t    exports.WebGLRenderer = WebGLRenderer;\n\t    exports.ShaderLib = ShaderLib;\n\t    exports.UniformsLib = UniformsLib;\n\t    exports.ShaderChunk = ShaderChunk;\n\t    exports.FogExp2 = FogExp2;\n\t    exports.Fog = Fog;\n\t    exports.Scene = Scene;\n\t    exports.LensFlare = LensFlare;\n\t    exports.Sprite = Sprite;\n\t    exports.LOD = LOD;\n\t    exports.SkinnedMesh = SkinnedMesh;\n\t    exports.Skeleton = Skeleton;\n\t    exports.Bone = Bone;\n\t    exports.Mesh = Mesh;\n\t    exports.LineSegments = LineSegments;\n\t    exports.Line = Line;\n\t    exports.Points = Points;\n\t    exports.Group = Group;\n\t    exports.VideoTexture = VideoTexture;\n\t    exports.DataTexture = DataTexture;\n\t    exports.CompressedTexture = CompressedTexture;\n\t    exports.CubeTexture = CubeTexture;\n\t    exports.CanvasTexture = CanvasTexture;\n\t    exports.DepthTexture = DepthTexture;\n\t    exports.TextureIdCount = TextureIdCount;\n\t    exports.Texture = Texture;\n\t    exports.MaterialIdCount = MaterialIdCount;\n\t    exports.CompressedTextureLoader = CompressedTextureLoader;\n\t    exports.BinaryTextureLoader = BinaryTextureLoader;\n\t    exports.DataTextureLoader = DataTextureLoader;\n\t    exports.CubeTextureLoader = CubeTextureLoader;\n\t    exports.TextureLoader = TextureLoader;\n\t    exports.ObjectLoader = ObjectLoader;\n\t    exports.MaterialLoader = MaterialLoader;\n\t    exports.BufferGeometryLoader = BufferGeometryLoader;\n\t    exports.LoadingManager = LoadingManager;\n\t    exports.JSONLoader = JSONLoader;\n\t    exports.ImageLoader = ImageLoader;\n\t    exports.FontLoader = FontLoader;\n\t    exports.XHRLoader = XHRLoader;\n\t    exports.Loader = Loader;\n\t    exports.AudioLoader = AudioLoader;\n\t    exports.SpotLightShadow = SpotLightShadow;\n\t    exports.SpotLight = SpotLight;\n\t    exports.PointLight = PointLight;\n\t    exports.HemisphereLight = HemisphereLight;\n\t    exports.DirectionalLightShadow = DirectionalLightShadow;\n\t    exports.DirectionalLight = DirectionalLight;\n\t    exports.AmbientLight = AmbientLight;\n\t    exports.LightShadow = LightShadow;\n\t    exports.Light = Light;\n\t    exports.StereoCamera = StereoCamera;\n\t    exports.PerspectiveCamera = PerspectiveCamera;\n\t    exports.OrthographicCamera = OrthographicCamera;\n\t    exports.CubeCamera = CubeCamera;\n\t    exports.Camera = Camera;\n\t    exports.AudioListener = AudioListener;\n\t    exports.PositionalAudio = PositionalAudio;\n\t    exports.getAudioContext = getAudioContext;\n\t    exports.AudioAnalyser = AudioAnalyser;\n\t    exports.Audio = Audio;\n\t    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n\t    exports.StringKeyframeTrack = StringKeyframeTrack;\n\t    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\t    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n\t    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n\t    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\t    exports.PropertyMixer = PropertyMixer;\n\t    exports.PropertyBinding = PropertyBinding;\n\t    exports.KeyframeTrack = KeyframeTrack;\n\t    exports.AnimationObjectGroup = AnimationObjectGroup;\n\t    exports.AnimationMixer = AnimationMixer;\n\t    exports.AnimationClip = AnimationClip;\n\t    exports.Uniform = Uniform;\n\t    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n\t    exports.BufferGeometry = BufferGeometry;\n\t    exports.GeometryIdCount = GeometryIdCount;\n\t    exports.Geometry = Geometry;\n\t    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\t    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\t    exports.InterleavedBuffer = InterleavedBuffer;\n\t    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n\t    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n\t    exports.Float64Attribute = Float64Attribute;\n\t    exports.Float32Attribute = Float32Attribute;\n\t    exports.Uint32Attribute = Uint32Attribute;\n\t    exports.Int32Attribute = Int32Attribute;\n\t    exports.Uint16Attribute = Uint16Attribute;\n\t    exports.Int16Attribute = Int16Attribute;\n\t    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\t    exports.Uint8Attribute = Uint8Attribute;\n\t    exports.Int8Attribute = Int8Attribute;\n\t    exports.BufferAttribute = BufferAttribute;\n\t    exports.Face3 = Face3;\n\t    exports.Object3DIdCount = Object3DIdCount;\n\t    exports.Object3D = Object3D;\n\t    exports.Raycaster = Raycaster;\n\t    exports.Layers = Layers;\n\t    exports.EventDispatcher = EventDispatcher;\n\t    exports.Clock = Clock;\n\t    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\t    exports.LinearInterpolant = LinearInterpolant;\n\t    exports.DiscreteInterpolant = DiscreteInterpolant;\n\t    exports.CubicInterpolant = CubicInterpolant;\n\t    exports.Interpolant = Interpolant;\n\t    exports.Triangle = Triangle;\n\t    exports.Spline = Spline;\n\t    exports.Spherical = Spherical;\n\t    exports.Plane = Plane;\n\t    exports.Frustum = Frustum;\n\t    exports.Sphere = Sphere;\n\t    exports.Ray = Ray;\n\t    exports.Matrix4 = Matrix4;\n\t    exports.Matrix3 = Matrix3;\n\t    exports.Box3 = Box3;\n\t    exports.Box2 = Box2;\n\t    exports.Line3 = Line3;\n\t    exports.Euler = Euler;\n\t    exports.Vector4 = Vector4;\n\t    exports.Vector3 = Vector3;\n\t    exports.Vector2 = Vector2;\n\t    exports.Quaternion = Quaternion;\n\t    exports.Color = Color;\n\t    exports.MorphBlendMesh = MorphBlendMesh;\n\t    exports.ImmediateRenderObject = ImmediateRenderObject;\n\t    exports.VertexNormalsHelper = VertexNormalsHelper;\n\t    exports.SpotLightHelper = SpotLightHelper;\n\t    exports.SkeletonHelper = SkeletonHelper;\n\t    exports.PointLightHelper = PointLightHelper;\n\t    exports.HemisphereLightHelper = HemisphereLightHelper;\n\t    exports.GridHelper = GridHelper;\n\t    exports.FaceNormalsHelper = FaceNormalsHelper;\n\t    exports.DirectionalLightHelper = DirectionalLightHelper;\n\t    exports.CameraHelper = CameraHelper;\n\t    exports.BoundingBoxHelper = BoundingBoxHelper;\n\t    exports.BoxHelper = BoxHelper;\n\t    exports.ArrowHelper = ArrowHelper;\n\t    exports.AxisHelper = AxisHelper;\n\t    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\t    exports.SplineCurve3 = SplineCurve3;\n\t    exports.ArcCurve = ArcCurve;\n\t    exports.EllipseCurve = EllipseCurve;\n\t    exports.SplineCurve = SplineCurve;\n\t    exports.CubicBezierCurve = CubicBezierCurve;\n\t    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n\t    exports.LineCurve = LineCurve;\n\t    exports.Shape = Shape;\n\t    exports.ShapePath = ShapePath;\n\t    exports.Path = Path;\n\t    exports.Font = Font;\n\t    exports.CurvePath = CurvePath;\n\t    exports.Curve = Curve;\n\t    exports.WireframeGeometry = WireframeGeometry;\n\t    exports.ParametricGeometry = ParametricGeometry;\n\t    exports.TetrahedronGeometry = TetrahedronGeometry;\n\t    exports.OctahedronGeometry = OctahedronGeometry;\n\t    exports.IcosahedronGeometry = IcosahedronGeometry;\n\t    exports.DodecahedronGeometry = DodecahedronGeometry;\n\t    exports.PolyhedronGeometry = PolyhedronGeometry;\n\t    exports.TubeGeometry = TubeGeometry;\n\t    exports.TorusKnotGeometry = TorusKnotGeometry;\n\t    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\t    exports.TorusGeometry = TorusGeometry;\n\t    exports.TorusBufferGeometry = TorusBufferGeometry;\n\t    exports.TextGeometry = TextGeometry;\n\t    exports.SphereBufferGeometry = SphereBufferGeometry;\n\t    exports.SphereGeometry = SphereGeometry;\n\t    exports.RingGeometry = RingGeometry;\n\t    exports.RingBufferGeometry = RingBufferGeometry;\n\t    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n\t    exports.PlaneGeometry = PlaneGeometry;\n\t    exports.LatheGeometry = LatheGeometry;\n\t    exports.LatheBufferGeometry = LatheBufferGeometry;\n\t    exports.ShapeGeometry = ShapeGeometry;\n\t    exports.ExtrudeGeometry = ExtrudeGeometry;\n\t    exports.EdgesGeometry = EdgesGeometry;\n\t    exports.ConeGeometry = ConeGeometry;\n\t    exports.ConeBufferGeometry = ConeBufferGeometry;\n\t    exports.CylinderGeometry = CylinderGeometry;\n\t    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n\t    exports.CircleBufferGeometry = CircleBufferGeometry;\n\t    exports.CircleGeometry = CircleGeometry;\n\t    exports.BoxBufferGeometry = BoxBufferGeometry;\n\t    exports.BoxGeometry = BoxGeometry;\n\t    exports.ShadowMaterial = ShadowMaterial;\n\t    exports.SpriteMaterial = SpriteMaterial;\n\t    exports.RawShaderMaterial = RawShaderMaterial;\n\t    exports.ShaderMaterial = ShaderMaterial;\n\t    exports.PointsMaterial = PointsMaterial;\n\t    exports.MultiMaterial = MultiMaterial;\n\t    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\t    exports.MeshStandardMaterial = MeshStandardMaterial;\n\t    exports.MeshPhongMaterial = MeshPhongMaterial;\n\t    exports.MeshNormalMaterial = MeshNormalMaterial;\n\t    exports.MeshLambertMaterial = MeshLambertMaterial;\n\t    exports.MeshDepthMaterial = MeshDepthMaterial;\n\t    exports.MeshBasicMaterial = MeshBasicMaterial;\n\t    exports.LineDashedMaterial = LineDashedMaterial;\n\t    exports.LineBasicMaterial = LineBasicMaterial;\n\t    exports.Material = Material;\n\t    exports.REVISION = REVISION;\n\t    exports.MOUSE = MOUSE;\n\t    exports.CullFaceNone = CullFaceNone;\n\t    exports.CullFaceBack = CullFaceBack;\n\t    exports.CullFaceFront = CullFaceFront;\n\t    exports.CullFaceFrontBack = CullFaceFrontBack;\n\t    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\t    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\t    exports.BasicShadowMap = BasicShadowMap;\n\t    exports.PCFShadowMap = PCFShadowMap;\n\t    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n\t    exports.FrontSide = FrontSide;\n\t    exports.BackSide = BackSide;\n\t    exports.DoubleSide = DoubleSide;\n\t    exports.FlatShading = FlatShading;\n\t    exports.SmoothShading = SmoothShading;\n\t    exports.NoColors = NoColors;\n\t    exports.FaceColors = FaceColors;\n\t    exports.VertexColors = VertexColors;\n\t    exports.NoBlending = NoBlending;\n\t    exports.NormalBlending = NormalBlending;\n\t    exports.AdditiveBlending = AdditiveBlending;\n\t    exports.SubtractiveBlending = SubtractiveBlending;\n\t    exports.MultiplyBlending = MultiplyBlending;\n\t    exports.CustomBlending = CustomBlending;\n\t    exports.BlendingMode = BlendingMode;\n\t    exports.AddEquation = AddEquation;\n\t    exports.SubtractEquation = SubtractEquation;\n\t    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n\t    exports.MinEquation = MinEquation;\n\t    exports.MaxEquation = MaxEquation;\n\t    exports.ZeroFactor = ZeroFactor;\n\t    exports.OneFactor = OneFactor;\n\t    exports.SrcColorFactor = SrcColorFactor;\n\t    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\t    exports.SrcAlphaFactor = SrcAlphaFactor;\n\t    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\t    exports.DstAlphaFactor = DstAlphaFactor;\n\t    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\t    exports.DstColorFactor = DstColorFactor;\n\t    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\t    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\t    exports.NeverDepth = NeverDepth;\n\t    exports.AlwaysDepth = AlwaysDepth;\n\t    exports.LessDepth = LessDepth;\n\t    exports.LessEqualDepth = LessEqualDepth;\n\t    exports.EqualDepth = EqualDepth;\n\t    exports.GreaterEqualDepth = GreaterEqualDepth;\n\t    exports.GreaterDepth = GreaterDepth;\n\t    exports.NotEqualDepth = NotEqualDepth;\n\t    exports.MultiplyOperation = MultiplyOperation;\n\t    exports.MixOperation = MixOperation;\n\t    exports.AddOperation = AddOperation;\n\t    exports.NoToneMapping = NoToneMapping;\n\t    exports.LinearToneMapping = LinearToneMapping;\n\t    exports.ReinhardToneMapping = ReinhardToneMapping;\n\t    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\t    exports.CineonToneMapping = CineonToneMapping;\n\t    exports.UVMapping = UVMapping;\n\t    exports.CubeReflectionMapping = CubeReflectionMapping;\n\t    exports.CubeRefractionMapping = CubeRefractionMapping;\n\t    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\t    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\t    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n\t    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\t    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\t    exports.TextureMapping = TextureMapping;\n\t    exports.RepeatWrapping = RepeatWrapping;\n\t    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\t    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\t    exports.TextureWrapping = TextureWrapping;\n\t    exports.NearestFilter = NearestFilter;\n\t    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\t    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\t    exports.LinearFilter = LinearFilter;\n\t    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\t    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\t    exports.TextureFilter = TextureFilter;\n\t    exports.UnsignedByteType = UnsignedByteType;\n\t    exports.ByteType = ByteType;\n\t    exports.ShortType = ShortType;\n\t    exports.UnsignedShortType = UnsignedShortType;\n\t    exports.IntType = IntType;\n\t    exports.UnsignedIntType = UnsignedIntType;\n\t    exports.FloatType = FloatType;\n\t    exports.HalfFloatType = HalfFloatType;\n\t    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n\t    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n\t    exports.UnsignedShort565Type = UnsignedShort565Type;\n\t    exports.UnsignedInt248Type = UnsignedInt248Type;\n\t    exports.AlphaFormat = AlphaFormat;\n\t    exports.RGBFormat = RGBFormat;\n\t    exports.RGBAFormat = RGBAFormat;\n\t    exports.LuminanceFormat = LuminanceFormat;\n\t    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\t    exports.RGBEFormat = RGBEFormat;\n\t    exports.DepthFormat = DepthFormat;\n\t    exports.DepthStencilFormat = DepthStencilFormat;\n\t    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\t    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\t    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\t    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\t    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\t    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\t    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n\t    exports.LoopOnce = LoopOnce;\n\t    exports.LoopRepeat = LoopRepeat;\n\t    exports.LoopPingPong = LoopPingPong;\n\t    exports.InterpolateDiscrete = InterpolateDiscrete;\n\t    exports.InterpolateLinear = InterpolateLinear;\n\t    exports.InterpolateSmooth = InterpolateSmooth;\n\t    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\t    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n\t    exports.WrapAroundEnding = WrapAroundEnding;\n\t    exports.TrianglesDrawMode = TrianglesDrawMode;\n\t    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n\t    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n\t    exports.LinearEncoding = LinearEncoding;\n\t    exports.sRGBEncoding = sRGBEncoding;\n\t    exports.GammaEncoding = GammaEncoding;\n\t    exports.RGBEEncoding = RGBEEncoding;\n\t    exports.LogLuvEncoding = LogLuvEncoding;\n\t    exports.RGBM7Encoding = RGBM7Encoding;\n\t    exports.RGBM16Encoding = RGBM16Encoding;\n\t    exports.RGBDEncoding = RGBDEncoding;\n\t    exports.BasicDepthPacking = BasicDepthPacking;\n\t    exports.RGBADepthPacking = RGBADepthPacking;\n\t    exports.CubeGeometry = BoxGeometry;\n\t    exports.Face4 = Face4;\n\t    exports.LineStrip = LineStrip;\n\t    exports.LinePieces = LinePieces;\n\t    exports.MeshFaceMaterial = MultiMaterial;\n\t    exports.PointCloud = PointCloud;\n\t    exports.Particle = Sprite;\n\t    exports.ParticleSystem = ParticleSystem;\n\t    exports.PointCloudMaterial = PointCloudMaterial;\n\t    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n\t    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n\t    exports.Vertex = Vertex;\n\t    exports.EdgesHelper = EdgesHelper;\n\t    exports.WireframeHelper = WireframeHelper;\n\t    exports.GeometryUtils = GeometryUtils;\n\t    exports.ImageUtils = ImageUtils;\n\t    exports.Projector = Projector;\n\t    exports.CanvasRenderer = CanvasRenderer;\n\t\n\t    Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 00c62eefb5f9367870cb\n **/","import Three from 'three'\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/index.js\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n    // Polyfills\n\n    if ( Number.EPSILON === undefined ) {\n\n    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\n    }\n\n    //\n\n    if ( Math.sign === undefined ) {\n\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    \tMath.sign = function ( x ) {\n\n    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n    \t};\n\n    }\n\n    if ( Function.prototype.name === undefined ) {\n\n    \t// Missing in IE9-11.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    \tObject.defineProperty( Function.prototype, 'name', {\n\n    \t\tget: function () {\n\n    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n    \t\t}\n\n    \t} );\n\n    }\n\n    if ( Object.assign === undefined ) {\n\n    \t// Missing in IE.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    \t( function () {\n\n    \t\tObject.assign = function ( target ) {\n\n    \t\t\t'use strict';\n\n    \t\t\tif ( target === undefined || target === null ) {\n\n    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n    \t\t\t}\n\n    \t\t\tvar output = Object( target );\n\n    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n    \t\t\t\tvar source = arguments[ index ];\n\n    \t\t\t\tif ( source !== undefined && source !== null ) {\n\n    \t\t\t\t\tfor ( var nextKey in source ) {\n\n    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn output;\n\n    \t\t};\n\n    \t} )();\n\n    }\n\n    /**\n     * https://github.com/mrdoob/eventdispatcher.js/\n     */\n\n    function EventDispatcher() {}\n\n    Object.assign( EventDispatcher.prototype, {\n\n    \taddEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] === undefined ) {\n\n    \t\t\tlisteners[ type ] = [];\n\n    \t\t}\n\n    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n    \t\t\tlisteners[ type ].push( listener );\n\n    \t\t}\n\n    \t},\n\n    \thasEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return false;\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tremoveEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tvar index = listenerArray.indexOf( listener );\n\n    \t\t\tif ( index !== - 1 ) {\n\n    \t\t\t\tlistenerArray.splice( index, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tdispatchEvent: function ( event ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ event.type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tevent.target = this;\n\n    \t\t\tvar array = [], i = 0;\n    \t\t\tvar length = listenerArray.length;\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\n    \t\t\t}\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ].call( this, event );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    var REVISION = '81';\n    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n    var CullFaceNone = 0;\n    var CullFaceBack = 1;\n    var CullFaceFront = 2;\n    var CullFaceFrontBack = 3;\n    var FrontFaceDirectionCW = 0;\n    var FrontFaceDirectionCCW = 1;\n    var BasicShadowMap = 0;\n    var PCFShadowMap = 1;\n    var PCFSoftShadowMap = 2;\n    var FrontSide = 0;\n    var BackSide = 1;\n    var DoubleSide = 2;\n    var FlatShading = 1;\n    var SmoothShading = 2;\n    var NoColors = 0;\n    var FaceColors = 1;\n    var VertexColors = 2;\n    var NoBlending = 0;\n    var NormalBlending = 1;\n    var AdditiveBlending = 2;\n    var SubtractiveBlending = 3;\n    var MultiplyBlending = 4;\n    var CustomBlending = 5;\n    var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending\n    };\n    var AddEquation = 100;\n    var SubtractEquation = 101;\n    var ReverseSubtractEquation = 102;\n    var MinEquation = 103;\n    var MaxEquation = 104;\n    var ZeroFactor = 200;\n    var OneFactor = 201;\n    var SrcColorFactor = 202;\n    var OneMinusSrcColorFactor = 203;\n    var SrcAlphaFactor = 204;\n    var OneMinusSrcAlphaFactor = 205;\n    var DstAlphaFactor = 206;\n    var OneMinusDstAlphaFactor = 207;\n    var DstColorFactor = 208;\n    var OneMinusDstColorFactor = 209;\n    var SrcAlphaSaturateFactor = 210;\n    var NeverDepth = 0;\n    var AlwaysDepth = 1;\n    var LessDepth = 2;\n    var LessEqualDepth = 3;\n    var EqualDepth = 4;\n    var GreaterEqualDepth = 5;\n    var GreaterDepth = 6;\n    var NotEqualDepth = 7;\n    var MultiplyOperation = 0;\n    var MixOperation = 1;\n    var AddOperation = 2;\n    var NoToneMapping = 0;\n    var LinearToneMapping = 1;\n    var ReinhardToneMapping = 2;\n    var Uncharted2ToneMapping = 3;\n    var CineonToneMapping = 4;\n    var UVMapping = 300;\n    var CubeReflectionMapping = 301;\n    var CubeRefractionMapping = 302;\n    var EquirectangularReflectionMapping = 303;\n    var EquirectangularRefractionMapping = 304;\n    var SphericalReflectionMapping = 305;\n    var CubeUVReflectionMapping = 306;\n    var CubeUVRefractionMapping = 307;\n    var TextureMapping = {\n        UVMapping: UVMapping,\n        CubeReflectionMapping: CubeReflectionMapping,\n        CubeRefractionMapping: CubeRefractionMapping,\n        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n        SphericalReflectionMapping: SphericalReflectionMapping,\n        CubeUVReflectionMapping: CubeUVReflectionMapping,\n        CubeUVRefractionMapping: CubeUVRefractionMapping\n    };\n    var RepeatWrapping = 1000;\n    var ClampToEdgeWrapping = 1001;\n    var MirroredRepeatWrapping = 1002;\n    var TextureWrapping = {\n        RepeatWrapping: RepeatWrapping,\n        ClampToEdgeWrapping: ClampToEdgeWrapping,\n        MirroredRepeatWrapping: MirroredRepeatWrapping\n    };\n    var NearestFilter = 1003;\n    var NearestMipMapNearestFilter = 1004;\n    var NearestMipMapLinearFilter = 1005;\n    var LinearFilter = 1006;\n    var LinearMipMapNearestFilter = 1007;\n    var LinearMipMapLinearFilter = 1008;\n    var TextureFilter = {\n        NearestFilter: NearestFilter,\n        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n        LinearFilter: LinearFilter,\n        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n    };\n    var UnsignedByteType = 1009;\n    var ByteType = 1010;\n    var ShortType = 1011;\n    var UnsignedShortType = 1012;\n    var IntType = 1013;\n    var UnsignedIntType = 1014;\n    var FloatType = 1015;\n    var HalfFloatType = 1016;\n    var UnsignedShort4444Type = 1017;\n    var UnsignedShort5551Type = 1018;\n    var UnsignedShort565Type = 1019;\n    var UnsignedInt248Type = 1020;\n    var AlphaFormat = 1021;\n    var RGBFormat = 1022;\n    var RGBAFormat = 1023;\n    var LuminanceFormat = 1024;\n    var LuminanceAlphaFormat = 1025;\n    var RGBEFormat = RGBAFormat;\n    var DepthFormat = 1026;\n    var DepthStencilFormat = 1027;\n    var RGB_S3TC_DXT1_Format = 2001;\n    var RGBA_S3TC_DXT1_Format = 2002;\n    var RGBA_S3TC_DXT3_Format = 2003;\n    var RGBA_S3TC_DXT5_Format = 2004;\n    var RGB_PVRTC_4BPPV1_Format = 2100;\n    var RGB_PVRTC_2BPPV1_Format = 2101;\n    var RGBA_PVRTC_4BPPV1_Format = 2102;\n    var RGBA_PVRTC_2BPPV1_Format = 2103;\n    var RGB_ETC1_Format = 2151;\n    var LoopOnce = 2200;\n    var LoopRepeat = 2201;\n    var LoopPingPong = 2202;\n    var InterpolateDiscrete = 2300;\n    var InterpolateLinear = 2301;\n    var InterpolateSmooth = 2302;\n    var ZeroCurvatureEnding = 2400;\n    var ZeroSlopeEnding = 2401;\n    var WrapAroundEnding = 2402;\n    var TrianglesDrawMode = 0;\n    var TriangleStripDrawMode = 1;\n    var TriangleFanDrawMode = 2;\n    var LinearEncoding = 3000;\n    var sRGBEncoding = 3001;\n    var GammaEncoding = 3007;\n    var RGBEEncoding = 3002;\n    var LogLuvEncoding = 3003;\n    var RGBM7Encoding = 3004;\n    var RGBM16Encoding = 3005;\n    var RGBDEncoding = 3006;\n    var BasicDepthPacking = 3200;\n    var RGBADepthPacking = 3201;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Math = {\n\n    \tDEG2RAD: Math.PI / 180,\n    \tRAD2DEG: 180 / Math.PI,\n\n    \tgenerateUUID: function () {\n\n    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n    \t\tvar uuid = new Array( 36 );\n    \t\tvar rnd = 0, r;\n\n    \t\treturn function generateUUID() {\n\n    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n    \t\t\t\t\tuuid[ i ] = '-';\n\n    \t\t\t\t} else if ( i === 14 ) {\n\n    \t\t\t\t\tuuid[ i ] = '4';\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    \t\t\t\t\tr = rnd & 0xf;\n    \t\t\t\t\trnd = rnd >> 4;\n    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn uuid.join( '' );\n\n    \t\t};\n\n    \t}(),\n\n    \tclamp: function ( value, min, max ) {\n\n    \t\treturn Math.max( min, Math.min( max, value ) );\n\n    \t},\n\n    \t// compute euclidian modulo of m % n\n    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\n    \teuclideanModulo: function ( n, m ) {\n\n    \t\treturn ( ( n % m ) + m ) % m;\n\n    \t},\n\n    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    \t},\n\n    \t// http://en.wikipedia.org/wiki/Smoothstep\n\n    \tsmoothstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * ( 3 - 2 * x );\n\n    \t},\n\n    \tsmootherstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    \t},\n\n    \trandom16: function () {\n\n    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n    \t\treturn Math.random();\n\n    \t},\n\n    \t// Random integer from <low, high> interval\n\n    \trandInt: function ( low, high ) {\n\n    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    \t},\n\n    \t// Random float from <low, high> interval\n\n    \trandFloat: function ( low, high ) {\n\n    \t\treturn low + Math.random() * ( high - low );\n\n    \t},\n\n    \t// Random float from <-range/2, range/2> interval\n\n    \trandFloatSpread: function ( range ) {\n\n    \t\treturn range * ( 0.5 - Math.random() );\n\n    \t},\n\n    \tdegToRad: function ( degrees ) {\n\n    \t\treturn degrees * exports.Math.DEG2RAD;\n\n    \t},\n\n    \tradToDeg: function ( radians ) {\n\n    \t\treturn radians * exports.Math.RAD2DEG;\n\n    \t},\n\n    \tisPowerOfTwo: function ( value ) {\n\n    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n    \t},\n\n    \tnearestPowerOfTwo: function ( value ) {\n\n    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n    \t},\n\n    \tnextPowerOfTwo: function ( value ) {\n\n    \t\tvalue --;\n    \t\tvalue |= value >> 1;\n    \t\tvalue |= value >> 2;\n    \t\tvalue |= value >> 4;\n    \t\tvalue |= value >> 8;\n    \t\tvalue |= value >> 16;\n    \t\tvalue ++;\n\n    \t\treturn value;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author philogb / http://blog.thejit.org/\n     * @author egraether / http://egraether.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    function Vector2( x, y ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n\n    }\n\n    Vector2.prototype = {\n\n    \tconstructor: Vector2,\n\n    \tisVector2: true,\n\n    \tget width() {\n\n    \t\treturn this.x;\n\n    \t},\n\n    \tset width( value ) {\n\n    \t\tthis.x = value;\n\n    \t},\n\n    \tget height() {\n\n    \t\treturn this.y;\n\n    \t},\n\n    \tset height( value ) {\n\n    \t\tthis.y = value;\n\n    \t},\n\n    \t//\n\n    \tset: function ( x, y ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v ) {\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector2();\n    \t\t\t\tmax = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n    \t},\n\n    \tlengthManhattan: function() {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tangle: function () {\n\n    \t\t// computes the angle in radians with respect to the positive x-axis\n\n    \t\tvar angle = Math.atan2( this.y, this.x );\n\n    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n    \t\treturn angle;\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n    \t\treturn dx * dx + dy * dy;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateAround: function ( center, angle ) {\n\n    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n    \t\tvar x = this.x - center.x;\n    \t\tvar y = this.y - center.y;\n\n    \t\tthis.x = x * c - y * s + center.x;\n    \t\tthis.y = x * s + y * c + center.y;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     */\n\n    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.sourceFile = '';\n\n    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    \tthis.mipmaps = [];\n\n    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    \tthis.format = format !== undefined ? format : RGBAFormat;\n    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\n    \tthis.offset = new Vector2( 0, 0 );\n    \tthis.repeat = new Vector2( 1, 1 );\n\n    \tthis.generateMipmaps = true;\n    \tthis.premultiplyAlpha = false;\n    \tthis.flipY = true;\n    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    \t//\n    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n    \tthis.version = 0;\n    \tthis.onUpdate = null;\n\n    }\n\n    Texture.DEFAULT_IMAGE = undefined;\n    Texture.DEFAULT_MAPPING = UVMapping;\n\n    Texture.prototype = {\n\n    \tconstructor: Texture,\n\n    \tisTexture: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.image = source.image;\n    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n    \t\tthis.mapping = source.mapping;\n\n    \t\tthis.wrapS = source.wrapS;\n    \t\tthis.wrapT = source.wrapT;\n\n    \t\tthis.magFilter = source.magFilter;\n    \t\tthis.minFilter = source.minFilter;\n\n    \t\tthis.anisotropy = source.anisotropy;\n\n    \t\tthis.format = source.format;\n    \t\tthis.type = source.type;\n\n    \t\tthis.offset.copy( source.offset );\n    \t\tthis.repeat.copy( source.repeat );\n\n    \t\tthis.generateMipmaps = source.generateMipmaps;\n    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n    \t\tthis.flipY = source.flipY;\n    \t\tthis.unpackAlignment = source.unpackAlignment;\n    \t\tthis.encoding = source.encoding;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n    \t\t\treturn meta.textures[ this.uuid ];\n\n    \t\t}\n\n    \t\tfunction getDataURL( image ) {\n\n    \t\t\tvar canvas;\n\n    \t\t\tif ( image.toDataURL !== undefined ) {\n\n    \t\t\t\tcanvas = image;\n\n    \t\t\t} else {\n\n    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\t\tcanvas.width = image.width;\n    \t\t\t\tcanvas.height = image.height;\n\n    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n    \t\t\t}\n\n    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n    \t\t\t} else {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Texture',\n    \t\t\t\tgenerator: 'Texture.toJSON'\n    \t\t\t},\n\n    \t\t\tuuid: this.uuid,\n    \t\t\tname: this.name,\n\n    \t\t\tmapping: this.mapping,\n\n    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n    \t\t\toffset: [ this.offset.x, this.offset.y ],\n    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\n    \t\t\tminFilter: this.minFilter,\n    \t\t\tmagFilter: this.magFilter,\n    \t\t\tanisotropy: this.anisotropy,\n\n    \t\t\tflipY: this.flipY\n    \t\t};\n\n    \t\tif ( this.image !== undefined ) {\n\n    \t\t\t// TODO: Move to THREE.Image\n\n    \t\t\tvar image = this.image;\n\n    \t\t\tif ( image.uuid === undefined ) {\n\n    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\n    \t\t\t}\n\n    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.images[ image.uuid ] = {\n    \t\t\t\t\tuuid: image.uuid,\n    \t\t\t\t\turl: getDataURL( image )\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\toutput.image = image.uuid;\n\n    \t\t}\n\n    \t\tmeta.textures[ this.uuid ] = output;\n\n    \t\treturn output;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t},\n\n    \ttransformUv: function ( uv ) {\n\n    \t\tif ( this.mapping !== UVMapping )  return;\n\n    \t\tuv.multiply( this.repeat );\n    \t\tuv.add( this.offset );\n\n    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n    \t\t\tswitch ( this.wrapS ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n    \t\t\tswitch ( this.wrapT ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.flipY ) {\n\n    \t\t\tuv.y = 1 - uv.y;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\n    var count = 0;\n    function TextureIdCount() { return count++; };\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector4( x, y, z, w ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n    \tthis.w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Vector4.prototype = {\n\n    \tconstructor: Vector4,\n\n    \tisVector4: true,\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n    \t\tthis.w = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( w ) {\n\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tcase 3: this.w = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tcase 3: return this.w;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n    \t\tthis.w += v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n    \t\tthis.w += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n    \t\tthis.w = a.w + b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n    \t\tthis.w += v.w * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n    \t\tthis.w -= v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n    \t\tthis.w -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n    \t\tthis.w = a.w - b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n    \t\t\tthis.w *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n    \t\t\tthis.w = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tsetAxisAngleFromQuaternion: function ( q ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    \t\t// q is assumed to be normalized\n\n    \t\tthis.w = 2 * Math.acos( q.w );\n\n    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n    \t\tif ( s < 0.0001 ) {\n\n    \t\t\t this.x = 1;\n    \t\t\t this.y = 0;\n    \t\t\t this.z = 0;\n\n    \t\t} else {\n\n    \t\t\t this.x = q.x / s;\n    \t\t\t this.y = q.y / s;\n    \t\t\t this.z = q.z / s;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar angle, x, y, z,\t\t// variables for result\n    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n    \t\t\tte = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n    \t\t\t// singularity found\n    \t\t\t// first check for identity matrix which must have +1 for all terms\n    \t\t\t// in leading diagonal and zero in other terms\n\n    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n    \t\t\t\t// this singularity is identity matrix so angle = 0\n\n    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\n    \t\t\t\treturn this; // zero angle, arbitrary axis\n\n    \t\t\t}\n\n    \t\t\t// otherwise this singularity is angle = 180\n\n    \t\t\tangle = Math.PI;\n\n    \t\t\tvar xx = ( m11 + 1 ) / 2;\n    \t\t\tvar yy = ( m22 + 1 ) / 2;\n    \t\t\tvar zz = ( m33 + 1 ) / 2;\n    \t\t\tvar xy = ( m12 + m21 ) / 4;\n    \t\t\tvar xz = ( m13 + m31 ) / 4;\n    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\n    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n    \t\t\t\t// m11 is the largest diagonal term\n\n    \t\t\t\tif ( xx < epsilon ) {\n\n    \t\t\t\t\tx = 0;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tx = Math.sqrt( xx );\n    \t\t\t\t\ty = xy / x;\n    \t\t\t\t\tz = xz / x;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( yy > zz ) {\n\n    \t\t\t\t// m22 is the largest diagonal term\n\n    \t\t\t\tif ( yy < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ty = Math.sqrt( yy );\n    \t\t\t\t\tx = xy / y;\n    \t\t\t\t\tz = yz / y;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\n    \t\t\t\tif ( zz < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tz = Math.sqrt( zz );\n    \t\t\t\t\tx = xz / z;\n    \t\t\t\t\ty = yz / z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.set( x, y, z, angle );\n\n    \t\t\treturn this; // return 180 deg rotation\n\n    \t\t}\n\n    \t\t// as we have reached here there are no singularities so we can handle normally\n\n    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n    \t\t// caught by singularity test above, but I've left it in just in case\n\n    \t\tthis.x = ( m32 - m23 ) / s;\n    \t\tthis.y = ( m13 - m31 ) / s;\n    \t\tthis.z = ( m21 - m12 ) / s;\n    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n    \t\tthis.w = Math.min( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n    \t\tthis.w = Math.max( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector4();\n    \t\t\t\tmax = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n    \t\tthis.w = Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n    \t\tthis.w = Math.ceil( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n    \t\tthis.w = Math.round( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n    \t\tthis.w = - this.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n    \t\tthis.w += ( v.w - this.w ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n    \t\tthis.w = array[ offset + 3 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n    \t\tarray[ offset + 3 ] = this.w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n    \t\tthis.w = attribute.array[ index + 3 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author szimek / https://github.com/szimek/\n     * @author alteredq / http://alteredqualia.com/\n     * @author Marius Kintel / https://github.com/kintel\n     */\n\n    /*\n     In options, we can specify:\n     * Texture parameters for an auto-generated target texture\n     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n    */\n    function WebGLRenderTarget( width, height, options ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.width = width;\n    \tthis.height = height;\n\n    \tthis.scissor = new Vector4( 0, 0, width, height );\n    \tthis.scissorTest = false;\n\n    \tthis.viewport = new Vector4( 0, 0, width, height );\n\n    \toptions = options || {};\n\n    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n    }\n\n    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n    \tisWebGLRenderTarget: true,\n\n    \tsetSize: function ( width, height ) {\n\n    \t\tif ( this.width !== width || this.height !== height ) {\n\n    \t\t\tthis.width = width;\n    \t\t\tthis.height = height;\n\n    \t\t\tthis.dispose();\n\n    \t\t}\n\n    \t\tthis.viewport.set( 0, 0, width, height );\n    \t\tthis.scissor.set( 0, 0, width, height );\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.width = source.width;\n    \t\tthis.height = source.height;\n\n    \t\tthis.viewport.copy( source.viewport );\n\n    \t\tthis.texture = source.texture.clone();\n\n    \t\tthis.depthBuffer = source.depthBuffer;\n    \t\tthis.stencilBuffer = source.stencilBuffer;\n    \t\tthis.depthTexture = source.depthTexture;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com\n     */\n\n    function WebGLRenderTargetCube( width, height, options ) {\n\n    \tWebGLRenderTarget.call( this, width, height, options );\n\n    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    \tthis.activeMipMapLevel = 0;\n\n    }\n\n    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Quaternion( x, y, z, w ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Quaternion.prototype = {\n\n    \tconstructor: Quaternion,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget w () {\n\n    \t\treturn this._w;\n\n    \t},\n\n    \tset w ( value ) {\n\n    \t\tthis._w = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._w = w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n    \t},\n\n    \tcopy: function ( quaternion ) {\n\n    \t\tthis._x = quaternion.x;\n    \t\tthis._y = quaternion.y;\n    \t\tthis._z = quaternion.z;\n    \t\tthis._w = quaternion.w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromEuler: function ( euler, update ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    \t\t//\tcontent/SpinCalc.m\n\n    \t\tvar c1 = Math.cos( euler._x / 2 );\n    \t\tvar c2 = Math.cos( euler._y / 2 );\n    \t\tvar c3 = Math.cos( euler._z / 2 );\n    \t\tvar s1 = Math.sin( euler._x / 2 );\n    \t\tvar s2 = Math.sin( euler._y / 2 );\n    \t\tvar s3 = Math.sin( euler._z / 2 );\n\n    \t\tvar order = euler.order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t}\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    \t\t// assumes axis is normalized\n\n    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n    \t\tthis._x = axis.x * s;\n    \t\tthis._y = axis.y * s;\n    \t\tthis._z = axis.z * s;\n    \t\tthis._w = Math.cos( halfAngle );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n    \t\t\ttrace = m11 + m22 + m33,\n    \t\t\ts;\n\n    \t\tif ( trace > 0 ) {\n\n    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n    \t\t\tthis._w = 0.25 / s;\n    \t\t\tthis._x = ( m32 - m23 ) * s;\n    \t\t\tthis._y = ( m13 - m31 ) * s;\n    \t\t\tthis._z = ( m21 - m12 ) * s;\n\n    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n    \t\t\tthis._w = ( m32 - m23 ) / s;\n    \t\t\tthis._x = 0.25 * s;\n    \t\t\tthis._y = ( m12 + m21 ) / s;\n    \t\t\tthis._z = ( m13 + m31 ) / s;\n\n    \t\t} else if ( m22 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n    \t\t\tthis._w = ( m13 - m31 ) / s;\n    \t\t\tthis._x = ( m12 + m21 ) / s;\n    \t\t\tthis._y = 0.25 * s;\n    \t\t\tthis._z = ( m23 + m32 ) / s;\n\n    \t\t} else {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n    \t\t\tthis._w = ( m21 - m12 ) / s;\n    \t\t\tthis._x = ( m13 + m31 ) / s;\n    \t\t\tthis._y = ( m23 + m32 ) / s;\n    \t\t\tthis._z = 0.25 * s;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromUnitVectors: function () {\n\n    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n    \t\t// assumes direction vectors vFrom and vTo are normalized\n\n    \t\tvar v1, r;\n\n    \t\tvar EPS = 0.000001;\n\n    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tr = vFrom.dot( vTo ) + 1;\n\n    \t\t\tif ( r < EPS ) {\n\n    \t\t\t\tr = 0;\n\n    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\n    \t\t\t}\n\n    \t\t\tthis._x = v1.x;\n    \t\t\tthis._y = v1.y;\n    \t\t\tthis._z = v1.z;\n    \t\t\tthis._w = r;\n\n    \t\t\treturn this.normalize();\n\n    \t\t};\n\n    \t}(),\n\n    \tinverse: function () {\n\n    \t\treturn this.conjugate().normalize();\n\n    \t},\n\n    \tconjugate: function () {\n\n    \t\tthis._x *= - 1;\n    \t\tthis._y *= - 1;\n    \t\tthis._z *= - 1;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tvar l = this.length();\n\n    \t\tif ( l === 0 ) {\n\n    \t\t\tthis._x = 0;\n    \t\t\tthis._y = 0;\n    \t\t\tthis._z = 0;\n    \t\t\tthis._w = 1;\n\n    \t\t} else {\n\n    \t\t\tl = 1 / l;\n\n    \t\t\tthis._x = this._x * l;\n    \t\t\tthis._y = this._y * l;\n    \t\t\tthis._z = this._z * l;\n    \t\t\tthis._w = this._w * l;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( q, p ) {\n\n    \t\tif ( p !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n    \t\t\treturn this.multiplyQuaternions( q, p );\n\n    \t\t}\n\n    \t\treturn this.multiplyQuaternions( this, q );\n\n    \t},\n\n    \tpremultiply: function ( q ) {\n\n    \t\treturn this.multiplyQuaternions( q, this );\n\n    \t},\n\n    \tmultiplyQuaternions: function ( a, b ) {\n\n    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tslerp: function ( qb, t ) {\n\n    \t\tif ( t === 0 ) return this;\n    \t\tif ( t === 1 ) return this.copy( qb );\n\n    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    \t\tif ( cosHalfTheta < 0 ) {\n\n    \t\t\tthis._w = - qb._w;\n    \t\t\tthis._x = - qb._x;\n    \t\t\tthis._y = - qb._y;\n    \t\t\tthis._z = - qb._z;\n\n    \t\t\tcosHalfTheta = - cosHalfTheta;\n\n    \t\t} else {\n\n    \t\t\tthis.copy( qb );\n\n    \t\t}\n\n    \t\tif ( cosHalfTheta >= 1.0 ) {\n\n    \t\t\tthis._w = w;\n    \t\t\tthis._x = x;\n    \t\t\tthis._y = y;\n    \t\t\tthis._z = z;\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n    \t\t\tthis._w = 0.5 * ( w + this._w );\n    \t\t\tthis._x = 0.5 * ( x + this._x );\n    \t\t\tthis._y = 0.5 * ( y + this._y );\n    \t\t\tthis._z = 0.5 * ( z + this._z );\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( quaternion ) {\n\n    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis._x = array[ offset ];\n    \t\tthis._y = array[ offset + 1 ];\n    \t\tthis._z = array[ offset + 2 ];\n    \t\tthis._w = array[ offset + 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    Object.assign( Quaternion, {\n\n    \tslerp: function( qa, qb, qm, t ) {\n\n    \t\treturn qm.copy( qa ).slerp( qb, t );\n\n    \t},\n\n    \tslerpFlat: function(\n    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\n    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n    \t\t\tvar s = 1 - t,\n\n    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n    \t\t\t\tsqrSin = 1 - cos * cos;\n\n    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\n    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n    \t\t\t\ts = Math.sin( s * len ) / sin;\n    \t\t\t\tt = Math.sin( t * len ) / sin;\n\n    \t\t\t}\n\n    \t\t\tvar tDir = t * dir;\n\n    \t\t\tx0 = x0 * s + x1 * tDir;\n    \t\t\ty0 = y0 * s + y1 * tDir;\n    \t\t\tz0 = z0 * s + z1 * tDir;\n    \t\t\tw0 = w0 * s + w1 * tDir;\n\n    \t\t\t// Normalize in case we just did a lerp:\n    \t\t\tif ( s === 1 - t ) {\n\n    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n    \t\t\t\tx0 *= f;\n    \t\t\t\ty0 *= f;\n    \t\t\t\tz0 *= f;\n    \t\t\t\tw0 *= f;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tdst[ dstOffset ] = x0;\n    \t\tdst[ dstOffset + 1 ] = y0;\n    \t\tdst[ dstOffset + 2 ] = z0;\n    \t\tdst[ dstOffset + 3 ] = w0;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author *kile / http://kile.stravaganza.org/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector3( x, y, z ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n\n    }\n\n    Vector3.prototype = {\n\n    \tconstructor: Vector3,\n\n    \tisVector3: true,\n\n    \tset: function ( x, y, z ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n    \t\t\treturn this.multiplyVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n    \t\tthis.z *= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x * b.x;\n    \t\tthis.y = a.y * b.y;\n    \t\tthis.z = a.z * b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyEuler: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyEuler( euler ) {\n\n    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n    \t\t\t}\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyAxisAngle: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyAxisAngle( axis, angle ) {\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix3: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyProjection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 projection matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyQuaternion: function ( q ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    \t\t// calculate quat * vector\n\n    \t\tvar ix =  qw * x + qy * z - qz * y;\n    \t\tvar iy =  qw * y + qz * x - qx * z;\n    \t\tvar iz =  qw * z + qx * y - qy * x;\n    \t\tvar iw = - qx * x - qy * y - qz * z;\n\n    \t\t// calculate result * inverse quat\n\n    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function project( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tunproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function unproject( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \ttransformDirection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n    \t\t// vector interpreted as a direction\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n    \t\treturn this.normalize();\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n    \t\tthis.z /= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector3();\n    \t\t\t\tmax = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tcross: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n    \t\t\treturn this.crossVectors( v, w );\n\n    \t\t}\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n\n    \t\tthis.x = y * v.z - z * v.y;\n    \t\tthis.y = z * v.x - x * v.z;\n    \t\tthis.z = x * v.y - y * v.x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossVectors: function ( a, b ) {\n\n    \t\tvar ax = a.x, ay = a.y, az = a.z;\n    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\n    \t\tthis.x = ay * bz - az * by;\n    \t\tthis.y = az * bx - ax * bz;\n    \t\tthis.z = ax * by - ay * bx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tprojectOnVector: function ( vector ) {\n\n    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n    \t},\n\n    \tprojectOnPlane: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function projectOnPlane( planeNormal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n    \t\t\treturn this.sub( v1 );\n\n    \t\t};\n\n    \t}(),\n\n    \treflect: function () {\n\n    \t\t// reflect incident vector off plane orthogonal to normal\n    \t\t// normal is assumed to have unit length\n\n    \t\tvar v1;\n\n    \t\treturn function reflect( normal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tangleTo: function ( v ) {\n\n    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n    \t\t// clamp, to handle numerical problems\n\n    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n    \t\treturn dx * dx + dy * dy + dz * dz;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n    \t},\n\n    \tsetFromSpherical: function( s ) {\n\n    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixPosition: function ( m ) {\n\n    \t\treturn this.setFromMatrixColumn( m, 3 );\n\n    \t},\n\n    \tsetFromMatrixScale: function ( m ) {\n\n    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n    \t\tthis.x = sx;\n    \t\tthis.y = sy;\n    \t\tthis.z = sz;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixColumn: function ( m, index ) {\n\n    \t\tif ( typeof m === 'number' ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n    \t\t\tvar temp = m\n    \t\t\tm = index;\n    \t\t\tindex = temp;\n\n    \t\t}\n\n    \t\treturn this.fromArray( m.elements, index * 4 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author jordi_ros / http://plattsoft.com\n     * @author D1plo1d / http://github.com/D1plo1d\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author timknip / http://www.floorplanner.com/\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Matrix4() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0, 0,\n    \t\t0, 1, 0, 0,\n    \t\t0, 0, 1, 0,\n    \t\t0, 0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix4.prototype = {\n\n    \tconstructor: Matrix4,\n\n    \tisMatrix4: true,\n\n    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, 0,\n    \t\t\t0, 1, 0, 0,\n    \t\t\t0, 0, 1, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new Matrix4().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tthis.elements.set( m.elements );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyPosition: function ( m ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = m.elements;\n\n    \t\tte[ 12 ] = me[ 12 ];\n    \t\tte[ 13 ] = me[ 13 ];\n    \t\tte[ 14 ] = me[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\txAxis.setFromMatrixColumn( this, 0 );\n    \t\tyAxis.setFromMatrixColumn( this, 1 );\n    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\tthis.set(\n    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n    \t\t\t0,       0,       0,       1\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \textractRotation: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function extractRotation( m ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tvar te = this.elements;\n    \t\t\tvar me = m.elements;\n\n    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeRotationFromEuler: function ( euler ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n    \t\tif ( euler.order === 'XYZ' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - c * f;\n    \t\t\tte[ 8 ] = d;\n\n    \t\t\tte[ 1 ] = af + be * d;\n    \t\t\tte[ 5 ] = ae - bf * d;\n    \t\t\tte[ 9 ] = - b * c;\n\n    \t\t\tte[ 2 ] = bf - ae * d;\n    \t\t\tte[ 6 ] = be + af * d;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YXZ' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce + df * b;\n    \t\t\tte[ 4 ] = de * b - cf;\n    \t\t\tte[ 8 ] = a * d;\n\n    \t\t\tte[ 1 ] = a * f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b;\n\n    \t\t\tte[ 2 ] = cf * b - de;\n    \t\t\tte[ 6 ] = df + ce * b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZXY' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce - df * b;\n    \t\t\tte[ 4 ] = - a * f;\n    \t\t\tte[ 8 ] = de + cf * b;\n\n    \t\t\tte[ 1 ] = cf + de * b;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = df - ce * b;\n\n    \t\t\tte[ 2 ] = - a * d;\n    \t\t\tte[ 6 ] = b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZYX' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = be * d - af;\n    \t\t\tte[ 8 ] = ae * d + bf;\n\n    \t\t\tte[ 1 ] = c * f;\n    \t\t\tte[ 5 ] = bf * d + ae;\n    \t\t\tte[ 9 ] = af * d - be;\n\n    \t\t\tte[ 2 ] = - d;\n    \t\t\tte[ 6 ] = b * c;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YZX' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = bd - ac * f;\n    \t\t\tte[ 8 ] = bc * f + ad;\n\n    \t\t\tte[ 1 ] = f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b * e;\n\n    \t\t\tte[ 2 ] = - d * e;\n    \t\t\tte[ 6 ] = ad * f + bc;\n    \t\t\tte[ 10 ] = ac - bd * f;\n\n    \t\t} else if ( euler.order === 'XZY' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - f;\n    \t\t\tte[ 8 ] = d * e;\n\n    \t\t\tte[ 1 ] = ac * f + bd;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = ad * f - bc;\n\n    \t\t\tte[ 2 ] = bc * f - ad;\n    \t\t\tte[ 6 ] = b * e;\n    \t\t\tte[ 10 ] = bd * f + ac;\n\n    \t\t}\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationFromQuaternion: function ( q ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n    \t\tte[ 0 ] = 1 - ( yy + zz );\n    \t\tte[ 4 ] = xy - wz;\n    \t\tte[ 8 ] = xz + wy;\n\n    \t\tte[ 1 ] = xy + wz;\n    \t\tte[ 5 ] = 1 - ( xx + zz );\n    \t\tte[ 9 ] = yz - wx;\n\n    \t\tte[ 2 ] = xz - wy;\n    \t\tte[ 6 ] = yz + wx;\n    \t\tte[ 10 ] = 1 - ( xx + yy );\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlookAt: function () {\n\n    \t\tvar x, y, z;\n\n    \t\treturn function lookAt( eye, target, up ) {\n\n    \t\t\tif ( x === undefined ) {\n\n    \t\t\t\tx = new Vector3();\n    \t\t\t\ty = new Vector3();\n    \t\t\t\tz = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tz.subVectors( eye, target ).normalize();\n\n    \t\t\tif ( z.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z = 1;\n\n    \t\t\t}\n\n    \t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\tif ( x.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z += 0.0001;\n    \t\t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\t}\n\n    \t\t\ty.crossVectors( z, x );\n\n\n    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiply: function ( m, n ) {\n\n    \t\tif ( n !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n    \t\t\treturn this.multiplyMatrices( m, n );\n\n    \t\t}\n\n    \t\treturn this.multiplyMatrices( this, m );\n\n    \t},\n\n    \tpremultiply: function ( m ) {\n\n    \t\treturn this.multiplyMatrices( m, this );\n\n    \t},\n\n    \tmultiplyMatrices: function ( a, b ) {\n\n    \t\tvar ae = a.elements;\n    \t\tvar be = b.elements;\n    \t\tvar te = this.elements;\n\n    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyToArray: function ( a, b, r ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tthis.multiplyMatrices( a, b );\n\n    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix4( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix4( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n    \t\t//TODO: make this more efficient\n    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    \t\treturn (\n    \t\t\tn41 * (\n    \t\t\t\t+ n14 * n23 * n32\n    \t\t\t\t - n13 * n24 * n32\n    \t\t\t\t - n14 * n22 * n33\n    \t\t\t\t + n12 * n24 * n33\n    \t\t\t\t + n13 * n22 * n34\n    \t\t\t\t - n12 * n23 * n34\n    \t\t\t) +\n    \t\t\tn42 * (\n    \t\t\t\t+ n11 * n23 * n34\n    \t\t\t\t - n11 * n24 * n33\n    \t\t\t\t + n14 * n21 * n33\n    \t\t\t\t - n13 * n21 * n34\n    \t\t\t\t + n13 * n24 * n31\n    \t\t\t\t - n14 * n23 * n31\n    \t\t\t) +\n    \t\t\tn43 * (\n    \t\t\t\t+ n11 * n24 * n32\n    \t\t\t\t - n11 * n22 * n34\n    \t\t\t\t - n14 * n21 * n32\n    \t\t\t\t + n12 * n21 * n34\n    \t\t\t\t + n14 * n22 * n31\n    \t\t\t\t - n12 * n24 * n31\n    \t\t\t) +\n    \t\t\tn44 * (\n    \t\t\t\t- n13 * n22 * n31\n    \t\t\t\t - n11 * n23 * n32\n    \t\t\t\t + n11 * n22 * n33\n    \t\t\t\t + n13 * n21 * n32\n    \t\t\t\t - n12 * n21 * n33\n    \t\t\t\t + n12 * n23 * n31\n    \t\t\t)\n\n    \t\t);\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar te = this.elements;\n    \t\tvar tmp;\n\n    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetPosition: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function getPosition() {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetPosition: function ( v ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 12 ] = v.x;\n    \t\tte[ 13 ] = v.y;\n    \t\tte[ 14 ] = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetInverse: function ( m, throwOnDegenerate ) {\n\n    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    \t\tvar te = this.elements,\n    \t\t\tme = m.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n    \t\tte[ 4 ] = t12 * detInv;\n    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n    \t\tte[ 8 ] = t13 * detInv;\n    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n    \t\tte[ 12 ] = t14 * detInv;\n    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \tscale: function ( v ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = v.x, y = v.y, z = v.z;\n\n    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetMaxScaleOnAxis: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n    \t},\n\n    \tmakeTranslation: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, x,\n    \t\t\t0, 1, 0, y,\n    \t\t\t0, 0, 1, z,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationX: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t1, 0,  0, 0,\n    \t\t\t0, c, - s, 0,\n    \t\t\t0, s,  c, 0,\n    \t\t\t0, 0,  0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationY: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t c, 0, s, 0,\n    \t\t\t 0, 1, 0, 0,\n    \t\t\t- s, 0, c, 0,\n    \t\t\t 0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationZ: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\tc, - s, 0, 0,\n    \t\t\ts,  c, 0, 0,\n    \t\t\t0,  0, 1, 0,\n    \t\t\t0,  0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationAxis: function ( axis, angle ) {\n\n    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    \t\tvar c = Math.cos( angle );\n    \t\tvar s = Math.sin( angle );\n    \t\tvar t = 1 - c;\n    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n    \t\tvar tx = t * x, ty = t * y;\n\n    \t\tthis.set(\n\n    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\t return this;\n\n    \t},\n\n    \tmakeScale: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\tx, 0, 0, 0,\n    \t\t\t0, y, 0, 0,\n    \t\t\t0, 0, z, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tcompose: function ( position, quaternion, scale ) {\n\n    \t\tthis.makeRotationFromQuaternion( quaternion );\n    \t\tthis.scale( scale );\n    \t\tthis.setPosition( position );\n\n    \t\treturn this;\n\n    \t},\n\n    \tdecompose: function () {\n\n    \t\tvar vector, matrix;\n\n    \t\treturn function decompose( position, quaternion, scale ) {\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tvector = new Vector3();\n    \t\t\t\tmatrix = new Matrix4();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n    \t\t\t// if determine is negative, we need to invert one scale\n    \t\t\tvar det = this.determinant();\n    \t\t\tif ( det < 0 ) {\n\n    \t\t\t\tsx = - sx;\n\n    \t\t\t}\n\n    \t\t\tposition.x = te[ 12 ];\n    \t\t\tposition.y = te[ 13 ];\n    \t\t\tposition.z = te[ 14 ];\n\n    \t\t\t// scale the rotation part\n\n    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n    \t\t\tvar invSX = 1 / sx;\n    \t\t\tvar invSY = 1 / sy;\n    \t\t\tvar invSZ = 1 / sz;\n\n    \t\t\tmatrix.elements[ 0 ] *= invSX;\n    \t\t\tmatrix.elements[ 1 ] *= invSX;\n    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\n    \t\t\tmatrix.elements[ 4 ] *= invSY;\n    \t\t\tmatrix.elements[ 5 ] *= invSY;\n    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\n    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\n    \t\t\tscale.x = sx;\n    \t\t\tscale.y = sy;\n    \t\t\tscale.z = sz;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = 2 * near / ( right - left );\n    \t\tvar y = 2 * near / ( top - bottom );\n\n    \t\tvar a = ( right + left ) / ( right - left );\n    \t\tvar b = ( top + bottom ) / ( top - bottom );\n    \t\tvar c = - ( far + near ) / ( far - near );\n    \t\tvar d = - 2 * far * near / ( far - near );\n\n    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakePerspective: function ( fov, aspect, near, far ) {\n\n    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n    \t\tvar ymin = - ymax;\n    \t\tvar xmin = ymin * aspect;\n    \t\tvar xmax = ymax * aspect;\n\n    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    \t},\n\n    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar w = 1.0 / ( right - left );\n    \t\tvar h = 1.0 / ( top - bottom );\n    \t\tvar p = 1.0 / ( far - near );\n\n    \t\tvar x = ( right + left ) * w;\n    \t\tvar y = ( top + bottom ) * h;\n    \t\tvar z = ( far + near ) * p;\n\n    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( matrix ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = matrix.elements;\n\n    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n    \t\tarray[ offset + 9 ]  = te[ 9 ];\n    \t\tarray[ offset + 10 ] = te[ 10 ];\n    \t\tarray[ offset + 11 ] = te[ 11 ];\n\n    \t\tarray[ offset + 12 ] = te[ 12 ];\n    \t\tarray[ offset + 13 ] = te[ 13 ];\n    \t\tarray[ offset + 14 ] = te[ 14 ];\n    \t\tarray[ offset + 15 ] = te[ 15 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \timages = images !== undefined ? images : [];\n    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.flipY = false;\n\n    }\n\n    CubeTexture.prototype = Object.create( Texture.prototype );\n    CubeTexture.prototype.constructor = CubeTexture;\n\n    CubeTexture.prototype.isCubeTexture = true;\n\n    Object.defineProperty( CubeTexture.prototype, 'images', {\n\n    \tget: function () {\n\n    \t\treturn this.image;\n\n    \t},\n\n    \tset: function ( value ) {\n\n    \t\tthis.image = value;\n\n    \t}\n\n    } );\n\n    var emptyTexture = new Texture();\n    var emptyCubeTexture = new CubeTexture();\n\n    // --- Base for inner nodes (including the root) ---\n\n    function UniformContainer() {\n\n    \tthis.seq = [];\n    \tthis.map = {};\n\n    }\n\n    // --- Utilities ---\n\n    // Array Caches (provide typed arrays for temporary by size)\n\n    var arrayCacheF32 = [];\n    var arrayCacheI32 = [];\n\n    // Flattening for arrays of vectors and matrices\n\n    function flatten( array, nBlocks, blockSize ) {\n\n    \tvar firstElem = array[ 0 ];\n\n    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n    \t// unoptimized: ! isNaN( firstElem )\n    \t// see http://jacksondunstan.com/articles/983\n\n    \tvar n = nBlocks * blockSize,\n    \t\tr = arrayCacheF32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Float32Array( n );\n    \t\tarrayCacheF32[ n ] = r;\n\n    \t}\n\n    \tif ( nBlocks !== 0 ) {\n\n    \t\tfirstElem.toArray( r, 0 );\n\n    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n    \t\t\toffset += blockSize;\n    \t\t\tarray[ i ].toArray( r, offset );\n\n    \t\t}\n\n    \t}\n\n    \treturn r;\n\n    }\n\n    // Texture unit allocation\n\n    function allocTexUnits( renderer, n ) {\n\n    \tvar r = arrayCacheI32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Int32Array( n );\n    \t\tarrayCacheI32[ n ] = r;\n\n    \t}\n\n    \tfor ( var i = 0; i !== n; ++ i )\n    \t\tr[ i ] = renderer.allocTextureUnit();\n\n    \treturn r;\n\n    }\n\n    // --- Setters ---\n\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n\n    // Single scalar\n\n    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n    // Single float vector (from flat array or THREE.VectorN)\n\n    function setValue2fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n    \telse gl.uniform2f( this.addr, v.x, v.y );\n\n    }\n\n    function setValue3fv( gl, v ) {\n\n    \tif ( v.x !== undefined )\n    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n    \telse if ( v.r !== undefined )\n    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n    \telse\n    \t\tgl.uniform3fv( this.addr, v );\n\n    }\n\n    function setValue4fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n    }\n\n    // Single matrix (from flat array or MatrixN)\n\n    function setValue2fm( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue3fm( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue4fm( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n    }\n\n    // Single texture (2D / Cube)\n\n    function setValueT1( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTexture2D( v || emptyTexture, unit );\n\n    }\n\n    function setValueT6( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n    }\n\n    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n    // Helper to pick the right setter for the singular case\n\n    function getSingularSetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1f; // FLOAT\n    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // Array of scalars\n\n    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n    // Array of vectors (flat or from THREE classes)\n\n    function setValueV2a( gl, v ) {\n\n    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n    }\n\n    function setValueV3a( gl, v ) {\n\n    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n    }\n\n    function setValueV4a( gl, v ) {\n\n    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n    }\n\n    // Array of matrices (flat or from THREE clases)\n\n    function setValueM2a( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n    }\n\n    function setValueM3a( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n    }\n\n    function setValueM4a( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n    }\n\n    // Array of textures (2D / Cube)\n\n    function setValueT1a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    function setValueT6a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    // Helper to pick the right setter for a pure (bottom-level) array\n\n    function getPureArraySetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1fv; // FLOAT\n    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // --- Uniform Classes ---\n\n    function SingleUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.setValue = getSingularSetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function PureArrayUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.size = activeInfo.size;\n    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function StructuredUniform( id ) {\n\n    \tthis.id = id;\n\n    \tUniformContainer.call( this ); // mix-in\n\n    }\n\n    StructuredUniform.prototype.setValue = function( gl, value ) {\n\n    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n    \t// are not allowed in structured uniforms.\n\n    \tvar seq = this.seq;\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tu.setValue( gl, value[ u.id ] );\n\n    \t}\n\n    };\n\n    // --- Top-level ---\n\n    // Parser - builds up the property tree from the path strings\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n    // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n\n    function addUniform( container, uniformObject ) {\n\n    \tcontainer.seq.push( uniformObject );\n    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\n    }\n\n    function parseUniform( activeInfo, addr, container ) {\n\n    \tvar path = activeInfo.name,\n    \t\tpathLength = path.length;\n\n    \t// reset RegExp object, because of the early exit of a previous run\n    \tRePathPart.lastIndex = 0;\n\n    \tfor (; ;) {\n\n    \t\tvar match = RePathPart.exec( path ),\n    \t\t\tmatchEnd = RePathPart.lastIndex,\n\n    \t\t\tid = match[ 1 ],\n    \t\t\tidIsIndex = match[ 2 ] === ']',\n    \t\t\tsubscript = match[ 3 ];\n\n    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n    \t\tif ( subscript === undefined ||\n    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n    \t\t\taddUniform( container, subscript === undefined ?\n    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n    \t\t\tbreak;\n\n    \t\t} else {\n    \t\t\t// step into inner node / create it in case it doesn't exist\n\n    \t\t\tvar map = container.map,\n    \t\t\t\tnext = map[ id ];\n\n    \t\t\tif ( next === undefined ) {\n\n    \t\t\t\tnext = new StructuredUniform( id );\n    \t\t\t\taddUniform( container, next );\n\n    \t\t\t}\n\n    \t\t\tcontainer = next;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    // Root Container\n\n    function WebGLUniforms( gl, program, renderer ) {\n\n    \tUniformContainer.call( this );\n\n    \tthis.renderer = renderer;\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar info = gl.getActiveUniform( program, i ),\n    \t\t\tpath = info.name,\n    \t\t\taddr = gl.getUniformLocation( program, path );\n\n    \t\tparseUniform( info, addr, this );\n\n    \t}\n\n    }\n\n    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n    \tvar v = object[ name ];\n\n    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\n    };\n\n\n    // Static interface\n\n    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v.needsUpdate !== false ) {\n    \t\t\t// note: always updating when .needsUpdate is undefined\n\n    \t\t\tu.setValue( gl, v.value, renderer );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    WebGLUniforms.seqWithValue = function( seq, values ) {\n\n    \tvar r = [];\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tif ( u.id in values ) r.push( u );\n\n    \t}\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.splitDynamic = function( seq, values ) {\n\n    \tvar r = null,\n    \t\tn = seq.length,\n    \t\tw = 0;\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v && v.dynamic === true ) {\n\n    \t\t\tif ( r === null ) r = [];\n    \t\t\tr.push( u );\n\n    \t\t} else {\n\n    \t\t\t// in-place compact 'seq', removing the matches\n    \t\t\tif ( w < i ) seq[ w ] = u;\n    \t\t\t++ w;\n\n    \t\t}\n\n    \t}\n\n    \tif ( w < n ) seq.length = w;\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar v = values[ seq[ i ].id ],\n    \t\t\tf = v.onUpdateCallback;\n\n    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\n    \t}\n\n    };\n\n    /**\n     * Uniform Utilities\n     */\n\n    exports.UniformsUtils = {\n\n    \tmerge: function ( uniforms ) {\n\n    \t\tvar merged = {};\n\n    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n    \t\t\tfor ( var p in tmp ) {\n\n    \t\t\t\tmerged[ p ] = tmp[ p ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn merged;\n\n    \t},\n\n    \tclone: function ( uniforms_src ) {\n\n    \t\tvar uniforms_dst = {};\n\n    \t\tfor ( var u in uniforms_src ) {\n\n    \t\t\tuniforms_dst[ u ] = {};\n\n    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn uniforms_dst;\n\n    \t}\n\n    };\n\n    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var ShaderChunk = {\n    \talphamap_fragment: alphamap_fragment,\n    \talphamap_pars_fragment: alphamap_pars_fragment,\n    \talphatest_fragment: alphatest_fragment,\n    \taomap_fragment: aomap_fragment,\n    \taomap_pars_fragment: aomap_pars_fragment,\n    \tbegin_vertex: begin_vertex,\n    \tbeginnormal_vertex: beginnormal_vertex,\n    \tbsdfs: bsdfs,\n    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n    \tclipping_planes_fragment: clipping_planes_fragment,\n    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    \tclipping_planes_vertex: clipping_planes_vertex,\n    \tcolor_fragment: color_fragment,\n    \tcolor_pars_fragment: color_pars_fragment,\n    \tcolor_pars_vertex: color_pars_vertex,\n    \tcolor_vertex: color_vertex,\n    \tcommon: common,\n    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    \tdefaultnormal_vertex: defaultnormal_vertex,\n    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n    \tdisplacementmap_vertex: displacementmap_vertex,\n    \temissivemap_fragment: emissivemap_fragment,\n    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n    \tencodings_fragment: encodings_fragment,\n    \tencodings_pars_fragment: encodings_pars_fragment,\n    \tenvmap_fragment: envmap_fragment,\n    \tenvmap_pars_fragment: envmap_pars_fragment,\n    \tenvmap_pars_vertex: envmap_pars_vertex,\n    \tenvmap_vertex: envmap_vertex,\n    \tfog_fragment: fog_fragment,\n    \tfog_pars_fragment: fog_pars_fragment,\n    \tlightmap_fragment: lightmap_fragment,\n    \tlightmap_pars_fragment: lightmap_pars_fragment,\n    \tlights_lambert_vertex: lights_lambert_vertex,\n    \tlights_pars: lights_pars,\n    \tlights_phong_fragment: lights_phong_fragment,\n    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n    \tlights_physical_fragment: lights_physical_fragment,\n    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n    \tlights_template: lights_template,\n    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n    \tmap_fragment: map_fragment,\n    \tmap_pars_fragment: map_pars_fragment,\n    \tmap_particle_fragment: map_particle_fragment,\n    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n    \tmetalnessmap_fragment: metalnessmap_fragment,\n    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    \tmorphnormal_vertex: morphnormal_vertex,\n    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n    \tmorphtarget_vertex: morphtarget_vertex,\n    \tnormal_flip: normal_flip,\n    \tnormal_fragment: normal_fragment,\n    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n    \tpacking: packing,\n    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    \tproject_vertex: project_vertex,\n    \troughnessmap_fragment: roughnessmap_fragment,\n    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n    \tshadowmap_vertex: shadowmap_vertex,\n    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n    \tskinbase_vertex: skinbase_vertex,\n    \tskinning_pars_vertex: skinning_pars_vertex,\n    \tskinning_vertex: skinning_vertex,\n    \tskinnormal_vertex: skinnormal_vertex,\n    \tspecularmap_fragment: specularmap_fragment,\n    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n    \ttonemapping_fragment: tonemapping_fragment,\n    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n    \tuv_pars_fragment: uv_pars_fragment,\n    \tuv_pars_vertex: uv_pars_vertex,\n    \tuv_vertex: uv_vertex,\n    \tuv2_pars_fragment: uv2_pars_fragment,\n    \tuv2_pars_vertex: uv2_pars_vertex,\n    \tuv2_vertex: uv2_vertex,\n    \tworldpos_vertex: worldpos_vertex,\n\n    \tcube_frag: cube_frag,\n    \tcube_vert: cube_vert,\n    \tdepth_frag: depth_frag,\n    \tdepth_vert: depth_vert,\n    \tdistanceRGBA_frag: distanceRGBA_frag,\n    \tdistanceRGBA_vert: distanceRGBA_vert,\n    \tequirect_frag: equirect_frag,\n    \tequirect_vert: equirect_vert,\n    \tlinedashed_frag: linedashed_frag,\n    \tlinedashed_vert: linedashed_vert,\n    \tmeshbasic_frag: meshbasic_frag,\n    \tmeshbasic_vert: meshbasic_vert,\n    \tmeshlambert_frag: meshlambert_frag,\n    \tmeshlambert_vert: meshlambert_vert,\n    \tmeshphong_frag: meshphong_frag,\n    \tmeshphong_vert: meshphong_vert,\n    \tmeshphysical_frag: meshphysical_frag,\n    \tmeshphysical_vert: meshphysical_vert,\n    \tnormal_frag: normal_frag,\n    \tnormal_vert: normal_vert,\n    \tpoints_frag: points_frag,\n    \tpoints_vert: points_vert,\n    \tshadow_frag: shadow_frag,\n    \tshadow_vert: shadow_vert\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Color( r, g, b ) {\n\n    \tif ( g === undefined && b === undefined ) {\n\n    \t\t// r is THREE.Color, hex or string\n    \t\treturn this.set( r );\n\n    \t}\n\n    \treturn this.setRGB( r, g, b );\n\n    }\n\n    Color.prototype = {\n\n    \tconstructor: Color,\n\n    \tisColor: true,\n\n    \tr: 1, g: 1, b: 1,\n\n    \tset: function ( value ) {\n\n    \t\tif ( (value && value.isColor) ) {\n\n    \t\t\tthis.copy( value );\n\n    \t\t} else if ( typeof value === 'number' ) {\n\n    \t\t\tthis.setHex( value );\n\n    \t\t} else if ( typeof value === 'string' ) {\n\n    \t\t\tthis.setStyle( value );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.r = scalar;\n    \t\tthis.g = scalar;\n    \t\tthis.b = scalar;\n\n    \t},\n\n    \tsetHex: function ( hex ) {\n\n    \t\thex = Math.floor( hex );\n\n    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n    \t\tthis.b = ( hex & 255 ) / 255;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetRGB: function ( r, g, b ) {\n\n    \t\tthis.r = r;\n    \t\tthis.g = g;\n    \t\tthis.b = b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetHSL: function () {\n\n    \t\tfunction hue2rgb( p, q, t ) {\n\n    \t\t\tif ( t < 0 ) t += 1;\n    \t\t\tif ( t > 1 ) t -= 1;\n    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n    \t\t\tif ( t < 1 / 2 ) return q;\n    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n    \t\t\treturn p;\n\n    \t\t}\n\n    \t\treturn function setHSL( h, s, l ) {\n\n    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\n    \t\t\tif ( s === 0 ) {\n\n    \t\t\t\tthis.r = this.g = this.b = l;\n\n    \t\t\t} else {\n\n    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n    \t\t\t\tvar q = ( 2 * l ) - p;\n\n    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n    \t\t\t\tthis.g = hue2rgb( q, p, h );\n    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetStyle: function ( style ) {\n\n    \t\tfunction handleAlpha( string ) {\n\n    \t\t\tif ( string === undefined ) return;\n\n    \t\t\tif ( parseFloat( string ) < 1 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tvar m;\n\n    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n    \t\t\t// rgb / hsl\n\n    \t\t\tvar color;\n    \t\t\tvar name = m[ 1 ];\n    \t\t\tvar components = m[ 2 ];\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'rgb':\n    \t\t\t\tcase 'rgba':\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'hsl':\n    \t\t\t\tcase 'hsla':\n\n    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n    \t\t\t// hex color\n\n    \t\t\tvar hex = m[ 1 ];\n    \t\t\tvar size = hex.length;\n\n    \t\t\tif ( size === 3 ) {\n\n    \t\t\t\t// #ff0\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t} else if ( size === 6 ) {\n\n    \t\t\t\t// #ff0000\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( style && style.length > 0 ) {\n\n    \t\t\t// color keywords\n    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\n    \t\t\tif ( hex !== undefined ) {\n\n    \t\t\t\t// red\n    \t\t\t\tthis.setHex( hex );\n\n    \t\t\t} else {\n\n    \t\t\t\t// unknown color\n    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.r, this.g, this.b );\n\n    \t},\n\n    \tcopy: function ( color ) {\n\n    \t\tthis.r = color.r;\n    \t\tthis.g = color.g;\n    \t\tthis.b = color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tthis.r = Math.pow( color.r, gammaFactor );\n    \t\tthis.g = Math.pow( color.g, gammaFactor );\n    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n    \t\tthis.r = Math.pow( color.r, safeInverse );\n    \t\tthis.g = Math.pow( color.g, safeInverse );\n    \t\tthis.b = Math.pow( color.b, safeInverse );\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertGammaToLinear: function () {\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tthis.r = r * r;\n    \t\tthis.g = g * g;\n    \t\tthis.b = b * b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertLinearToGamma: function () {\n\n    \t\tthis.r = Math.sqrt( this.r );\n    \t\tthis.g = Math.sqrt( this.g );\n    \t\tthis.b = Math.sqrt( this.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetHex: function () {\n\n    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    \t},\n\n    \tgetHexString: function () {\n\n    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    \t},\n\n    \tgetHSL: function ( optionalTarget ) {\n\n    \t\t// h,s,l ranges are in 0.0 - 1.0\n\n    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tvar max = Math.max( r, g, b );\n    \t\tvar min = Math.min( r, g, b );\n\n    \t\tvar hue, saturation;\n    \t\tvar lightness = ( min + max ) / 2.0;\n\n    \t\tif ( min === max ) {\n\n    \t\t\thue = 0;\n    \t\t\tsaturation = 0;\n\n    \t\t} else {\n\n    \t\t\tvar delta = max - min;\n\n    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n    \t\t\tswitch ( max ) {\n\n    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n    \t\t\t}\n\n    \t\t\thue /= 6;\n\n    \t\t}\n\n    \t\thsl.h = hue;\n    \t\thsl.s = saturation;\n    \t\thsl.l = lightness;\n\n    \t\treturn hsl;\n\n    \t},\n\n    \tgetStyle: function () {\n\n    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    \t},\n\n    \toffsetHSL: function ( h, s, l ) {\n\n    \t\tvar hsl = this.getHSL();\n\n    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( color ) {\n\n    \t\tthis.r += color.r;\n    \t\tthis.g += color.g;\n    \t\tthis.b += color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddColors: function ( color1, color2 ) {\n\n    \t\tthis.r = color1.r + color2.r;\n    \t\tthis.g = color1.g + color2.g;\n    \t\tthis.b = color1.b + color2.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.r += s;\n    \t\tthis.g += s;\n    \t\tthis.b += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function( color ) {\n\n    \t\tthis.r = Math.max( 0, this.r - color.r );\n    \t\tthis.g = Math.max( 0, this.g - color.g );\n    \t\tthis.b = Math.max( 0, this.b - color.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( color ) {\n\n    \t\tthis.r *= color.r;\n    \t\tthis.g *= color.g;\n    \t\tthis.b *= color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tthis.r *= s;\n    \t\tthis.g *= s;\n    \t\tthis.b *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerp: function ( color, alpha ) {\n\n    \t\tthis.r += ( color.r - this.r ) * alpha;\n    \t\tthis.g += ( color.g - this.g ) * alpha;\n    \t\tthis.b += ( color.b - this.b ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( c ) {\n\n    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.r = array[ offset ];\n    \t\tthis.g = array[ offset + 1 ];\n    \t\tthis.b = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.r;\n    \t\tarray[ offset + 1 ] = this.g;\n    \t\tarray[ offset + 2 ] = this.b;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\treturn this.getHex();\n\n    \t}\n\n    };\n\n    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n    /**\n     * Uniforms library for shared webgl shaders\n     */\n\n    var UniformsLib = {\n\n    \tcommon: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n    \t\tspecularMap: { value: null },\n    \t\talphaMap: { value: null },\n\n    \t\tenvMap: { value: null },\n    \t\tflipEnvMap: { value: - 1 },\n    \t\treflectivity: { value: 1.0 },\n    \t\trefractionRatio: { value: 0.98 }\n\n    \t},\n\n    \taomap: {\n\n    \t\taoMap: { value: null },\n    \t\taoMapIntensity: { value: 1 }\n\n    \t},\n\n    \tlightmap: {\n\n    \t\tlightMap: { value: null },\n    \t\tlightMapIntensity: { value: 1 }\n\n    \t},\n\n    \temissivemap: {\n\n    \t\temissiveMap: { value: null }\n\n    \t},\n\n    \tbumpmap: {\n\n    \t\tbumpMap: { value: null },\n    \t\tbumpScale: { value: 1 }\n\n    \t},\n\n    \tnormalmap: {\n\n    \t\tnormalMap: { value: null },\n    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n    \t},\n\n    \tdisplacementmap: {\n\n    \t\tdisplacementMap: { value: null },\n    \t\tdisplacementScale: { value: 1 },\n    \t\tdisplacementBias: { value: 0 }\n\n    \t},\n\n    \troughnessmap: {\n\n    \t\troughnessMap: { value: null }\n\n    \t},\n\n    \tmetalnessmap: {\n\n    \t\tmetalnessMap: { value: null }\n\n    \t},\n\n    \tfog: {\n\n    \t\tfogDensity: { value: 0.00025 },\n    \t\tfogNear: { value: 1 },\n    \t\tfogFar: { value: 2000 },\n    \t\tfogColor: { value: new Color( 0xffffff ) }\n\n    \t},\n\n    \tlights: {\n\n    \t\tambientLightColor: { value: [] },\n\n    \t\tdirectionalLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tcolor: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tdirectionalShadowMap: { value: [] },\n    \t\tdirectionalShadowMatrix: { value: [] },\n\n    \t\tspotLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdirection: {},\n    \t\t\tdistance: {},\n    \t\t\tconeCos: {},\n    \t\t\tpenumbraCos: {},\n    \t\t\tdecay: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tspotShadowMap: { value: [] },\n    \t\tspotShadowMatrix: { value: [] },\n\n    \t\tpointLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdecay: {},\n    \t\t\tdistance: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tpointShadowMap: { value: [] },\n    \t\tpointShadowMatrix: { value: [] },\n\n    \t\themisphereLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tskyColor: {},\n    \t\t\tgroundColor: {}\n    \t\t} }\n\n    \t},\n\n    \tpoints: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n    \t\tsize: { value: 1.0 },\n    \t\tscale: { value: 1.0 },\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     */\n\n    var ShaderLib = {\n\n    \tbasic: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n    \t},\n\n    \tlambert: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n    \t},\n\n    \tphong: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n    \t\t\t\tshininess: { value: 30 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphong_vert,\n    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\n    \t},\n\n    \tstandard: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.roughnessmap,\n    \t\t\tUniformsLib.metalnessmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\troughness: { value: 0.5 },\n    \t\t\t\tmetalness: { value: 0 },\n    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n    \t},\n\n    \tpoints: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.points,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.points_vert,\n    \t\tfragmentShader: ShaderChunk.points_frag\n\n    \t},\n\n    \tdashed: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.fog,\n\n    \t\t\t{\n    \t\t\t\tscale    : { value: 1 },\n    \t\t\t\tdashSize : { value: 1 },\n    \t\t\t\ttotalSize: { value: 2 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.linedashed_vert,\n    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\n    \t},\n\n    \tdepth: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.displacementmap\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.depth_vert,\n    \t\tfragmentShader: ShaderChunk.depth_frag\n\n    \t},\n\n    \tnormal: {\n\n    \t\tuniforms: {\n\n    \t\t\topacity : { value: 1.0 }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.normal_vert,\n    \t\tfragmentShader: ShaderChunk.normal_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tcube: {\n\n    \t\tuniforms: {\n    \t\t\ttCube: { value: null },\n    \t\t\ttFlip: { value: - 1 },\n    \t\t\topacity: { value: 1.0 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.cube_vert,\n    \t\tfragmentShader: ShaderChunk.cube_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tequirect: {\n\n    \t\tuniforms: {\n    \t\t\ttEquirect: { value: null },\n    \t\t\ttFlip: { value: - 1 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.equirect_vert,\n    \t\tfragmentShader: ShaderChunk.equirect_frag\n\n    \t},\n\n    \tdistanceRGBA: {\n\n    \t\tuniforms: {\n\n    \t\t\tlightPos: { value: new Vector3() }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n    \t}\n\n    };\n\n    ShaderLib.physical = {\n\n    \tuniforms: exports.UniformsUtils.merge( [\n\n    \t\tShaderLib.standard.uniforms,\n\n    \t\t{\n    \t\t\tclearCoat: { value: 0 },\n    \t\t\tclearCoatRoughness: { value: 0 }\n    \t\t}\n\n    \t] ),\n\n    \tvertexShader: ShaderChunk.meshphysical_vert,\n    \tfragmentShader: ShaderChunk.meshphysical_frag\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Box2( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n    }\n\n    Box2.prototype = {\n\n    \tconstructor: Box2,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = + Infinity;\n    \t\tthis.max.x = this.max.y = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector2();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlarePlugin( renderer, flares ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar shader, program, attributes, uniforms;\n\n    \tvar tempTexture, occlusionTexture;\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 1, - 1,  0, 0,\n    \t\t\t 1, - 1,  1, 0,\n    \t\t\t 1,  1,  1, 1,\n    \t\t\t- 1,  1,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\t// buffers\n\n    \t\tvertexBuffer     = gl.createBuffer();\n    \t\telementBuffer    = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\t// textures\n\n    \t\ttempTexture      = gl.createTexture();\n    \t\tocclusionTexture = gl.createTexture();\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tshader = {\n\n    \t\t\tvertexShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform vec3 screenPosition;\",\n    \t\t\t\t\"uniform vec2 scale;\",\n    \t\t\t\t\"uniform float rotation;\",\n\n    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n    \t\t\t\t\"attribute vec2 position;\",\n    \t\t\t\t\"attribute vec2 uv;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t\"vUV = uv;\",\n\n    \t\t\t\t\t\"vec2 pos = position;\",\n\n    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" ),\n\n    \t\t\tfragmentShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform sampler2D map;\",\n    \t\t\t\t\"uniform float opacity;\",\n    \t\t\t\t\"uniform vec3 color;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t// pink square\n\n    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n    \t\t\t\t\t// restore\n\n    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n    \t\t\t\t\t// flare\n\n    \t\t\t\t\t\"} else {\",\n\n    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" )\n\n    \t\t};\n\n    \t\tprogram = createProgram( shader );\n\n    \t\tattributes = {\n    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n    \t\t};\n\n    \t}\n\n    \t/*\n    \t * Render lens flares\n    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n    \t *         reads these back and calculates occlusion.\n    \t */\n\n    \tthis.render = function ( scene, camera, viewport ) {\n\n    \t\tif ( flares.length === 0 ) return;\n\n    \t\tvar tempPosition = new Vector3();\n\n    \t\tvar invAspect = viewport.w / viewport.z,\n    \t\t\thalfViewportWidth = viewport.z * 0.5,\n    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\n    \t\tvar size = 16 / viewport.w,\n    \t\t\tscale = new Vector2( size * invAspect, size );\n\n    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n    \t\tvar validArea = new Box2();\n\n    \t\tvalidArea.min.set( 0, 0 );\n    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.vertex );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t// loop through all lens flares to update their occlusion and positions\n    \t\t// setup gl and common used attribs/uniforms\n\n    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n    \t\tgl.uniform1i( uniforms.map, 1 );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.setDepthWrite( false );\n\n    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n    \t\t\tsize = 16 / viewport.w;\n    \t\t\tscale.set( size * invAspect, size );\n\n    \t\t\t// calc object screen position\n\n    \t\t\tvar flare = flares[ i ];\n\n    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n    \t\t\t// setup arrays for gl programs\n\n    \t\t\tscreenPosition.copy( tempPosition );\n\n    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n    \t\t\t// screen cull\n\n    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n    \t\t\t\t// save current RGB to temp texture\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// render pink quad\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n    \t\t\t\tstate.disable( gl.BLEND );\n    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// copy result to occlusionMap\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// restore graphics\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// update object positions\n\n    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\n    \t\t\t\tif ( flare.customUpdateCallback ) {\n\n    \t\t\t\t\tflare.customUpdateCallback( flare );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tflare.updateLensFlares();\n\n    \t\t\t\t}\n\n    \t\t\t\t// render flares\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n    \t\t\t\tstate.enable( gl.BLEND );\n\n    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n    \t\t\t\t\t\tscale.x = size * invAspect;\n    \t\t\t\t\t\tscale.y = size;\n\n    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n    \t\tstate.enable( gl.DEPTH_TEST );\n    \t\tstate.setDepthWrite( true );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram( shader ) {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n    \t\tgl.compileShader( fragmentShader );\n    \t\tgl.compileShader( vertexShader );\n\n    \t\tgl.attachShader( program, fragmentShader );\n    \t\tgl.attachShader( program, vertexShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    }\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpritePlugin( renderer, sprites ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar program, attributes, uniforms;\n\n    \tvar texture;\n\n    \t// decompose matrixWorld\n\n    \tvar spritePosition = new Vector3();\n    \tvar spriteRotation = new Quaternion();\n    \tvar spriteScale = new Vector3();\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 0.5, - 0.5,  0, 0,\n    \t\t\t  0.5, - 0.5,  1, 0,\n    \t\t\t  0.5,   0.5,  1, 1,\n    \t\t\t- 0.5,   0.5,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\tvertexBuffer  = gl.createBuffer();\n    \t\telementBuffer = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\tprogram = createProgram();\n\n    \t\tattributes = {\n    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n    \t\t};\n\n    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\tcanvas.width = 8;\n    \t\tcanvas.height = 8;\n\n    \t\tvar context = canvas.getContext( '2d' );\n    \t\tcontext.fillStyle = 'white';\n    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\n    \t\ttexture = new Texture( canvas );\n    \t\ttexture.needsUpdate = true;\n\n    \t}\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( sprites.length === 0 ) return;\n\n    \t\t// setup gl\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.position );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.enable( gl.BLEND );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n    \t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\tgl.uniform1i( uniforms.map, 0 );\n\n    \t\tvar oldFogType = 0;\n    \t\tvar sceneFogType = 0;\n    \t\tvar fog = scene.fog;\n\n    \t\tif ( fog ) {\n\n    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n    \t\t\tif ( (fog && fog.isFog) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n    \t\t\t\toldFogType = 1;\n    \t\t\t\tsceneFogType = 1;\n\n    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n    \t\t\t\toldFogType = 2;\n    \t\t\t\tsceneFogType = 2;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n    \t\t\toldFogType = 0;\n    \t\t\tsceneFogType = 0;\n\n    \t\t}\n\n\n    \t\t// update positions and sort\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n\n    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n    \t\t}\n\n    \t\tsprites.sort( painterSortStable );\n\n    \t\t// render all sprites\n\n    \t\tvar scale = [];\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n    \t\t\tvar material = sprite.material;\n\n    \t\t\tif ( material.visible === false ) continue;\n\n    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n    \t\t\tscale[ 0 ] = spriteScale.x;\n    \t\t\tscale[ 1 ] = spriteScale.y;\n\n    \t\t\tvar fogType = 0;\n\n    \t\t\tif ( scene.fog && material.fog ) {\n\n    \t\t\t\tfogType = sceneFogType;\n\n    \t\t\t}\n\n    \t\t\tif ( oldFogType !== fogType ) {\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n    \t\t\t\toldFogType = fogType;\n\n    \t\t\t}\n\n    \t\t\tif ( material.map !== null ) {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n    \t\t\t}\n\n    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n    \t\t\tstate.setDepthTest( material.depthTest );\n    \t\t\tstate.setDepthWrite( material.depthWrite );\n\n    \t\t\tif ( material.map ) {\n\n    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\n    \t\t\t}\n\n    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram() {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n    \t\tgl.shaderSource( vertexShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform float rotation;',\n    \t\t\t'uniform vec2 scale;',\n    \t\t\t'uniform vec2 uvOffset;',\n    \t\t\t'uniform vec2 uvScale;',\n\n    \t\t\t'attribute vec2 position;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\n    \t\t\t\t'vec2 rotatedPosition;',\n    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n    \t\t\t\t'vec4 finalPosition;',\n\n    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n    \t\t\t\t'gl_Position = finalPosition;',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.shaderSource( fragmentShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform vec3 color;',\n    \t\t\t'uniform sampler2D map;',\n    \t\t\t'uniform float opacity;',\n\n    \t\t\t'uniform int fogType;',\n    \t\t\t'uniform vec3 fogColor;',\n    \t\t\t'uniform float fogDensity;',\n    \t\t\t'uniform float fogNear;',\n    \t\t\t'uniform float fogFar;',\n    \t\t\t'uniform float alphaTest;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n    \t\t\t\t'if ( fogType > 0 ) {',\n\n    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n    \t\t\t\t\t'float fogFactor = 0.0;',\n\n    \t\t\t\t\t'if ( fogType == 1 ) {',\n\n    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n    \t\t\t\t\t'} else {',\n\n    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n    \t\t\t\t\t'}',\n\n    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n    \t\t\t\t'}',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.compileShader( vertexShader );\n    \t\tgl.compileShader( fragmentShader );\n\n    \t\tgl.attachShader( program, vertexShader );\n    \t\tgl.attachShader( program, fragmentShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\n    \t\t\treturn a.renderOrder - b.renderOrder;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn b.id - a.id;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Material() {\n\n    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Material';\n\n    \tthis.fog = true;\n    \tthis.lights = true;\n\n    \tthis.blending = NormalBlending;\n    \tthis.side = FrontSide;\n    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    \tthis.opacity = 1;\n    \tthis.transparent = false;\n\n    \tthis.blendSrc = SrcAlphaFactor;\n    \tthis.blendDst = OneMinusSrcAlphaFactor;\n    \tthis.blendEquation = AddEquation;\n    \tthis.blendSrcAlpha = null;\n    \tthis.blendDstAlpha = null;\n    \tthis.blendEquationAlpha = null;\n\n    \tthis.depthFunc = LessEqualDepth;\n    \tthis.depthTest = true;\n    \tthis.depthWrite = true;\n\n    \tthis.clippingPlanes = null;\n    \tthis.clipShadows = false;\n\n    \tthis.colorWrite = true;\n\n    \tthis.precision = null; // override the renderer's default precision for this material\n\n    \tthis.polygonOffset = false;\n    \tthis.polygonOffsetFactor = 0;\n    \tthis.polygonOffsetUnits = 0;\n\n    \tthis.alphaTest = 0;\n    \tthis.premultipliedAlpha = false;\n\n    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    \tthis.visible = true;\n\n    \tthis._needsUpdate = true;\n\n    }\n\n    Material.prototype = {\n\n    \tconstructor: Material,\n\n    \tisMaterial: true,\n\n    \tget needsUpdate() {\n\n    \t\treturn this._needsUpdate;\n\n    \t},\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.update();\n    \t\tthis._needsUpdate = value;\n\n    \t},\n\n    \tsetValues: function ( values ) {\n\n    \t\tif ( values === undefined ) return;\n\n    \t\tfor ( var key in values ) {\n\n    \t\t\tvar newValue = values[ key ];\n\n    \t\t\tif ( newValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar currentValue = this[ key ];\n\n    \t\t\tif ( currentValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n    \t\t\t\tcurrentValue.set( newValue );\n\n    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n    \t\t\t\tcurrentValue.copy( newValue );\n\n    \t\t\t} else if ( key === 'overdraw' ) {\n\n    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n    \t\t\t\tthis[ key ] = Number( newValue );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis[ key ] = newValue;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar isRoot = meta === undefined;\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tmeta = {\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Material',\n    \t\t\t\tgenerator: 'Material.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Material serialization\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n    \t\t\tdata.bumpScale = this.bumpScale;\n\n    \t\t}\n    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n    \t\t\tdata.normalScale = this.normalScale.toArray();\n\n    \t\t}\n    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n    \t\t\tdata.displacementScale = this.displacementScale;\n    \t\t\tdata.displacementBias = this.displacementBias;\n\n    \t\t}\n    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n    \t\t}\n\n    \t\tif ( this.size !== undefined ) data.size = this.size;\n    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n    \t\tdata.depthFunc = this.depthFunc;\n    \t\tdata.depthTest = this.depthTest;\n    \t\tdata.depthWrite = this.depthWrite;\n\n    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n    \t\tdata.skinning = this.skinning;\n    \t\tdata.morphTargets = this.morphTargets;\n\n    \t\t// TODO: Copied from Object3D.toJSON\n\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n    \t\t\tif ( images.length > 0 ) data.images = images;\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.fog = source.fog;\n    \t\tthis.lights = source.lights;\n\n    \t\tthis.blending = source.blending;\n    \t\tthis.side = source.side;\n    \t\tthis.shading = source.shading;\n    \t\tthis.vertexColors = source.vertexColors;\n\n    \t\tthis.opacity = source.opacity;\n    \t\tthis.transparent = source.transparent;\n\n    \t\tthis.blendSrc = source.blendSrc;\n    \t\tthis.blendDst = source.blendDst;\n    \t\tthis.blendEquation = source.blendEquation;\n    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n    \t\tthis.depthFunc = source.depthFunc;\n    \t\tthis.depthTest = source.depthTest;\n    \t\tthis.depthWrite = source.depthWrite;\n\n    \t\tthis.colorWrite = source.colorWrite;\n\n    \t\tthis.precision = source.precision;\n\n    \t\tthis.polygonOffset = source.polygonOffset;\n    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n    \t\tthis.alphaTest = source.alphaTest;\n\n    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n    \t\tthis.overdraw = source.overdraw;\n\n    \t\tthis.visible = source.visible;\n    \t\tthis.clipShadows = source.clipShadows;\n\n    \t\tvar srcPlanes = source.clippingPlanes,\n    \t\t\tdstPlanes = null;\n\n    \t\tif ( srcPlanes !== null ) {\n\n    \t\t\tvar n = srcPlanes.length;\n    \t\t\tdstPlanes = new Array( n );\n\n    \t\t\tfor ( var i = 0; i !== n; ++ i )\n    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n    \t\t}\n\n    \t\tthis.clippingPlanes = dstPlanes;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdate: function () {\n\n    \t\tthis.dispatchEvent( { type: 'update' } );\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    };\n\n    Object.assign( Material.prototype, EventDispatcher.prototype );\n\n    var count$1 = 0;\n    function MaterialIdCount() { return count$1++; };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  defines: { \"label\" : \"value\" },\n     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n     *\n     *  fragmentShader: <string>,\n     *  vertexShader: <string>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  lights: <bool>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function ShaderMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'ShaderMaterial';\n\n    \tthis.defines = {};\n    \tthis.uniforms = {};\n\n    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n    \tthis.linewidth = 1;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false; // set to use scene fog\n    \tthis.lights = false; // set to use scene lights\n    \tthis.clipping = false; // set to use user-defined clipping planes\n\n    \tthis.skinning = false; // set to use skinning attribute streams\n    \tthis.morphTargets = false; // set to use morph targets\n    \tthis.morphNormals = false; // set to use morph normals\n\n    \tthis.extensions = {\n    \t\tderivatives: false, // set to use derivatives\n    \t\tfragDepth: false, // set to use fragment depth values\n    \t\tdrawBuffers: false, // set to use draw buffers\n    \t\tshaderTextureLOD: false // set to use shader texture LOD\n    \t};\n\n    \t// When rendered geometry doesn't include these attributes but the material does,\n    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n    \tthis.defaultAttributeValues = {\n    \t\t'color': [ 1, 1, 1 ],\n    \t\t'uv': [ 0, 0 ],\n    \t\t'uv2': [ 0, 0 ]\n    \t};\n\n    \tthis.index0AttributeName = undefined;\n\n    \tif ( parameters !== undefined ) {\n\n    \t\tif ( parameters.attributes !== undefined ) {\n\n    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n    \t\t}\n\n    \t\tthis.setValues( parameters );\n\n    \t}\n\n    }\n\n    ShaderMaterial.prototype = Object.create( Material.prototype );\n    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n    ShaderMaterial.prototype.isShaderMaterial = true;\n\n    ShaderMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.fragmentShader = source.fragmentShader;\n    \tthis.vertexShader = source.vertexShader;\n\n    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\n    \tthis.defines = source.defines;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \tthis.lights = source.lights;\n    \tthis.clipping = source.clipping;\n\n    \tthis.skinning = source.skinning;\n\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \tthis.extensions = source.extensions;\n\n    \treturn this;\n\n    };\n\n    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Material.prototype.toJSON.call( this, meta );\n\n    \tdata.uniforms = this.uniforms;\n    \tdata.vertexShader = this.vertexShader;\n    \tdata.fragmentShader = this.fragmentShader;\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / https://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshDepthMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshDepthMaterial';\n\n    \tthis.depthPacking = BasicDepthPacking;\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.map = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n    MeshDepthMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.depthPacking = source.depthPacking;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \tthis.map = source.map;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Box3( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n    }\n\n    Box3.prototype = {\n\n    \tconstructor: Box3,\n\n    \tisBox3: true,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromArray: function ( array ) {\n\n    \t\tvar minX = + Infinity;\n    \t\tvar minY = + Infinity;\n    \t\tvar minZ = + Infinity;\n\n    \t\tvar maxX = - Infinity;\n    \t\tvar maxY = - Infinity;\n    \t\tvar maxZ = - Infinity;\n\n    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\tvar x = array[ i ];\n    \t\t\tvar y = array[ i + 1 ];\n    \t\t\tvar z = array[ i + 2 ];\n\n    \t\t\tif ( x < minX ) minX = x;\n    \t\t\tif ( y < minY ) minY = y;\n    \t\t\tif ( z < minZ ) minZ = z;\n\n    \t\t\tif ( x > maxX ) maxX = x;\n    \t\t\tif ( y > maxY ) maxY = y;\n    \t\t\tif ( z > maxZ ) maxZ = z;\n\n    \t\t}\n\n    \t\tthis.min.set( minX, minY, minZ );\n    \t\tthis.max.set( maxX, maxY, maxZ );\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromObject: function () {\n\n    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n    \t\t// accounting for both the object's, and children's, world transforms\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromObject( object ) {\n\n    \t\t\tvar scope = this;\n\n    \t\t\tobject.updateMatrixWorld( true );\n\n    \t\t\tthis.makeEmpty();\n\n    \t\t\tobject.traverse( function ( node ) {\n\n    \t\t\t\tvar geometry = node.geometry;\n\n    \t\t\t\tif ( geometry !== undefined ) {\n\n    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\t\t\t\tvar array, offset, stride;\n\n    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n    \t\t\t\t\t\t\t\toffset = attribute.offset;\n    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tarray = attribute.array;\n    \t\t\t\t\t\t\t\toffset = 0;\n    \t\t\t\t\t\t\t\tstride = 3;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsSphere: ( function () {\n\n    \t\tvar closestPoint;\n\n    \t\treturn function intersectsSphere( sphere ) {\n\n    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n    \t\t\t// Find the point on the AABB closest to the sphere center.\n    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We compute the minimum and maximum dot product values. If those values\n    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n    \t\tvar min, max;\n\n    \t\tif ( plane.normal.x > 0 ) {\n\n    \t\t\tmin = plane.normal.x * this.min.x;\n    \t\t\tmax = plane.normal.x * this.max.x;\n\n    \t\t} else {\n\n    \t\t\tmin = plane.normal.x * this.max.x;\n    \t\t\tmax = plane.normal.x * this.min.x;\n\n    \t\t}\n\n    \t\tif ( plane.normal.y > 0 ) {\n\n    \t\t\tmin += plane.normal.y * this.min.y;\n    \t\t\tmax += plane.normal.y * this.max.y;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.y * this.max.y;\n    \t\t\tmax += plane.normal.y * this.min.y;\n\n    \t\t}\n\n    \t\tif ( plane.normal.z > 0 ) {\n\n    \t\t\tmin += plane.normal.z * this.min.z;\n    \t\t\tmax += plane.normal.z * this.max.z;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.z * this.max.z;\n    \t\t\tmax += plane.normal.z * this.min.z;\n\n    \t\t}\n\n    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tgetBoundingSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function getBoundingSphere( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Sphere();\n\n    \t\t\tthis.getCenter( result.center );\n\n    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    \t\tif( this.isEmpty() ) this.makeEmpty();\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar points = [\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3()\n    \t\t];\n\n    \t\treturn function applyMatrix4( matrix ) {\n\n    \t\t\t// transform of empty box is an empty box.\n    \t\t\tif( this.isEmpty() ) return this;\n\n    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n    \t\t\tthis.setFromPoints( points );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Sphere( center, radius ) {\n\n    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n    }\n\n    Sphere.prototype = {\n\n    \tconstructor: Sphere,\n\n    \tset: function ( center, radius ) {\n\n    \t\tthis.center.copy( center );\n    \t\tthis.radius = radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function () {\n\n    \t\tvar box = new Box3();\n\n    \t\treturn function setFromPoints( points, optionalCenter ) {\n\n    \t\t\tvar center = this.center;\n\n    \t\t\tif ( optionalCenter !== undefined ) {\n\n    \t\t\t\tcenter.copy( optionalCenter );\n\n    \t\t\t} else {\n\n    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n    \t\t\t}\n\n    \t\t\tvar maxRadiusSq = 0;\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n    \t\t\t}\n\n    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( sphere ) {\n\n    \t\tthis.center.copy( sphere.center );\n    \t\tthis.radius = sphere.radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tempty: function () {\n\n    \t\treturn ( this.radius <= 0 );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar radiusSum = this.radius + sphere.radius;\n\n    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsSphere( this );\n\n    \t},\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We use the following equation to compute the signed distance from\n    \t\t// the center of the sphere to the plane.\n    \t\t//\n    \t\t// distance = q * n - d\n    \t\t//\n    \t\t// If this distance is greater than the radius of the sphere,\n    \t\t// then there is no intersection.\n\n    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.copy( point );\n\n    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n    \t\t\tresult.sub( this.center ).normalize();\n    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \tgetBoundingBox: function ( optionalTarget ) {\n\n    \t\tvar box = optionalTarget || new Box3();\n\n    \t\tbox.set( this.center, this.center );\n    \t\tbox.expandByScalar( this.radius );\n\n    \t\treturn box;\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.center.applyMatrix4( matrix );\n    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.center.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( sphere ) {\n\n    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     * @author tschw\n     */\n\n    function Matrix3() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0,\n    \t\t0, 1, 0,\n    \t\t0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix3.prototype = {\n\n    \tconstructor: Matrix3,\n\n    \tisMatrix3: true,\n\n    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0,\n    \t\t\t0, 1, 0,\n    \t\t\t0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix4: function( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix3( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix3( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n    \t},\n\n    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\n    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n    \t\t}\n\n    \t\tvar me = matrix.elements,\n    \t\t\tte = this.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n    \t\t\tt11 = n33 * n22 - n32 * n23,\n    \t\t\tt12 = n32 * n13 - n33 * n12,\n    \t\t\tt13 = n23 * n12 - n22 * n13,\n\n    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n    \t\tte[ 3 ] = t12 * detInv;\n    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n    \t\tte[ 6 ] = t13 * detInv;\n    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar tmp, m = this.elements;\n\n    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetNormalMatrix: function ( matrix4 ) {\n\n    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n    \t},\n\n    \ttransposeIntoArray: function ( r ) {\n\n    \t\tvar m = this.elements;\n\n    \t\tr[ 0 ] = m[ 0 ];\n    \t\tr[ 1 ] = m[ 3 ];\n    \t\tr[ 2 ] = m[ 6 ];\n    \t\tr[ 3 ] = m[ 1 ];\n    \t\tr[ 4 ] = m[ 4 ];\n    \t\tr[ 5 ] = m[ 7 ];\n    \t\tr[ 6 ] = m[ 2 ];\n    \t\tr[ 7 ] = m[ 5 ];\n    \t\tr[ 8 ] = m[ 8 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 9; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Plane( normal, constant ) {\n\n    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n    }\n\n    Plane.prototype = {\n\n    \tconstructor: Plane,\n\n    \tset: function ( normal, constant ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponents: function ( x, y, z, w ) {\n\n    \t\tthis.normal.set( x, y, z );\n    \t\tthis.constant = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCoplanarPoints: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( plane ) {\n\n    \t\tthis.normal.copy( plane.normal );\n    \t\tthis.constant = plane.constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n    \t\tthis.constant *= inverseNormalLength;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.constant *= - 1;\n    \t\tthis.normal.negate();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn this.normal.dot( point ) + this.constant;\n\n    \t},\n\n    \tdistanceToSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    \t},\n\n    \tprojectPoint: function ( point, optionalTarget ) {\n\n    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    \t},\n\n    \torthoPoint: function ( point, optionalTarget ) {\n\n    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    \t},\n\n    \tintersectLine: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectLine( line, optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tvar direction = line.delta( v1 );\n\n    \t\t\tvar denominator = this.normal.dot( direction );\n\n    \t\t\tif ( denominator === 0 ) {\n\n    \t\t\t\t// line is coplanar, return origin\n    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n    \t\t\t\t\treturn result.copy( line.start );\n\n    \t\t\t\t}\n\n    \t\t\t\t// Unsure if this is the correct method to handle this case.\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n    \t\t\tif ( t < 0 || t > 1 ) {\n\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsLine: function ( line ) {\n\n    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    \t\tvar startSign = this.distanceToPoint( line.start );\n    \t\tvar endSign = this.distanceToPoint( line.end );\n\n    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsPlane( this );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn sphere.intersectsPlane( this );\n\n    \t},\n\n    \tcoplanarPoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar m1 = new Matrix3();\n\n    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n    \t\t\t// transform normal based on theory here:\n    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n    \t\t\tthis.constant = - referencePoint.dot( normal );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( plane ) {\n\n    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / http://clara.io\n     */\n\n    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n    \tthis.planes = [\n\n    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\n    \t];\n\n    }\n\n    Frustum.prototype = {\n\n    \tconstructor: Frustum,\n\n    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tplanes[ 0 ].copy( p0 );\n    \t\tplanes[ 1 ].copy( p1 );\n    \t\tplanes[ 2 ].copy( p2 );\n    \t\tplanes[ 3 ].copy( p3 );\n    \t\tplanes[ 4 ].copy( p4 );\n    \t\tplanes[ 5 ].copy( p5 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( frustum ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix: function ( m ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar me = m.elements;\n    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tintersectsObject: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsObject( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometry.boundingSphere === null )\n    \t\t\t\tgeometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere )\n    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSprite: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsSprite( sprite ) {\n\n    \t\t\tsphere.center.set( 0, 0, 0 );\n    \t\t\tsphere.radius = 0.7071067811865476;\n    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar center = sphere.center;\n    \t\tvar negRadius = - sphere.radius;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n    \t\t\tif ( distance < negRadius ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsBox: function () {\n\n    \t\tvar p1 = new Vector3(),\n    \t\t\tp2 = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\tvar planes = this.planes;\n\n    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n    \t\t\t\tvar plane = planes[ i ];\n\n    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n    \t\t\t\t// if both outside plane, no intersection\n\n    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n    \t\t\t\t\treturn false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t};\n\n    \t}(),\n\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t}\n\n    };\n\n    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n    \tvar _gl = _renderer.context,\n    \t_state = _renderer.state,\n    \t_frustum = new Frustum(),\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_lightShadows = _lights.shadows,\n\n    \t_shadowMapSize = new Vector2(),\n    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n    \t_lookTarget = new Vector3(),\n    \t_lightPositionWorld = new Vector3(),\n\n    \t_renderList = [],\n\n    \t_MorphingFlag = 1,\n    \t_SkinningFlag = 2,\n\n    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n    \t_materialCache = {};\n\n    \tvar cubeDirections = [\n    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n    \t];\n\n    \tvar cubeUps = [\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n    \t];\n\n    \tvar cube2DViewPorts = [\n    \t\tnew Vector4(), new Vector4(), new Vector4(),\n    \t\tnew Vector4(), new Vector4(), new Vector4()\n    \t];\n\n    \t// init\n\n    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n    \tdepthMaterialTemplate.clipping = true;\n\n    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\n    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n    \t\tdepthMaterial.morphTargets = useMorphing;\n    \t\tdepthMaterial.skinning = useSkinning;\n\n    \t\t_depthMaterials[ i ] = depthMaterial;\n\n    \t\tvar distanceMaterial = new ShaderMaterial( {\n    \t\t\tdefines: {\n    \t\t\t\t'USE_SHADOWMAP': ''\n    \t\t\t},\n    \t\t\tuniforms: distanceUniforms,\n    \t\t\tvertexShader: distanceShader.vertexShader,\n    \t\t\tfragmentShader: distanceShader.fragmentShader,\n    \t\t\tmorphTargets: useMorphing,\n    \t\t\tskinning: useSkinning,\n    \t\t\tclipping: true\n    \t\t} );\n\n    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\n    \t}\n\n    \t//\n\n    \tvar scope = this;\n\n    \tthis.enabled = false;\n\n    \tthis.autoUpdate = true;\n    \tthis.needsUpdate = false;\n\n    \tthis.type = PCFShadowMap;\n\n    \tthis.renderReverseSided = true;\n    \tthis.renderSingleSided = true;\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( scope.enabled === false ) return;\n    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n    \t\tif ( _lightShadows.length === 0 ) return;\n\n    \t\t// Set GL state for depth map.\n    \t\t_state.clearColor( 1, 1, 1, 1 );\n    \t\t_state.disable( _gl.BLEND );\n    \t\t_state.setDepthTest( true );\n    \t\t_state.setScissorTest( false );\n\n    \t\t// render depth map\n\n    \t\tvar faceCount, isPointLight;\n\n    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n    \t\t\tvar light = _lightShadows[ i ];\n    \t\t\tvar shadow = light.shadow;\n\n    \t\t\tif ( shadow === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar shadowCamera = shadow.camera;\n\n    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n    \t\t\tif ( (light && light.isPointLight) ) {\n\n    \t\t\t\tfaceCount = 6;\n    \t\t\t\tisPointLight = true;\n\n    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n    \t\t\t\t// following orientation:\n    \t\t\t\t//\n    \t\t\t\t//  xzXZ\n    \t\t\t\t//   y Y\n    \t\t\t\t//\n    \t\t\t\t// X - Positive x direction\n    \t\t\t\t// x - Negative x direction\n    \t\t\t\t// Y - Positive y direction\n    \t\t\t\t// y - Negative y direction\n    \t\t\t\t// Z - Positive z direction\n    \t\t\t\t// z - Negative z direction\n\n    \t\t\t\t// positive X\n    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative X\n    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Z\n    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative Z\n    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Y\n    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n    \t\t\t\t// negative Y\n    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n    \t\t\t\t_shadowMapSize.x *= 4.0;\n    \t\t\t\t_shadowMapSize.y *= 2.0;\n\n    \t\t\t} else {\n\n    \t\t\t\tfaceCount = 1;\n    \t\t\t\tisPointLight = false;\n\n    \t\t\t}\n\n    \t\t\tif ( shadow.map === null ) {\n\n    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\n    \t\t\t}\n\n    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n    \t\t\t\tshadow.update( light );\n\n    \t\t\t}\n\n    \t\t\tvar shadowMap = shadow.map;\n    \t\t\tvar shadowMatrix = shadow.matrix;\n\n    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n    \t\t\t_renderer.setRenderTarget( shadowMap );\n    \t\t\t_renderer.clear();\n\n    \t\t\t// render shadow map for each cube face (if omni-directional) or\n    \t\t\t// run a single pass if not\n\n    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n    \t\t\t\tif ( isPointLight ) {\n\n    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n    \t\t\t\t\t_state.viewport( vpDimensions );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t}\n\n    \t\t\t\tshadowCamera.updateMatrixWorld();\n    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n    \t\t\t\t// compute shadow matrix\n\n    \t\t\t\tshadowMatrix.set(\n    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n    \t\t\t\t);\n\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n    \t\t\t\t// update camera matrices and frustum\n\n    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\t\t\t// set object matrices & frustum culling\n\n    \t\t\t\t_renderList.length = 0;\n\n    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n    \t\t\t\t// render shadow map\n    \t\t\t\t// render regular objects\n\n    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar object = _renderList[ j ];\n    \t\t\t\t\tvar geometry = _objects.update( object );\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n    \t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n    \t\t\t\t\t\t\tvar group = groups[ k ];\n    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Restore GL state.\n    \t\tvar clearColor = _renderer.getClearColor(),\n    \t\tclearAlpha = _renderer.getClearAlpha();\n    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n    \t\tscope.needsUpdate = false;\n\n    \t};\n\n    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tvar result = null;\n\n    \t\tvar materialVariants = _depthMaterials;\n    \t\tvar customMaterial = object.customDepthMaterial;\n\n    \t\tif ( isPointLight ) {\n\n    \t\t\tmaterialVariants = _distanceMaterials;\n    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\n    \t\t}\n\n    \t\tif ( ! customMaterial ) {\n\n    \t\t\tvar useMorphing = false;\n\n    \t\t\tif ( material.morphTargets ) {\n\n    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n    \t\t\tvar variantIndex = 0;\n\n    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n    \t\t\tresult = materialVariants[ variantIndex ];\n\n    \t\t} else {\n\n    \t\t\tresult = customMaterial;\n\n    \t\t}\n\n    \t\tif ( _renderer.localClippingEnabled &&\n    \t\t\t material.clipShadows === true &&\n    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n    \t\t\t// in this case we need a unique material instance reflecting the\n    \t\t\t// appropriate state\n\n    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n    \t\t\tif ( materialsForVariant === undefined ) {\n\n    \t\t\t\tmaterialsForVariant = {};\n    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n    \t\t\t}\n\n    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n    \t\t\tif ( cachedMaterial === undefined ) {\n\n    \t\t\t\tcachedMaterial = result.clone();\n    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n    \t\t\t}\n\n    \t\t\tresult = cachedMaterial;\n\n    \t\t}\n\n    \t\tresult.visible = material.visible;\n    \t\tresult.wireframe = material.wireframe;\n\n    \t\tvar side = material.side;\n\n    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n    \t\t\tside = FrontSide;\n\n    \t\t}\n\n    \t\tif ( scope.renderReverseSided ) {\n\n    \t\t\tif ( side === FrontSide ) side = BackSide;\n    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\n    \t\t}\n\n    \t\tresult.side = side;\n\n    \t\tresult.clipShadows = material.clipShadows;\n    \t\tresult.clippingPlanes = material.clippingPlanes;\n\n    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n    \t\tresult.linewidth = material.linewidth;\n\n    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    \tfunction projectObject( object, camera, shadowCamera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n    \t\t\t\tvar material = object.material;\n\n    \t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n    \t\t\t\t\t_renderList.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Ray( origin, direction ) {\n\n    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n    }\n\n    Ray.prototype = {\n\n    \tconstructor: Ray,\n\n    \tset: function ( origin, direction ) {\n\n    \t\tthis.origin.copy( origin );\n    \t\tthis.direction.copy( direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( ray ) {\n\n    \t\tthis.origin.copy( ray.origin );\n    \t\tthis.direction.copy( ray.direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    \t},\n\n    \tlookAt: function ( v ) {\n\n    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \trecast: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function recast( t ) {\n\n    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\tresult.subVectors( point, this.origin );\n    \t\tvar directionDistance = result.dot( this.direction );\n\n    \t\tif ( directionDistance < 0 ) {\n\n    \t\t\treturn result.copy( this.origin );\n\n    \t\t}\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n    \t},\n\n    \tdistanceSqToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceSqToPoint( point ) {\n\n    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n    \t\t\t// point behind the ray\n\n    \t\t\tif ( directionDistance < 0 ) {\n\n    \t\t\t\treturn this.origin.distanceToSquared( point );\n\n    \t\t\t}\n\n    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t\t\treturn v1.distanceToSquared( point );\n\n    \t\t};\n\n    \t}(),\n\n    \tdistanceSqToSegment: function () {\n\n    \t\tvar segCenter = new Vector3();\n    \t\tvar segDir = new Vector3();\n    \t\tvar diff = new Vector3();\n\n    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    \t\t\t// It returns the min distance between the ray and the segment\n    \t\t\t// defined by v0 and v1\n    \t\t\t// It can also set two optional targets :\n    \t\t\t// - The closest point on the ray\n    \t\t\t// - The closest point on the segment\n\n    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n    \t\t\tvar a01 = - this.direction.dot( segDir );\n    \t\t\tvar b0 = diff.dot( this.direction );\n    \t\t\tvar b1 = - diff.dot( segDir );\n    \t\t\tvar c = diff.lengthSq();\n    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n    \t\t\tvar s0, s1, sqrDist, extDet;\n\n    \t\t\tif ( det > 0 ) {\n\n    \t\t\t\t// The ray and segment are not parallel.\n\n    \t\t\t\ts0 = a01 * b1 - b0;\n    \t\t\t\ts1 = a01 * b0 - b1;\n    \t\t\t\textDet = segExtent * det;\n\n    \t\t\t\tif ( s0 >= 0 ) {\n\n    \t\t\t\t\tif ( s1 >= - extDet ) {\n\n    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t\t// region 0\n    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n    \t\t\t\t\t\t\tvar invDet = 1 / det;\n    \t\t\t\t\t\t\ts0 *= invDet;\n    \t\t\t\t\t\t\ts1 *= invDet;\n    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t// region 1\n\n    \t\t\t\t\t\t\ts1 = segExtent;\n    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 5\n\n    \t\t\t\t\t\ts1 = - segExtent;\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( s1 <= - extDet ) {\n\n    \t\t\t\t\t\t// region 4\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t// region 3\n\n    \t\t\t\t\t\ts0 = 0;\n    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 2\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// Ray and segment are parallel.\n\n    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnRay ) {\n\n    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnSegment ) {\n\n    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n    \t\t\t}\n\n    \t\t\treturn sqrDist;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n    \t\t\tv1.subVectors( sphere.center, this.origin );\n    \t\t\tvar tca = v1.dot( this.direction );\n    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n    \t\t\tif ( d2 > radius2 ) return null;\n\n    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n    \t\t\t// t0 = first intersect point - entrance on front of sphere\n    \t\t\tvar t0 = tca - thc;\n\n    \t\t\t// t1 = second intersect point - exit point on back of sphere\n    \t\t\tvar t1 = tca + thc;\n\n    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n    \t\t\t// test to see if t0 is behind the ray:\n    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    \t\t\t// in order to always return an intersect point that is in front of the ray.\n    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n    \t\t\treturn this.at( t0, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    \t},\n\n    \tdistanceToPlane: function ( plane ) {\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator === 0 ) {\n\n    \t\t\t// line is coplanar, return origin\n    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n    \t\t\t\treturn 0;\n\n    \t\t\t}\n\n    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n    \t\t// Return if the ray never intersects the plane\n\n    \t\treturn t >= 0 ? t :  null;\n\n    \t},\n\n    \tintersectPlane: function ( plane, optionalTarget ) {\n\n    \t\tvar t = this.distanceToPlane( plane );\n\n    \t\tif ( t === null ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\treturn this.at( t, optionalTarget );\n\n    \t},\n\n\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// check if the ray lies on the plane first\n\n    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n    \t\tif ( distToPoint === 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator * distToPoint < 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// ray origin is behind the plane (and is pointing behind it)\n\n    \t\treturn false;\n\n    \t},\n\n    \tintersectBox: function ( box, optionalTarget ) {\n\n    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n    \t\tvar invdirx = 1 / this.direction.x,\n    \t\t\tinvdiry = 1 / this.direction.y,\n    \t\t\tinvdirz = 1 / this.direction.z;\n\n    \t\tvar origin = this.origin;\n\n    \t\tif ( invdirx >= 0 ) {\n\n    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n    \t\t} else {\n\n    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n    \t\t}\n\n    \t\tif ( invdiry >= 0 ) {\n\n    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n    \t\t} else {\n\n    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n    \t\t// These lines also handle the case where tmin or tmax is NaN\n    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n    \t\tif ( invdirz >= 0 ) {\n\n    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n    \t\t} else {\n\n    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n    \t\t//return point closest to the ray (positive side)\n\n    \t\tif ( tmax < 0 ) return null;\n\n    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    \t},\n\n    \tintersectsBox: ( function () {\n\n    \t\tvar v = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\treturn this.intersectBox( box, v ) !== null;\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectTriangle: function () {\n\n    \t\t// Compute the offset origin, edges, and normal.\n    \t\tvar diff = new Vector3();\n    \t\tvar edge1 = new Vector3();\n    \t\tvar edge2 = new Vector3();\n    \t\tvar normal = new Vector3();\n\n    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    \t\t\tedge1.subVectors( b, a );\n    \t\t\tedge2.subVectors( c, a );\n    \t\t\tnormal.crossVectors( edge1, edge2 );\n\n    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    \t\t\tvar DdN = this.direction.dot( normal );\n    \t\t\tvar sign;\n\n    \t\t\tif ( DdN > 0 ) {\n\n    \t\t\t\tif ( backfaceCulling ) return null;\n    \t\t\t\tsign = 1;\n\n    \t\t\t} else if ( DdN < 0 ) {\n\n    \t\t\t\tsign = - 1;\n    \t\t\t\tDdN = - DdN;\n\n    \t\t\t} else {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tdiff.subVectors( this.origin, a );\n    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n    \t\t\t// b1 < 0, no intersection\n    \t\t\tif ( DdQxE2 < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n    \t\t\t// b2 < 0, no intersection\n    \t\t\tif ( DdE1xQ < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// b1+b2 > 1, no intersection\n    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Line intersects triangle, check if ray does.\n    \t\t\tvar QdN = - sign * diff.dot( normal );\n\n    \t\t\t// t < 0, no intersection\n    \t\t\tif ( QdN < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Ray intersects triangle.\n    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix4: function ( matrix4 ) {\n\n    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n    \t\tthis.origin.applyMatrix4( matrix4 );\n    \t\tthis.direction.sub( this.origin );\n    \t\tthis.direction.normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( ray ) {\n\n    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Euler( x, y, z, order ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._order = order || Euler.DefaultOrder;\n\n    }\n\n    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n    Euler.DefaultOrder = 'XYZ';\n\n    Euler.prototype = {\n\n    \tconstructor: Euler,\n\n    \tisEuler: true,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget order () {\n\n    \t\treturn this._order;\n\n    \t},\n\n    \tset order ( value ) {\n\n    \t\tthis._order = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, order ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._order = order || this._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n    \t},\n\n    \tcopy: function ( euler ) {\n\n    \t\tthis._x = euler._x;\n    \t\tthis._y = euler._y;\n    \t\tthis._z = euler._z;\n    \t\tthis._order = euler._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m, order, update ) {\n\n    \t\tvar clamp = exports.Math.clamp;\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements;\n    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\torder = order || this._order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = 0;\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._y = 0;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n    \t\t}\n\n    \t\tthis._order = order;\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromQuaternion: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function setFromQuaternion( q, order, update ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\n    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromVector3: function ( v, order ) {\n\n    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n    \t},\n\n    \treorder: function () {\n\n    \t\t// WARNING: this discards revolution information -bhouston\n\n    \t\tvar q = new Quaternion();\n\n    \t\treturn function reorder( newOrder ) {\n\n    \t\t\tq.setFromEuler( this );\n\n    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( euler ) {\n\n    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    \t},\n\n    \tfromArray: function ( array ) {\n\n    \t\tthis._x = array[ 0 ];\n    \t\tthis._y = array[ 1 ];\n    \t\tthis._z = array[ 2 ];\n    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._order;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoVector3: function ( optionalResult ) {\n\n    \t\tif ( optionalResult ) {\n\n    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n    \t\t} else {\n\n    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\n    \t\t}\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Layers() {\n\n    \tthis.mask = 1;\n\n    }\n\n    Layers.prototype = {\n\n    \tconstructor: Layers,\n\n    \tset: function ( channel ) {\n\n    \t\tthis.mask = 1 << channel;\n\n    \t},\n\n    \tenable: function ( channel ) {\n\n    \t\tthis.mask |= 1 << channel;\n\n    \t},\n\n    \ttoggle: function ( channel ) {\n\n    \t\tthis.mask ^= 1 << channel;\n\n    \t},\n\n    \tdisable: function ( channel ) {\n\n    \t\tthis.mask &= ~ ( 1 << channel );\n\n    \t},\n\n    \ttest: function ( layers ) {\n\n    \t\treturn ( this.mask & layers.mask ) !== 0;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author elephantatwork / www.elephantatwork.ch\n     */\n\n    function Object3D() {\n\n    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Object3D';\n\n    \tthis.parent = null;\n    \tthis.children = [];\n\n    \tthis.up = Object3D.DefaultUp.clone();\n\n    \tvar position = new Vector3();\n    \tvar rotation = new Euler();\n    \tvar quaternion = new Quaternion();\n    \tvar scale = new Vector3( 1, 1, 1 );\n\n    \tfunction onRotationChange() {\n\n    \t\tquaternion.setFromEuler( rotation, false );\n\n    \t}\n\n    \tfunction onQuaternionChange() {\n\n    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n    \t}\n\n    \trotation.onChange( onRotationChange );\n    \tquaternion.onChange( onQuaternionChange );\n\n    \tObject.defineProperties( this, {\n    \t\tposition: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: position\n    \t\t},\n    \t\trotation: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: rotation\n    \t\t},\n    \t\tquaternion: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: quaternion\n    \t\t},\n    \t\tscale: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: scale\n    \t\t},\n    \t\tmodelViewMatrix: {\n    \t\t\tvalue: new Matrix4()\n    \t\t},\n    \t\tnormalMatrix: {\n    \t\t\tvalue: new Matrix3()\n    \t\t}\n    \t} );\n\n    \tthis.matrix = new Matrix4();\n    \tthis.matrixWorld = new Matrix4();\n\n    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    \tthis.matrixWorldNeedsUpdate = false;\n\n    \tthis.layers = new Layers();\n    \tthis.visible = true;\n\n    \tthis.castShadow = false;\n    \tthis.receiveShadow = false;\n\n    \tthis.frustumCulled = true;\n    \tthis.renderOrder = 0;\n\n    \tthis.userData = {};\n\n    \tthis.onBeforeRender = null;\n\n    }\n\n    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n    Object3D.DefaultMatrixAutoUpdate = true;\n\n    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n    \tisObject3D: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n    \t},\n\n    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// assumes axis is normalized\n\n    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n    \t},\n\n    \tsetRotationFromEuler: function ( euler ) {\n\n    \t\tthis.quaternion.setFromEuler( euler, true );\n\n    \t},\n\n    \tsetRotationFromMatrix: function ( m ) {\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tthis.quaternion.setFromRotationMatrix( m );\n\n    \t},\n\n    \tsetRotationFromQuaternion: function ( q ) {\n\n    \t\t// assumes q is normalized\n\n    \t\tthis.quaternion.copy( q );\n\n    \t},\n\n    \trotateOnAxis: function () {\n\n    \t\t// rotate object on axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar q1 = new Quaternion();\n\n    \t\treturn function rotateOnAxis( axis, angle ) {\n\n    \t\t\tq1.setFromAxisAngle( axis, angle );\n\n    \t\t\tthis.quaternion.multiply( q1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateOnAxis: function () {\n\n    \t\t// translate object by distance along axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function translateOnAxis( axis, distance ) {\n\n    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function translateX( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function translateY( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function translateZ( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \tlocalToWorld: function ( vector ) {\n\n    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\n    \t},\n\n    \tworldToLocal: function () {\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function worldToLocal( vector ) {\n\n    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tm1.lookAt( vector, this.position, this.up );\n\n    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t\t};\n\n    \t}(),\n\n    \tadd: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.add( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( object === this ) {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( (object && object.isObject3D) ) {\n\n    \t\t\tif ( object.parent !== null ) {\n\n    \t\t\t\tobject.parent.remove( object );\n\n    \t\t\t}\n\n    \t\t\tobject.parent = this;\n    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\n    \t\t\tthis.children.push( object );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tremove: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.remove( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar index = this.children.indexOf( object );\n\n    \t\tif ( index !== - 1 ) {\n\n    \t\t\tobject.parent = null;\n\n    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n    \t\t\tthis.children.splice( index, 1 );\n\n    \t\t}\n\n    \t},\n\n    \tgetObjectById: function ( id ) {\n\n    \t\treturn this.getObjectByProperty( 'id', id );\n\n    \t},\n\n    \tgetObjectByName: function ( name ) {\n\n    \t\treturn this.getObjectByProperty( 'name', name );\n\n    \t},\n\n    \tgetObjectByProperty: function ( name, value ) {\n\n    \t\tif ( this[ name ] === value ) return this;\n\n    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n    \t\t\tvar child = this.children[ i ];\n    \t\t\tvar object = child.getObjectByProperty( name, value );\n\n    \t\t\tif ( object !== undefined ) {\n\n    \t\t\t\treturn object;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn undefined;\n\n    \t},\n\n    \tgetWorldPosition: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.updateMatrixWorld( true );\n\n    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n    \t},\n\n    \tgetWorldQuaternion: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar scale = new Vector3();\n\n    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Quaternion();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldRotation: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldRotation( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Euler();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldScale: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldScale( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldDirection: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldDirection( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n    \t\t};\n\n    \t}(),\n\n    \traycast: function () {},\n\n    \ttraverse: function ( callback ) {\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverse( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseVisible: function ( callback ) {\n\n    \t\tif ( this.visible === false ) return;\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverseVisible( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseAncestors: function ( callback ) {\n\n    \t\tvar parent = this.parent;\n\n    \t\tif ( parent !== null ) {\n\n    \t\t\tcallback( parent );\n\n    \t\t\tparent.traverseAncestors( callback );\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrix: function () {\n\n    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n    \t\tthis.matrixWorldNeedsUpdate = true;\n\n    \t},\n\n    \tupdateMatrixWorld: function ( force ) {\n\n    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n    \t\t\tif ( this.parent === null ) {\n\n    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n    \t\t\t}\n\n    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\n    \t\t\tforce = true;\n\n    \t\t}\n\n    \t\t// update children\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\t// meta is '' when called from JSON.stringify\n    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n    \t\tvar output = {};\n\n    \t\t// meta is a hash used to collect geometries, materials.\n    \t\t// not providing it implies that this is the root object\n    \t\t// being serialized.\n    \t\tif ( isRootObject ) {\n\n    \t\t\t// initialize meta obj\n    \t\t\tmeta = {\n    \t\t\t\tgeometries: {},\n    \t\t\t\tmaterials: {},\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t\toutput.metadata = {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Object',\n    \t\t\t\tgenerator: 'Object3D.toJSON'\n    \t\t\t};\n\n    \t\t}\n\n    \t\t// standard Object3D serialization\n\n    \t\tvar object = {};\n\n    \t\tobject.uuid = this.uuid;\n    \t\tobject.type = this.type;\n\n    \t\tif ( this.name !== '' ) object.name = this.name;\n    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n    \t\tif ( this.castShadow === true ) object.castShadow = true;\n    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n    \t\tif ( this.visible === false ) object.visible = false;\n\n    \t\tobject.matrix = this.matrix.toArray();\n\n    \t\t//\n\n    \t\tif ( this.geometry !== undefined ) {\n\n    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.geometry = this.geometry.uuid;\n\n    \t\t}\n\n    \t\tif ( this.material !== undefined ) {\n\n    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.material = this.material.uuid;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( this.children.length > 0 ) {\n\n    \t\t\tobject.children = [];\n\n    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( isRootObject ) {\n\n    \t\t\tvar geometries = extractFromCache( meta.geometries );\n    \t\t\tvar materials = extractFromCache( meta.materials );\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n    \t\t\tif ( images.length > 0 ) output.images = images;\n\n    \t\t}\n\n    \t\toutput.object = object;\n\n    \t\treturn output;\n\n    \t\t// extract data from the cache hash\n    \t\t// remove metadata on each item\n    \t\t// and return as array\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t},\n\n    \tclone: function ( recursive ) {\n\n    \t\treturn new this.constructor().copy( this, recursive );\n\n    \t},\n\n    \tcopy: function ( source, recursive ) {\n\n    \t\tif ( recursive === undefined ) recursive = true;\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.up.copy( source.up );\n\n    \t\tthis.position.copy( source.position );\n    \t\tthis.quaternion.copy( source.quaternion );\n    \t\tthis.scale.copy( source.scale );\n\n    \t\tthis.matrix.copy( source.matrix );\n    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\n    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n    \t\tthis.visible = source.visible;\n\n    \t\tthis.castShadow = source.castShadow;\n    \t\tthis.receiveShadow = source.receiveShadow;\n\n    \t\tthis.frustumCulled = source.frustumCulled;\n    \t\tthis.renderOrder = source.renderOrder;\n\n    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n    \t\tif ( recursive === true ) {\n\n    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n    \t\t\t\tvar child = source.children[ i ];\n    \t\t\t\tthis.add( child.clone() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    var count$2 = 0;\n    function Object3DIdCount() { return count$2++; };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Line3( start, end ) {\n\n    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n    }\n\n    Line3.prototype = {\n\n    \tconstructor: Line3,\n\n    \tset: function ( start, end ) {\n\n    \t\tthis.start.copy( start );\n    \t\tthis.end.copy( end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( line ) {\n\n    \t\tthis.start.copy( line.start );\n    \t\tthis.end.copy( line.end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tdelta: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.subVectors( this.end, this.start );\n\n    \t},\n\n    \tdistanceSq: function () {\n\n    \t\treturn this.start.distanceToSquared( this.end );\n\n    \t},\n\n    \tdistance: function () {\n\n    \t\treturn this.start.distanceTo( this.end );\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tclosestPointToPointParameter: function () {\n\n    \t\tvar startP = new Vector3();\n    \t\tvar startEnd = new Vector3();\n\n    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n    \t\t\tstartP.subVectors( point, this.start );\n    \t\t\tstartEnd.subVectors( this.end, this.start );\n\n    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n    \t\t\tvar t = startEnd_startP / startEnd2;\n\n    \t\t\tif ( clampToLine ) {\n\n    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\n    \t\t\t}\n\n    \t\t\treturn t;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.start.applyMatrix4( matrix );\n    \t\tthis.end.applyMatrix4( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( line ) {\n\n    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Triangle( a, b, c ) {\n\n    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n    }\n\n    Triangle.normal = function () {\n\n    \tvar v0 = new Vector3();\n\n    \treturn function normal( a, b, c, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.subVectors( c, b );\n    \t\tv0.subVectors( a, b );\n    \t\tresult.cross( v0 );\n\n    \t\tvar resultLengthSq = result.lengthSq();\n    \t\tif ( resultLengthSq > 0 ) {\n\n    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n    \t\t}\n\n    \t\treturn result.set( 0, 0, 0 );\n\n    \t};\n\n    }();\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    Triangle.barycoordFromPoint = function () {\n\n    \tvar v0 = new Vector3();\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n\n    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n    \t\tv0.subVectors( c, a );\n    \t\tv1.subVectors( b, a );\n    \t\tv2.subVectors( point, a );\n\n    \t\tvar dot00 = v0.dot( v0 );\n    \t\tvar dot01 = v0.dot( v1 );\n    \t\tvar dot02 = v0.dot( v2 );\n    \t\tvar dot11 = v1.dot( v1 );\n    \t\tvar dot12 = v1.dot( v2 );\n\n    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\t// collinear or singular triangle\n    \t\tif ( denom === 0 ) {\n\n    \t\t\t// arbitrary location outside of triangle?\n    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n    \t\t\treturn result.set( - 2, - 1, - 1 );\n\n    \t\t}\n\n    \t\tvar invDenom = 1 / denom;\n    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n    \t\t// barycentric coordinates must always sum to 1\n    \t\treturn result.set( 1 - u - v, v, u );\n\n    \t};\n\n    }();\n\n    Triangle.containsPoint = function () {\n\n    \tvar v1 = new Vector3();\n\n    \treturn function containsPoint( point, a, b, c ) {\n\n    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    \t};\n\n    }();\n\n    Triangle.prototype = {\n\n    \tconstructor: Triangle,\n\n    \tset: function ( a, b, c ) {\n\n    \t\tthis.a.copy( a );\n    \t\tthis.b.copy( b );\n    \t\tthis.c.copy( c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n    \t\tthis.a.copy( points[ i0 ] );\n    \t\tthis.b.copy( points[ i1 ] );\n    \t\tthis.c.copy( points[ i2 ] );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( triangle ) {\n\n    \t\tthis.a.copy( triangle.a );\n    \t\tthis.b.copy( triangle.b );\n    \t\tthis.c.copy( triangle.c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tarea: function () {\n\n    \t\tvar v0 = new Vector3();\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function area() {\n\n    \t\t\tv0.subVectors( this.c, this.b );\n    \t\t\tv1.subVectors( this.a, this.b );\n\n    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n    \t\t};\n\n    \t}(),\n\n    \tmidpoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    \t},\n\n    \tnormal: function ( optionalTarget ) {\n\n    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tplane: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Plane();\n\n    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    \t},\n\n    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    \t},\n\n    \tclosestPointToPoint: function () {\n\n    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n    \t\t\tif ( plane === undefined ) {\n\n    \t\t\t\tplane = new Plane();\n    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n    \t\t\t\tprojectedPoint = new Vector3();\n    \t\t\t\tclosestPoint = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n    \t\t\tvar minDistance = Infinity;\n\n    \t\t\t// project the point onto the plane of the triangle\n\n    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n    \t\t\tplane.projectPoint( point, projectedPoint );\n\n    \t\t\t// check if the projection lies within the triangle\n\n    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n    \t\t\t\t// if so, this is the closest point\n\n    \t\t\t\tresult.copy( projectedPoint );\n\n    \t\t\t} else {\n\n    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n    \t\t\t\t\tif( distance < minDistance ) {\n\n    \t\t\t\t\t\tminDistance = distance;\n\n    \t\t\t\t\t\tresult.copy( closestPoint );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( triangle ) {\n\n    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Face3( a, b, c, normal, color, materialIndex ) {\n\n    \tthis.a = a;\n    \tthis.b = b;\n    \tthis.c = c;\n\n    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n    \tthis.color = (color && color.isColor) ? color : new Color();\n    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    }\n\n    Face3.prototype = {\n\n    \tconstructor: Face3,\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.a = source.a;\n    \t\tthis.b = source.b;\n    \t\tthis.c = source.c;\n\n    \t\tthis.normal.copy( source.normal );\n    \t\tthis.color.copy( source.color );\n\n    \t\tthis.materialIndex = source.materialIndex;\n\n    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  shading: THREE.SmoothShading,\n     *  depthTest: <bool>,\n     *  depthWrite: <bool>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>\n     * }\n     */\n\n    function MeshBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // emissive\n\n    \tthis.map = null;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n    MeshBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferAttribute( array, itemSize, normalized ) {\n\n    \tif ( Array.isArray( array ) ) {\n\n    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n    \t}\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.itemSize = itemSize;\n    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n    \tthis.normalized = normalized === true;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    BufferAttribute.prototype = {\n\n    \tconstructor: BufferAttribute,\n\n    \tisBufferAttribute: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.itemSize = source.itemSize;\n    \t\tthis.count = source.count;\n    \t\tthis.normalized = source.normalized;\n\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.itemSize;\n    \t\tindex2 *= attribute.itemSize;\n\n    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyArray: function ( array ) {\n\n    \t\tthis.array.set( array );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyColorsArray: function ( colors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n    \t\t\tvar color = colors[ i ];\n\n    \t\t\tif ( color === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n    \t\t\t\tcolor = new Color();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = color.r;\n    \t\t\tarray[ offset ++ ] = color.g;\n    \t\t\tarray[ offset ++ ] = color.b;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyIndicesArray: function ( indices ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\tvar index = indices[ i ];\n\n    \t\t\tarray[ offset ++ ] = index.a;\n    \t\t\tarray[ offset ++ ] = index.b;\n    \t\t\tarray[ offset ++ ] = index.c;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector2sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector3sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector4sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n    \t\t\tarray[ offset ++ ] = vector.w;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize ];\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.array[ index * this.itemSize ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 1 ];\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 2 ];\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 3 ];\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n    \t\tthis.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    //\n\n    function Int8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n    }\n\n    function Uint8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n    }\n\n    function Uint8ClampedAttribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n    }\n\n    function Int16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n    }\n\n    function Uint16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n    }\n\n    function Int32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n    }\n\n    function Uint32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n    }\n\n    function Float32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n    }\n\n    function Float64Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n    }\n\n    // Deprecated\n\n    function DynamicBufferAttribute( array, itemSize ) {\n\n    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author kile / http://kile.stravaganza.org/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author bhouston / http://clara.io\n     */\n\n    function Geometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Geometry';\n\n    \tthis.vertices = [];\n    \tthis.colors = [];\n    \tthis.faces = [];\n    \tthis.faceVertexUvs = [ [] ];\n\n    \tthis.morphTargets = [];\n    \tthis.morphNormals = [];\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \tthis.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.elementsNeedUpdate = false;\n    \tthis.verticesNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.lineDistancesNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n    \tisGeometry: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertex.applyMatrix4( matrix );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\tthis.verticesNeedUpdate = true;\n    \t\tthis.normalsNeedUpdate = true;\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tfromBufferGeometry: function ( geometry ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tvar positions = attributes.position.array;\n    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n    \t\tvar tempNormals = [];\n    \t\tvar tempUVs = [];\n    \t\tvar tempUVs2 = [];\n\n    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n    \t\t\tif ( normals !== undefined ) {\n\n    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( colors !== undefined ) {\n\n    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction addFace( a, b, c, materialIndex ) {\n\n    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n    \t\t\tscope.faces.push( face );\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( indices !== undefined ) {\n\n    \t\t\tvar groups = geometry.groups;\n\n    \t\t\tif ( groups.length > 0 ) {\n\n    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n    \t\t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n    \t\t\t\taddFace( i, i + 1, i + 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeFaceNormals();\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tthis.computeBoundingSphere();\n\n    \t\tvar center = this.boundingSphere.center;\n    \t\tvar radius = this.boundingSphere.radius;\n\n    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n    \t\tvar matrix = new Matrix4();\n    \t\tmatrix.set(\n    \t\t\ts, 0, 0, - s * center.x,\n    \t\t\t0, s, 0, - s * center.y,\n    \t\t\t0, 0, s, - s * center.z,\n    \t\t\t0, 0, 0, 1\n    \t\t);\n\n    \t\tthis.applyMatrix( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tvar face = this.faces[ f ];\n\n    \t\t\tvar vA = this.vertices[ face.a ];\n    \t\t\tvar vB = this.vertices[ face.b ];\n    \t\t\tvar vC = this.vertices[ face.c ];\n\n    \t\t\tcb.subVectors( vC, vB );\n    \t\t\tab.subVectors( vA, vB );\n    \t\t\tcb.cross( ab );\n\n    \t\t\tcb.normalize();\n\n    \t\t\tface.normal.copy( cb );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeVertexNormals: function ( areaWeighted ) {\n\n    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n    \t\tvar v, vl, f, fl, face, vertices;\n\n    \t\tvertices = new Array( this.vertices.length );\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ] = new Vector3();\n\n    \t\t}\n\n    \t\tif ( areaWeighted ) {\n\n    \t\t\t// vertex normals weighted by triangle areas\n    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n    \t\t\tvar vA, vB, vC;\n    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvA = this.vertices[ face.a ];\n    \t\t\t\tvB = this.vertices[ face.b ];\n    \t\t\t\tvC = this.vertices[ face.c ];\n\n    \t\t\t\tcb.subVectors( vC, vB );\n    \t\t\t\tab.subVectors( vA, vB );\n    \t\t\t\tcb.cross( ab );\n\n    \t\t\t\tvertices[ face.a ].add( cb );\n    \t\t\t\tvertices[ face.b ].add( cb );\n    \t\t\t\tvertices[ face.c ].add( cb );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvertices[ face.a ].add( face.normal );\n    \t\t\t\tvertices[ face.b ].add( face.normal );\n    \t\t\t\tvertices[ face.c ].add( face.normal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ].normalize();\n\n    \t\t}\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.faces.length > 0 ) {\n\n    \t\t\tthis.normalsNeedUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeMorphNormals: function () {\n\n    \t\tvar i, il, f, fl, face;\n\n    \t\t// save original normals\n    \t\t// - create temp variables on first access\n    \t\t//   otherwise just copy (for faster repeated calls)\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tif ( ! face.__originalFaceNormal ) {\n\n    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n    \t\t\t} else {\n\n    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n    \t\t\t}\n\n    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// use temp geometry to compute face and vertex normals for each morph\n\n    \t\tvar tmpGeo = new Geometry();\n    \t\ttmpGeo.faces = this.faces;\n\n    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n    \t\t\t// create on first access\n\n    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\n    \t\t\t\tthis.morphNormals[ i ] = {};\n    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n    \t\t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tfaceNormal = new Vector3();\n    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\n    \t\t\t// set vertices to morph target\n\n    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n    \t\t\t// compute morph normals\n\n    \t\t\ttmpGeo.computeFaceNormals();\n    \t\t\ttmpGeo.computeVertexNormals();\n\n    \t\t\t// store morph normals\n\n    \t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n    \t\t\t\tfaceNormal.copy( face.normal );\n\n    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore original normals\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tface.normal = face.__originalFaceNormal;\n    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeTangents: function () {\n\n    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n    \t},\n\n    \tcomputeLineDistances: function () {\n\n    \t\tvar d = 0;\n    \t\tvar vertices = this.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tif ( i > 0 ) {\n\n    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n    \t\t\t}\n\n    \t\t\tthis.lineDistances[ i ] = d;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tif ( this.boundingSphere === null ) {\n\n    \t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t}\n\n    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n    \t},\n\n    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar normalMatrix,\n    \t\tvertexOffset = this.vertices.length,\n    \t\tvertices1 = this.vertices,\n    \t\tvertices2 = geometry.vertices,\n    \t\tfaces1 = this.faces,\n    \t\tfaces2 = geometry.faces,\n    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n    \t\tcolors1 = this.colors,\n    \t\tcolors2 = geometry.colors;\n\n    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n    \t\tif ( matrix !== undefined ) {\n\n    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t}\n\n    \t\t// vertices\n\n    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = vertices2[ i ];\n\n    \t\t\tvar vertexCopy = vertex.clone();\n\n    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n    \t\t\tvertices1.push( vertexCopy );\n\n    \t\t}\n\n    \t\t// colors\n\n    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n    \t\t\tcolors1.push( colors2[ i ].clone() );\n\n    \t\t}\n\n    \t\t// faces\n\n    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n    \t\t\tfaceVertexNormals = face.vertexNormals,\n    \t\t\tfaceVertexColors = face.vertexColors;\n\n    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n    \t\t\tfaceCopy.normal.copy( face.normal );\n\n    \t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n    \t\t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t\t}\n\n    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.color.copy( face.color );\n\n    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n    \t\t\t\tcolor = faceVertexColors[ j ];\n    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n    \t\t\tfaces1.push( faceCopy );\n\n    \t\t}\n\n    \t\t// uvs\n\n    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n    \t\t\tif ( uv === undefined ) {\n\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n    \t\t\t}\n\n    \t\t\tuvs1.push( uvCopy );\n\n    \t\t}\n\n    \t},\n\n    \tmergeMesh: function ( mesh ) {\n\n    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\n    \t},\n\n    \t/*\n    \t * Checks for duplicate vertices with hashmap.\n    \t * Duplicated vertices are removed\n    \t * and faces' vertices are updated.\n    \t */\n\n    \tmergeVertices: function () {\n\n    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    \t\tvar unique = [], changes = [];\n\n    \t\tvar v, key;\n    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    \t\tvar precision = Math.pow( 10, precisionPoints );\n    \t\tvar i, il, face;\n    \t\tvar indices, j, jl;\n\n    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tv = this.vertices[ i ];\n    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\n    \t\t\t\tverticesMap[ key ] = i;\n    \t\t\t\tunique.push( this.vertices[ i ] );\n    \t\t\t\tchanges[ i ] = unique.length - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\t// if faces are completely degenerate after merging vertices, we\n    \t\t// have to remove them from the geometry.\n    \t\tvar faceIndicesToRemove = [];\n\n    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tface = this.faces[ i ];\n\n    \t\t\tface.a = changes[ face.a ];\n    \t\t\tface.b = changes[ face.b ];\n    \t\t\tface.c = changes[ face.c ];\n\n    \t\t\tindices = [ face.a, face.b, face.c ];\n\n    \t\t\tvar dupIndex = - 1;\n\n    \t\t\t// if any duplicate vertices are found in a Face3\n    \t\t\t// we have to remove the face as nothing can be saved\n    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n    \t\t\t\t\tdupIndex = n;\n    \t\t\t\t\tfaceIndicesToRemove.push( i );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\n    \t\t\tthis.faces.splice( idx, 1 );\n\n    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Use unique set of vertices\n\n    \t\tvar diff = this.vertices.length - unique.length;\n    \t\tthis.vertices = unique;\n    \t\treturn diff;\n\n    \t},\n\n    \tsortFacesByMaterialIndex: function () {\n\n    \t\tvar faces = this.faces;\n    \t\tvar length = faces.length;\n\n    \t\t// tag faces\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tfaces[ i ]._id = i;\n\n    \t\t}\n\n    \t\t// sort faces\n\n    \t\tfunction materialIndexSort( a, b ) {\n\n    \t\t\treturn a.materialIndex - b.materialIndex;\n\n    \t\t}\n\n    \t\tfaces.sort( materialIndexSort );\n\n    \t\t// sort uvs\n\n    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n    \t\tvar newUvs1, newUvs2;\n\n    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tvar id = faces[ i ]._id;\n\n    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n    \t\t}\n\n    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Geometry',\n    \t\t\t\tgenerator: 'Geometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Geometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tvar vertices = [];\n\n    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n    \t\t}\n\n    \t\tvar faces = [];\n    \t\tvar normals = [];\n    \t\tvar normalsHash = {};\n    \t\tvar colors = [];\n    \t\tvar colorsHash = {};\n    \t\tvar uvs = [];\n    \t\tvar uvsHash = {};\n\n    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n\n    \t\t\tvar hasMaterial = true;\n    \t\t\tvar hasFaceUv = false; // deprecated\n    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n    \t\t\tvar faceType = 0;\n\n    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n    \t\t\tfaces.push( faceType );\n    \t\t\tfaces.push( face.a, face.b, face.c );\n    \t\t\tfaces.push( face.materialIndex );\n\n    \t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction setBit( value, position, enabled ) {\n\n    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n    \t\t}\n\n    \t\tfunction getNormalIndex( normal ) {\n\n    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn normalsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n    \t\t\treturn normalsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getColorIndex( color ) {\n\n    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn colorsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tcolorsHash[ hash ] = colors.length;\n    \t\t\tcolors.push( color.getHex() );\n\n    \t\t\treturn colorsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getUvIndex( uv ) {\n\n    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn uvsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n    \t\t\tuvs.push( uv.x, uv.y );\n\n    \t\t\treturn uvsHash[ hash ];\n\n    \t\t}\n\n    \t\tdata.data = {};\n\n    \t\tdata.data.vertices = vertices;\n    \t\tdata.data.normals = normals;\n    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n    \t\tdata.data.faces = faces;\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new Geometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.vertices = [];\n    \t\tthis.faces = [];\n    \t\tthis.faceVertexUvs = [ [] ];\n    \t\tthis.colors = [];\n\n    \t\tvar vertices = source.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar colors = source.colors;\n\n    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n    \t\t\tthis.colors.push( colors[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar faces = source.faces;\n\n    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n    \t\t\tthis.faces.push( faces[ i ].clone() );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n    \t\t\t\t\tvar uv = uvs[ k ];\n\n    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    var count$3 = 0;\n    function GeometryIdCount() { return count$3++; };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'DirectGeometry';\n\n    \tthis.indices = [];\n    \tthis.vertices = [];\n    \tthis.normals = [];\n    \tthis.colors = [];\n    \tthis.uvs = [];\n    \tthis.uvs2 = [];\n\n    \tthis.groups = [];\n\n    \tthis.morphTargets = {};\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \t// this.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.verticesNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeGroups: function ( geometry ) {\n\n    \t\tvar group;\n    \t\tvar groups = [];\n    \t\tvar materialIndex;\n\n    \t\tvar faces = geometry.faces;\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\t// materials\n\n    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\n    \t\t\t\tmaterialIndex = face.materialIndex;\n\n    \t\t\t\tif ( group !== undefined ) {\n\n    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\t\t\tgroups.push( group );\n\n    \t\t\t\t}\n\n    \t\t\t\tgroup = {\n    \t\t\t\t\tstart: i * 3,\n    \t\t\t\t\tmaterialIndex: materialIndex\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( group !== undefined ) {\n\n    \t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\tgroups.push( group );\n\n    \t\t}\n\n    \t\tthis.groups = groups;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tvar faces = geometry.faces;\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n    \t\t// morphs\n\n    \t\tvar morphTargets = geometry.morphTargets;\n    \t\tvar morphTargetsLength = morphTargets.length;\n\n    \t\tvar morphTargetsPosition;\n\n    \t\tif ( morphTargetsLength > 0 ) {\n\n    \t\t\tmorphTargetsPosition = [];\n\n    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n    \t\t}\n\n    \t\tvar morphNormals = geometry.morphNormals;\n    \t\tvar morphNormalsLength = morphNormals.length;\n\n    \t\tvar morphTargetsNormal;\n\n    \t\tif ( morphNormalsLength > 0 ) {\n\n    \t\t\tmorphTargetsNormal = [];\n\n    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n    \t\t}\n\n    \t\t// skins\n\n    \t\tvar skinIndices = geometry.skinIndices;\n    \t\tvar skinWeights = geometry.skinWeights;\n\n    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n    \t\t//\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar normal = face.normal;\n\n    \t\t\t\tthis.normals.push( normal, normal, normal );\n\n    \t\t\t}\n\n    \t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\tif ( vertexColors.length === 3 ) {\n\n    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar color = face.color;\n\n    \t\t\t\tthis.colors.push( color, color, color );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t// morphs\n\n    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n    \t\t\t}\n\n    \t\t\t// skins\n\n    \t\t\tif ( hasSkinIndices ) {\n\n    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tif ( hasSkinWeights ) {\n\n    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeGroups( geometry );\n\n    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'BufferGeometry';\n\n    \tthis.index = null;\n    \tthis.attributes = {};\n\n    \tthis.morphAttributes = {};\n\n    \tthis.groups = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \tthis.drawRange = { start: 0, count: Infinity };\n\n    }\n\n    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n    \tisBufferGeometry: true,\n\n    \tgetIndex: function () {\n\n    \t\treturn this.index;\n\n    \t},\n\n    \tsetIndex: function ( index ) {\n\n    \t\tthis.index = index;\n\n    \t},\n\n    \taddAttribute: function ( name, attribute ) {\n\n    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( name === 'index' ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n    \t\t\tthis.setIndex( attribute );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.attributes[ name ] = attribute;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetAttribute: function ( name ) {\n\n    \t\treturn this.attributes[ name ];\n\n    \t},\n\n    \tremoveAttribute: function ( name ) {\n\n    \t\tdelete this.attributes[ name ];\n\n    \t\treturn this;\n\n    \t},\n\n    \taddGroup: function ( start, count, materialIndex ) {\n\n    \t\tthis.groups.push( {\n\n    \t\t\tstart: start,\n    \t\t\tcount: count,\n    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n    \t\t} );\n\n    \t},\n\n    \tclearGroups: function () {\n\n    \t\tthis.groups = [];\n\n    \t},\n\n    \tsetDrawRange: function ( start, count ) {\n\n    \t\tthis.drawRange.start = start;\n    \t\tthis.drawRange.count = count;\n\n    \t},\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar position = this.attributes.position;\n\n    \t\tif ( position !== undefined ) {\n\n    \t\t\tmatrix.applyToVector3Array( position.array );\n    \t\t\tposition.needsUpdate = true;\n\n    \t\t}\n\n    \t\tvar normal = this.attributes.normal;\n\n    \t\tif ( normal !== undefined ) {\n\n    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n    \t\t\tnormal.needsUpdate = true;\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tsetFromObject: function ( object ) {\n\n    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t\t}\n\n    \t\t} else if ( (object && object.isMesh) ) {\n\n    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tthis.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateFromObject: function ( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isMesh) ) {\n\n    \t\t\tvar direct = geometry.__directGeometry;\n\n    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n    \t\t\t\tdirect = undefined;\n    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\n    \t\t\t}\n\n    \t\t\tif ( direct === undefined ) {\n\n    \t\t\t\treturn this.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n    \t\t\tgeometry.normalsNeedUpdate = false;\n    \t\t\tgeometry.colorsNeedUpdate = false;\n    \t\t\tgeometry.uvsNeedUpdate = false;\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t\tgeometry = direct;\n\n    \t\t}\n\n    \t\tvar attribute;\n\n    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.position;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.normal;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.normalsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.color;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.colorsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.uvsNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.uv;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.uvsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.lineDistance;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.groupsNeedUpdate ) {\n\n    \t\t\tgeometry.computeGroups( object.geometry );\n    \t\t\tthis.groups = geometry.groups;\n\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n    \t},\n\n    \tfromDirectGeometry: function ( geometry ) {\n\n    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n    \t\tif ( geometry.normals.length > 0 ) {\n\n    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n    \t\t}\n\n    \t\tif ( geometry.colors.length > 0 ) {\n\n    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs.length > 0 ) {\n\n    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs2.length > 0 ) {\n\n    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n    \t\t}\n\n    \t\tif ( geometry.indices.length > 0 ) {\n\n    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n    \t\t}\n\n    \t\t// groups\n\n    \t\tthis.groups = geometry.groups;\n\n    \t\t// morphs\n\n    \t\tfor ( var name in geometry.morphTargets ) {\n\n    \t\t\tvar array = [];\n    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\n    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n    \t\t\t}\n\n    \t\t\tthis.morphAttributes[ name ] = array;\n\n    \t\t}\n\n    \t\t// skinning\n\n    \t\tif ( geometry.skinIndices.length > 0 ) {\n\n    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n    \t\t}\n\n    \t\tif ( geometry.skinWeights.length > 0 ) {\n\n    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tvar positions = this.attributes.position.array;\n\n    \t\tif ( positions !== undefined ) {\n\n    \t\t\tthis.boundingBox.setFromArray( positions );\n\n    \t\t} else {\n\n    \t\t\tthis.boundingBox.makeEmpty();\n\n    \t\t}\n\n    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tvar box = new Box3();\n    \t\tvar vector = new Vector3();\n\n    \t\treturn function computeBoundingSphere() {\n\n    \t\t\tif ( this.boundingSphere === null ) {\n\n    \t\t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t\t}\n\n    \t\t\tvar positions = this.attributes.position;\n\n    \t\t\tif ( positions ) {\n\n    \t\t\t\tvar array = positions.array;\n    \t\t\t\tvar center = this.boundingSphere.center;\n\n    \t\t\t\tbox.setFromArray( array );\n    \t\t\t\tbox.getCenter( center );\n\n    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n    \t\t\t\tvar maxRadiusSq = 0;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n    \t\t\t\t\tvector.fromArray( array, i );\n    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \tcomputeFaceNormals: function () {\n\n    \t\t// backwards compatibility\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tvar index = this.index;\n    \t\tvar attributes = this.attributes;\n    \t\tvar groups = this.groups;\n\n    \t\tif ( attributes.position ) {\n\n    \t\t\tvar positions = attributes.position.array;\n\n    \t\t\tif ( attributes.normal === undefined ) {\n\n    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n    \t\t\t} else {\n\n    \t\t\t\t// reset existing normals to zero\n\n    \t\t\t\tvar array = attributes.normal.array;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n    \t\t\t\t\tarray[ i ] = 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar normals = attributes.normal.array;\n\n    \t\t\tvar vA, vB, vC,\n\n    \t\t\tpA = new Vector3(),\n    \t\t\tpB = new Vector3(),\n    \t\t\tpC = new Vector3(),\n\n    \t\t\tcb = new Vector3(),\n    \t\t\tab = new Vector3();\n\n    \t\t\t// indexed elements\n\n    \t\t\tif ( index ) {\n\n    \t\t\t\tvar indices = index.array;\n\n    \t\t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n    \t\t\t\t\tvar group = groups[ j ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n    \t\t\t\t\t\tpA.fromArray( positions, vA );\n    \t\t\t\t\t\tpB.fromArray( positions, vB );\n    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\n    \t\t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n    \t\t\t\t\tpA.fromArray( positions, i );\n    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n    \t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\tnormals[ i ] = cb.x;\n    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.normalizeNormals();\n\n    \t\t\tattributes.normal.needsUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tmerge: function ( geometry, offset ) {\n\n    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n    \t\t\tvar attribute1 = attributes[ key ];\n    \t\t\tvar attributeArray1 = attribute1.array;\n\n    \t\t\tvar attribute2 = geometry.attributes[ key ];\n    \t\t\tvar attributeArray2 = attribute2.array;\n\n    \t\t\tvar attributeSize = attribute2.itemSize;\n\n    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalizeNormals: function () {\n\n    \t\tvar normals = this.attributes.normal.array;\n\n    \t\tvar x, y, z, n;\n\n    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n    \t\t\tx = normals[ i ];\n    \t\t\ty = normals[ i + 1 ];\n    \t\t\tz = normals[ i + 2 ];\n\n    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n    \t\t\tnormals[ i ] *= n;\n    \t\t\tnormals[ i + 1 ] *= n;\n    \t\t\tnormals[ i + 2 ] *= n;\n\n    \t\t}\n\n    \t},\n\n    \ttoNonIndexed: function () {\n\n    \t\tif ( this.index === null ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar geometry2 = new BufferGeometry();\n\n    \t\tvar indices = this.index.array;\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n\n    \t\t\tvar array = attribute.array;\n    \t\t\tvar itemSize = attribute.itemSize;\n\n    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n    \t\t\tvar index = 0, index2 = 0;\n\n    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\t\tindex = indices[ i ] * itemSize;\n\n    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n    \t\t}\n\n    \t\treturn geometry2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'BufferGeometry',\n    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard BufferGeometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tdata.data = { attributes: {} };\n\n    \t\tvar index = this.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\n    \t\t\tdata.data.index = {\n    \t\t\t\ttype: index.array.constructor.name,\n    \t\t\t\tarray: array\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n\n    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n    \t\t\tdata.data.attributes[ key ] = {\n    \t\t\t\titemSize: attribute.itemSize,\n    \t\t\t\ttype: attribute.array.constructor.name,\n    \t\t\t\tarray: array,\n    \t\t\t\tnormalized: attribute.normalized\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar groups = this.groups;\n\n    \t\tif ( groups.length > 0 ) {\n\n    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n    \t\t}\n\n    \t\tvar boundingSphere = this.boundingSphere;\n\n    \t\tif ( boundingSphere !== null ) {\n\n    \t\t\tdata.data.boundingSphere = {\n    \t\t\t\tcenter: boundingSphere.center.toArray(),\n    \t\t\t\tradius: boundingSphere.radius\n    \t\t\t};\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new BufferGeometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tvar index = source.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tthis.setIndex( index.clone() );\n\n    \t\t}\n\n    \t\tvar attributes = source.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n    \t\t\tthis.addAttribute( name, attribute.clone() );\n\n    \t\t}\n\n    \t\tvar groups = source.groups;\n\n    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\tvar group = groups[ i ];\n    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    BufferGeometry.MaxIndex = 65535;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author jonobr1 / http://jonobr1.com/\n     */\n\n    function Mesh( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Mesh';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    \tthis.drawMode = TrianglesDrawMode;\n\n    \tthis.updateMorphTargets();\n\n    }\n\n    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Mesh,\n\n    \tisMesh: true,\n\n    \tsetDrawMode: function ( value ) {\n\n    \t\tthis.drawMode = value;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.drawMode = source.drawMode;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateMorphTargets: function () {\n\n    \t\tvar morphTargets = this.geometry.morphTargets;\n\n    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n    \t\t\tthis.morphTargetInfluences = [];\n    \t\t\tthis.morphTargetDictionary = {};\n\n    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\tvar vA = new Vector3();\n    \t\tvar vB = new Vector3();\n    \t\tvar vC = new Vector3();\n\n    \t\tvar tempA = new Vector3();\n    \t\tvar tempB = new Vector3();\n    \t\tvar tempC = new Vector3();\n\n    \t\tvar uvA = new Vector2();\n    \t\tvar uvB = new Vector2();\n    \t\tvar uvC = new Vector2();\n\n    \t\tvar barycoord = new Vector3();\n\n    \t\tvar intersectionPoint = new Vector3();\n    \t\tvar intersectionPointWorld = new Vector3();\n\n    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n    \t\t\tuv1.multiplyScalar( barycoord.x );\n    \t\t\tuv2.multiplyScalar( barycoord.y );\n    \t\t\tuv3.multiplyScalar( barycoord.z );\n\n    \t\t\tuv1.add( uv2 ).add( uv3 );\n\n    \t\t\treturn uv1.clone();\n\n    \t\t}\n\n    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n    \t\t\tvar intersect;\n    \t\t\tvar material = object.material;\n\n    \t\t\tif ( material.side === BackSide ) {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n    \t\t\t} else {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n    \t\t\t}\n\n    \t\t\tif ( intersect === null ) return null;\n\n    \t\t\tintersectionPointWorld.copy( point );\n    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n    \t\t\treturn {\n    \t\t\t\tdistance: distance,\n    \t\t\t\tpoint: intersectionPointWorld.clone(),\n    \t\t\t\tobject: object\n    \t\t\t};\n\n    \t\t}\n\n    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n    \t\t\tvA.fromArray( positions, a * 3 );\n    \t\t\tvB.fromArray( positions, b * 3 );\n    \t\t\tvC.fromArray( positions, c * 3 );\n\n    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n    \t\t\tif ( intersection ) {\n\n    \t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n    \t\t\t\t}\n\n    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n    \t\t\t\tintersection.faceIndex = a;\n\n    \t\t\t}\n\n    \t\t\treturn intersection;\n\n    \t\t}\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar material = this.material;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\tif ( material === undefined ) return;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\t// Check boundingBox before continuing\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n    \t\t\t}\n\n    \t\t\tvar uvs, intersection;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar a, b, c;\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( attributes.uv !== undefined ) {\n\n    \t\t\t\t\tuvs = attributes.uv.array;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n    \t\t\t\t\t\ta = indices[ i ];\n    \t\t\t\t\t\tb = indices[ i + 1 ];\n    \t\t\t\t\t\tc = indices[ i + 2 ];\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n    \t\t\t\t\t\ta = i / 3;\n    \t\t\t\t\t\tb = a + 1;\n    \t\t\t\t\t\tc = a + 2;\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar fvA, fvB, fvC;\n    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tvar face = faces[ f ];\n    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n    \t\t\t\t\tfvA = vertices[ face.a ];\n    \t\t\t\t\tfvB = vertices[ face.b ];\n    \t\t\t\t\tfvC = vertices[ face.c ];\n\n    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvA.add( fvA );\n    \t\t\t\t\t\tvB.add( fvB );\n    \t\t\t\t\t\tvC.add( fvC );\n\n    \t\t\t\t\t\tfvA = vA;\n    \t\t\t\t\t\tfvB = vB;\n    \t\t\t\t\t\tfvC = vC;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n    \t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tintersection.face = face;\n    \t\t\t\t\t\tintersection.faceIndex = f;\n    \t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'BoxBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tvar scope = this;\n\n    \t// segments\n    \twidthSegments = Math.floor( widthSegments ) || 1;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n    \tvar numberOfVertices = 0;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// build each side of the box geometry\n    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount( w, h, d ) {\n\n    \t\tvar vertices = 0;\n\n    \t\t// calculate the amount of vertices for each side (plane)\n    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n    \t\treturn vertices;\n\n    \t}\n\n    \tfunction calculateIndexCount( w, h, d ) {\n\n    \t\tvar index = 0;\n\n    \t\t// calculate the amount of squares for each side\n    \t\tindex += w * h * 2; // xy\n    \t\tindex += w * d * 2; // xz\n    \t\tindex += d * h * 2; // zy\n\n    \t\treturn index * 6; // two triangles per square => six vertices per square\n\n    \t}\n\n    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n    \t\tvar segmentWidth\t= width / gridX;\n    \t\tvar segmentHeight = height / gridY;\n\n    \t\tvar widthHalf = width / 2;\n    \t\tvar heightHalf = height / 2;\n    \t\tvar depthHalf = depth / 2;\n\n    \t\tvar gridX1 = gridX + 1;\n    \t\tvar gridY1 = gridY + 1;\n\n    \t\tvar vertexCounter = 0;\n    \t\tvar groupCount = 0;\n\n    \t\tvar vector = new Vector3();\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\n    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = x * udir;\n    \t\t\t\tvector[ v ] = y * vdir;\n    \t\t\t\tvector[ w ] = depthHalf;\n\n    \t\t\t\t// now apply vector to vertex buffer\n    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = 0;\n    \t\t\t\tvector[ v ] = 0;\n    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n    \t\t\t\t// now apply vector to normal buffer\n    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// uvs\n    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tvertexBufferOffset += 3;\n    \t\t\t\tuvBufferOffset += 2;\n    \t\t\t\tvertexCounter += 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// 1. you need three indices to draw a single face\n    \t\t// 2. a single segment consists of two faces\n    \t\t// 3. so we need to generate six (2*3) indices per segment\n\n    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\t\t// indices\n    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\t\t// face one\n    \t\t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tindexBufferOffset += 6;\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t\t// update total number of vertices\n    \t\tnumberOfVertices += vertexCounter;\n\n    \t}\n\n    }\n\n    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'PlaneBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tvar width_half = width / 2;\n    \tvar height_half = height / 2;\n\n    \tvar gridX = Math.floor( widthSegments ) || 1;\n    \tvar gridY = Math.floor( heightSegments ) || 1;\n\n    \tvar gridX1 = gridX + 1;\n    \tvar gridY1 = gridY + 1;\n\n    \tvar segment_width = width / gridX;\n    \tvar segment_height = height / gridY;\n\n    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n    \tvar offset = 0;\n    \tvar offset2 = 0;\n\n    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\tvar y = iy * segment_height - height_half;\n\n    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\tvar x = ix * segment_width - width_half;\n\n    \t\t\tvertices[ offset ] = x;\n    \t\t\tvertices[ offset + 1 ] = - y;\n\n    \t\t\tnormals[ offset + 2 ] = 1;\n\n    \t\t\tuvs[ offset2 ] = ix / gridX;\n    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\toffset += 3;\n    \t\t\toffset2 += 2;\n\n    \t\t}\n\n    \t}\n\n    \toffset = 0;\n\n    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\tvar a = ix + gridX1 * iy;\n    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\tindices[ offset ] = a;\n    \t\t\tindices[ offset + 1 ] = b;\n    \t\t\tindices[ offset + 2 ] = d;\n\n    \t\t\tindices[ offset + 3 ] = b;\n    \t\t\tindices[ offset + 4 ] = c;\n    \t\t\tindices[ offset + 5 ] = d;\n\n    \t\t\toffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function Camera() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Camera';\n\n    \tthis.matrixWorldInverse = new Matrix4();\n    \tthis.projectionMatrix = new Matrix4();\n\n    }\n\n    Camera.prototype = Object.create( Object3D.prototype );\n    Camera.prototype.constructor = Camera;\n\n    Camera.prototype.isCamera = true;\n\n    Camera.prototype.getWorldDirection = function () {\n\n    \tvar quaternion = new Quaternion();\n\n    \treturn function getWorldDirection( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.getWorldQuaternion( quaternion );\n\n    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t};\n\n    }();\n\n    Camera.prototype.lookAt = function () {\n\n    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\n    \tvar m1 = new Matrix4();\n\n    \treturn function lookAt( vector ) {\n\n    \t\tm1.lookAt( this.position, vector, this.up );\n\n    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t};\n\n    }();\n\n    Camera.prototype.clone = function () {\n\n    \treturn new this.constructor().copy( this );\n\n    };\n\n    Camera.prototype.copy = function ( source ) {\n\n    \tObject3D.prototype.copy.call( this, source );\n\n    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author greggman / http://games.greggman.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author tschw\n     */\n\n    function PerspectiveCamera( fov, aspect, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'PerspectiveCamera';\n\n    \tthis.fov = fov !== undefined ? fov : 50;\n    \tthis.zoom = 1;\n\n    \tthis.near = near !== undefined ? near : 0.1;\n    \tthis.far = far !== undefined ? far : 2000;\n    \tthis.focus = 10;\n\n    \tthis.aspect = aspect !== undefined ? aspect : 1;\n    \tthis.view = null;\n\n    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: PerspectiveCamera,\n\n    \tisPerspectiveCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.fov = source.fov;\n    \t\tthis.zoom = source.zoom;\n\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n    \t\tthis.focus = source.focus;\n\n    \t\tthis.aspect = source.aspect;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\tthis.filmGauge = source.filmGauge;\n    \t\tthis.filmOffset = source.filmOffset;\n\n    \t\treturn this;\n\n    \t},\n\n    \t/**\n    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n    \t *\n    \t * The default film gauge is 35, so that the focal length can be specified for\n    \t * a 35mm (full frame) camera.\n    \t *\n    \t * Values for focal length and film gauge must have the same unit.\n    \t */\n    \tsetFocalLength: function ( focalLength ) {\n\n    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \t/**\n    \t * Calculates the focal length from the current .fov and .filmGauge.\n    \t */\n    \tgetFocalLength: function () {\n\n    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\n    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n    \t},\n\n    \tgetEffectiveFOV: function () {\n\n    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n    \t},\n\n    \tgetFilmWidth: function () {\n\n    \t\t// film not completely covered in portrait format (aspect < 1)\n    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n    \t},\n\n    \tgetFilmHeight: function () {\n\n    \t\t// film not completely covered in landscape format (aspect > 1)\n    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n    \t},\n\n    \t/**\n    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n    \t * multi-monitor/multi-machine setups.\n    \t *\n    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    \t * the monitors are in grid like this\n    \t *\n    \t *   +---+---+---+\n    \t *   | A | B | C |\n    \t *   +---+---+---+\n    \t *   | D | E | F |\n    \t *   +---+---+---+\n    \t *\n    \t * then for each monitor you would call it like this\n    \t *\n    \t *   var w = 1920;\n    \t *   var h = 1080;\n    \t *   var fullWidth = w * 3;\n    \t *   var fullHeight = h * 2;\n    \t *\n    \t *   --A--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    \t *   --B--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    \t *   --C--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    \t *   --D--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    \t *   --E--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    \t *   --F--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    \t *\n    \t *   Note there is no reason monitors have to be the same size or in a grid.\n    \t */\n    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.aspect = fullWidth / fullHeight;\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar near = this.near,\n    \t\t\ttop = near * Math.tan(\n    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n    \t\t\theight = 2 * top,\n    \t\t\twidth = this.aspect * height,\n    \t\t\tleft = - 0.5 * width,\n    \t\t\tview = this.view;\n\n    \t\tif ( view !== null ) {\n\n    \t\t\tvar fullWidth = view.fullWidth,\n    \t\t\t\tfullHeight = view.fullHeight;\n\n    \t\t\tleft += view.offsetX * width / fullWidth;\n    \t\t\ttop -= view.offsetY * height / fullHeight;\n    \t\t\twidth *= view.width / fullWidth;\n    \t\t\theight *= view.height / fullHeight;\n\n    \t\t}\n\n    \t\tvar skew = this.filmOffset;\n    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n    \t\tthis.projectionMatrix.makeFrustum(\n    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.fov = this.fov;\n    \t\tdata.object.zoom = this.zoom;\n\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n    \t\tdata.object.focus = this.focus;\n\n    \t\tdata.object.aspect = this.aspect;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\tdata.object.filmGauge = this.filmGauge;\n    \t\tdata.object.filmOffset = this.filmOffset;\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author arose / http://github.com/arose\n     */\n\n    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'OrthographicCamera';\n\n    \tthis.zoom = 1;\n    \tthis.view = null;\n\n    \tthis.left = left;\n    \tthis.right = right;\n    \tthis.top = top;\n    \tthis.bottom = bottom;\n\n    \tthis.near = ( near !== undefined ) ? near : 0.1;\n    \tthis.far = ( far !== undefined ) ? far : 2000;\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: OrthographicCamera,\n\n    \tisOrthographicCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.left = source.left;\n    \t\tthis.right = source.right;\n    \t\tthis.top = source.top;\n    \t\tthis.bottom = source.bottom;\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n\n    \t\tthis.zoom = source.zoom;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n    \t\tvar cx = ( this.right + this.left ) / 2;\n    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\n    \t\tvar left = cx - dx;\n    \t\tvar right = cx + dx;\n    \t\tvar top = cy + dy;\n    \t\tvar bottom = cy - dy;\n\n    \t\tif ( this.view !== null ) {\n\n    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n    \t\t}\n\n    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.zoom = this.zoom;\n    \t\tdata.object.left = this.left;\n    \t\tdata.object.right = this.right;\n    \t\tdata.object.top = this.top;\n    \t\tdata.object.bottom = this.bottom;\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tvar type, size;\n\n    \tfunction setIndex( index ) {\n\n    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\t\ttype = gl.UNSIGNED_INT;\n    \t\t\tsize = 4;\n\n    \t\t} else {\n\n    \t\t\ttype = gl.UNSIGNED_SHORT;\n    \t\t\tsize = 2;\n\n    \t\t}\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawElements( mode, count, type, start * size );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry, start, count ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n\n    \t\tsetMode: setMode,\n    \t\tsetIndex: setIndex,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawArrays( mode, start, count );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar position = geometry.attributes.position;\n\n    \t\tvar count = 0;\n\n    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n    \t\t\tcount = position.data.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t} else {\n\n    \t\t\tcount = position.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t}\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n    \t\tsetMode: setMode,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n    \t};\n\n    }\n\n    function WebGLLights() {\n\n    \tvar lights = {};\n\n    \treturn {\n\n    \t\tget: function ( light ) {\n\n    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\n    \t\t\t\treturn lights[ light.id ];\n\n    \t\t\t}\n\n    \t\t\tvar uniforms;\n\n    \t\t\tswitch ( light.type ) {\n\n    \t\t\t\tcase 'DirectionalLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tconeCos: 0,\n    \t\t\t\t\t\tpenumbraCos: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tskyColor: new Color(),\n    \t\t\t\t\t\tgroundColor: new Color()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tlights[ light.id ] = uniforms;\n\n    \t\t\treturn uniforms;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function addLineNumbers( string ) {\n\n    \tvar lines = string.split( '\\n' );\n\n    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\n    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n    \t}\n\n    \treturn lines.join( '\\n' );\n\n    }\n\n    function WebGLShader( gl, type, string ) {\n\n    \tvar shader = gl.createShader( type );\n\n    \tgl.shaderSource( shader, string );\n    \tgl.compileShader( shader );\n\n    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n    \t}\n\n    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n    \t}\n\n    \t// --enable-privileged-webgl-extension\n    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    \treturn shader;\n\n    }\n\n    var programIdCount = 0;\n\n    function getEncodingComponents( encoding ) {\n\n    \tswitch ( encoding ) {\n\n    \t\tcase LinearEncoding:\n    \t\t\treturn [ 'Linear','( value )' ];\n    \t\tcase sRGBEncoding:\n    \t\t\treturn [ 'sRGB','( value )' ];\n    \t\tcase RGBEEncoding:\n    \t\t\treturn [ 'RGBE','( value )' ];\n    \t\tcase RGBM7Encoding:\n    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n    \t\tcase RGBM16Encoding:\n    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n    \t\tcase RGBDEncoding:\n    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n    \t\tcase GammaEncoding:\n    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n    \t}\n\n    }\n\n    function getTexelDecodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n    }\n\n    function getTexelEncodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n    }\n\n    function getToneMappingFunction( functionName, toneMapping ) {\n\n    \tvar toneMappingName;\n\n    \tswitch ( toneMapping ) {\n\n    \t\tcase LinearToneMapping:\n    \t\t\ttoneMappingName = \"Linear\";\n    \t\t\tbreak;\n\n    \t\tcase ReinhardToneMapping:\n    \t\t\ttoneMappingName = \"Reinhard\";\n    \t\t\tbreak;\n\n    \t\tcase Uncharted2ToneMapping:\n    \t\t\ttoneMappingName = \"Uncharted2\";\n    \t\t\tbreak;\n\n    \t\tcase CineonToneMapping:\n    \t\t\ttoneMappingName = \"OptimizedCineon\";\n    \t\t\tbreak;\n\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n    \t}\n\n    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n    }\n\n    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\n    \textensions = extensions || {};\n\n    \tvar chunks = [\n    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n    \t];\n\n    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n    }\n\n    function generateDefines( defines ) {\n\n    \tvar chunks = [];\n\n    \tfor ( var name in defines ) {\n\n    \t\tvar value = defines[ name ];\n\n    \t\tif ( value === false ) continue;\n\n    \t\tchunks.push( '#define ' + name + ' ' + value );\n\n    \t}\n\n    \treturn chunks.join( '\\n' );\n\n    }\n\n    function fetchAttributeLocations( gl, program, identifiers ) {\n\n    \tvar attributes = {};\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n    \tfor ( var i = 0; i < n; i ++ ) {\n\n    \t\tvar info = gl.getActiveAttrib( program, i );\n    \t\tvar name = info.name;\n\n    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n    \t}\n\n    \treturn attributes;\n\n    }\n\n    function filterEmptyLine( string ) {\n\n    \treturn string !== '';\n\n    }\n\n    function replaceLightNums( string, parameters ) {\n\n    \treturn string\n    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n    }\n\n    function parseIncludes( string ) {\n\n    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n    \tfunction replace( match, include ) {\n\n    \t\tvar replace = ShaderChunk[ include ];\n\n    \t\tif ( replace === undefined ) {\n\n    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n    \t\t}\n\n    \t\treturn parseIncludes( replace );\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function unrollLoops( string ) {\n\n    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    \tfunction replace( match, start, end, snippet ) {\n\n    \t\tvar unroll = '';\n\n    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n    \t\t}\n\n    \t\treturn unroll;\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function WebGLProgram( renderer, code, material, parameters ) {\n\n    \tvar gl = renderer.context;\n\n    \tvar extensions = material.extensions;\n    \tvar defines = material.defines;\n\n    \tvar vertexShader = material.__webglShader.vertexShader;\n    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\n    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n    \t}\n\n    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    \tif ( parameters.envMap ) {\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeReflectionMapping:\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \t\t\t\tbreak;\n\n    \t\t\tcase CubeUVReflectionMapping:\n    \t\t\tcase CubeUVRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n    \t\t\t\tbreak;\n\n    \t\t\tcase EquirectangularReflectionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n    \t\t\t\tbreak;\n\n    \t\t\tcase SphericalReflectionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.combine ) {\n\n    \t\t\tcase MultiplyOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    \t\t\t\tbreak;\n\n    \t\t\tcase MixOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n    \t\t\t\tbreak;\n\n    \t\t\tcase AddOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t}\n\n    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n    \t// console.log( 'building new program ' );\n\n    \t//\n\n    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n    \tvar customDefines = generateDefines( defines );\n\n    \t//\n\n    \tvar program = gl.createProgram();\n\n    \tvar prefixVertex, prefixFragment;\n\n    \tif ( material.isRawShaderMaterial ) {\n\n    \t\tprefixVertex = [\n\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t} else {\n\n    \t\tprefixVertex = [\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\t'uniform mat4 modelMatrix;',\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform mat3 normalMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t'attribute vec3 position;',\n    \t\t\t'attribute vec3 normal;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'#ifdef USE_COLOR',\n\n    \t\t\t'\tattribute vec3 color;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_MORPHTARGETS',\n\n    \t\t\t'\tattribute vec3 morphTarget0;',\n    \t\t\t'\tattribute vec3 morphTarget1;',\n    \t\t\t'\tattribute vec3 morphTarget2;',\n    \t\t\t'\tattribute vec3 morphTarget3;',\n\n    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n    \t\t\t'\t\tattribute vec3 morphNormal0;',\n    \t\t\t'\t\tattribute vec3 morphNormal1;',\n    \t\t\t'\t\tattribute vec3 morphNormal2;',\n    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\n    \t\t\t'\t#else',\n\n    \t\t\t'\t\tattribute vec3 morphTarget4;',\n    \t\t\t'\t\tattribute vec3 morphTarget5;',\n    \t\t\t'\t\tattribute vec3 morphTarget6;',\n    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\n    \t\t\t'\t#endif',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_SKINNING',\n\n    \t\t\t'\tattribute vec4 skinIndex;',\n    \t\t\t'\tattribute vec4 skinWeight;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t}\n\n    \tvertexShader = parseIncludes( vertexShader, parameters );\n    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\n    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n    \tif ( ! material.isShaderMaterial ) {\n\n    \t\tvertexShader = unrollLoops( vertexShader );\n    \t\tfragmentShader = unrollLoops( fragmentShader );\n\n    \t}\n\n    \tvar vertexGlsl = prefixVertex + vertexShader;\n    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n    \t// console.log( '*VERTEX*', vertexGlsl );\n    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n    \tgl.attachShader( program, glVertexShader );\n    \tgl.attachShader( program, glFragmentShader );\n\n    \t// Force a particular attribute to index 0.\n\n    \tif ( material.index0AttributeName !== undefined ) {\n\n    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n    \t} else if ( parameters.morphTargets === true ) {\n\n    \t\t// programs with morphTargets displace position out of attribute 0\n    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\n    \t}\n\n    \tgl.linkProgram( program );\n\n    \tvar programLog = gl.getProgramInfoLog( program );\n    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n    \tvar runnable = true;\n    \tvar haveDiagnostics = true;\n\n    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n    \t\trunnable = false;\n\n    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n    \t} else if ( programLog !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n    \t\thaveDiagnostics = false;\n\n    \t}\n\n    \tif ( haveDiagnostics ) {\n\n    \t\tthis.diagnostics = {\n\n    \t\t\trunnable: runnable,\n    \t\t\tmaterial: material,\n\n    \t\t\tprogramLog: programLog,\n\n    \t\t\tvertexShader: {\n\n    \t\t\t\tlog: vertexLog,\n    \t\t\t\tprefix: prefixVertex\n\n    \t\t\t},\n\n    \t\t\tfragmentShader: {\n\n    \t\t\t\tlog: fragmentLog,\n    \t\t\t\tprefix: prefixFragment\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t// clean up\n\n    \tgl.deleteShader( glVertexShader );\n    \tgl.deleteShader( glFragmentShader );\n\n    \t// set up caching for uniform locations\n\n    \tvar cachedUniforms;\n\n    \tthis.getUniforms = function() {\n\n    \t\tif ( cachedUniforms === undefined ) {\n\n    \t\t\tcachedUniforms =\n    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n    \t\t}\n\n    \t\treturn cachedUniforms;\n\n    \t};\n\n    \t// set up caching for attribute locations\n\n    \tvar cachedAttributes;\n\n    \tthis.getAttributes = function() {\n\n    \t\tif ( cachedAttributes === undefined ) {\n\n    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n    \t\t}\n\n    \t\treturn cachedAttributes;\n\n    \t};\n\n    \t// free resource\n\n    \tthis.destroy = function() {\n\n    \t\tgl.deleteProgram( program );\n    \t\tthis.program = undefined;\n\n    \t};\n\n    \t// DEPRECATED\n\n    \tObject.defineProperties( this, {\n\n    \t\tuniforms: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n    \t\t\t\treturn this.getUniforms();\n\n    \t\t\t}\n    \t\t},\n\n    \t\tattributes: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n    \t\t\t\treturn this.getAttributes();\n\n    \t\t\t}\n    \t\t}\n\n    \t} );\n\n\n    \t//\n\n    \tthis.id = programIdCount ++;\n    \tthis.code = code;\n    \tthis.usedTimes = 1;\n    \tthis.program = program;\n    \tthis.vertexShader = glVertexShader;\n    \tthis.fragmentShader = glFragmentShader;\n\n    \treturn this;\n\n    }\n\n    function WebGLPrograms( renderer, capabilities ) {\n\n    \tvar programs = [];\n\n    \tvar shaderIDs = {\n    \t\tMeshDepthMaterial: 'depth',\n    \t\tMeshNormalMaterial: 'normal',\n    \t\tMeshBasicMaterial: 'basic',\n    \t\tMeshLambertMaterial: 'lambert',\n    \t\tMeshPhongMaterial: 'phong',\n    \t\tMeshStandardMaterial: 'physical',\n    \t\tMeshPhysicalMaterial: 'physical',\n    \t\tLineBasicMaterial: 'basic',\n    \t\tLineDashedMaterial: 'dashed',\n    \t\tPointsMaterial: 'points'\n    \t};\n\n    \tvar parameterNames = [\n    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n    \t\t\"roughnessMap\", \"metalnessMap\",\n    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n    \t];\n\n\n    \tfunction allocateBones( object ) {\n\n    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n    \t\t\treturn 1024;\n\n    \t\t} else {\n\n    \t\t\t// default for when object is not specified\n    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n    \t\t\t//\n    \t\t\t//  - leave some extra space for other uniforms\n    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n    \t\t\t//    (up to 54 should be safe)\n\n    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n    \t\t\tvar maxBones = nVertexMatrices;\n\n    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn maxBones;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n    \t\tvar encoding;\n\n    \t\tif ( ! map ) {\n\n    \t\t\tencoding = LinearEncoding;\n\n    \t\t} else if ( (map && map.isTexture) ) {\n\n    \t\t\tencoding = map.encoding;\n\n    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\tencoding = map.texture.encoding;\n\n    \t\t}\n\n    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n    \t\t\tencoding = GammaEncoding;\n\n    \t\t}\n\n    \t\treturn encoding;\n\n    \t}\n\n    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n    \t\tvar shaderID = shaderIDs[ material.type ];\n\n    \t\t// heuristics to create shader parameters according to lights in the scene\n    \t\t// (not to blow over maxLights budget)\n\n    \t\tvar maxBones = allocateBones( object );\n    \t\tvar precision = renderer.getPrecision();\n\n    \t\tif ( material.precision !== null ) {\n\n    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n    \t\t\tif ( precision !== material.precision ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n    \t\tvar parameters = {\n\n    \t\t\tshaderID: shaderID,\n\n    \t\t\tprecision: precision,\n    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n    \t\t\tmap: !! material.map,\n    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n    \t\t\tenvMap: !! material.envMap,\n    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n    \t\t\tlightMap: !! material.lightMap,\n    \t\t\taoMap: !! material.aoMap,\n    \t\t\temissiveMap: !! material.emissiveMap,\n    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n    \t\t\tbumpMap: !! material.bumpMap,\n    \t\t\tnormalMap: !! material.normalMap,\n    \t\t\tdisplacementMap: !! material.displacementMap,\n    \t\t\troughnessMap: !! material.roughnessMap,\n    \t\t\tmetalnessMap: !! material.metalnessMap,\n    \t\t\tspecularMap: !! material.specularMap,\n    \t\t\talphaMap: !! material.alphaMap,\n\n    \t\t\tcombine: material.combine,\n\n    \t\t\tvertexColors: material.vertexColors,\n\n    \t\t\tfog: !! fog,\n    \t\t\tuseFog: material.fog,\n    \t\t\tfogExp: (fog && fog.isFogExp2),\n\n    \t\t\tflatShading: material.shading === FlatShading,\n\n    \t\t\tsizeAttenuation: material.sizeAttenuation,\n    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n    \t\t\tskinning: material.skinning,\n    \t\t\tmaxBones: maxBones,\n    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n    \t\t\tmorphTargets: material.morphTargets,\n    \t\t\tmorphNormals: material.morphNormals,\n    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n    \t\t\tnumDirLights: lights.directional.length,\n    \t\t\tnumPointLights: lights.point.length,\n    \t\t\tnumSpotLights: lights.spot.length,\n    \t\t\tnumHemiLights: lights.hemi.length,\n\n    \t\t\tnumClippingPlanes: nClipPlanes,\n\n    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n    \t\t\tshadowMapType: renderer.shadowMap.type,\n\n    \t\t\ttoneMapping: renderer.toneMapping,\n    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n    \t\t\talphaTest: material.alphaTest,\n    \t\t\tdoubleSided: material.side === DoubleSide,\n    \t\t\tflipSided: material.side === BackSide,\n\n    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n    \t\t};\n\n    \t\treturn parameters;\n\n    \t};\n\n    \tthis.getProgramCode = function ( material, parameters ) {\n\n    \t\tvar array = [];\n\n    \t\tif ( parameters.shaderID ) {\n\n    \t\t\tarray.push( parameters.shaderID );\n\n    \t\t} else {\n\n    \t\t\tarray.push( material.fragmentShader );\n    \t\t\tarray.push( material.vertexShader );\n\n    \t\t}\n\n    \t\tif ( material.defines !== undefined ) {\n\n    \t\t\tfor ( var name in material.defines ) {\n\n    \t\t\t\tarray.push( name );\n    \t\t\t\tarray.push( material.defines[ name ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n    \t\t}\n\n    \t\treturn array.join();\n\n    \t};\n\n    \tthis.acquireProgram = function ( material, parameters, code ) {\n\n    \t\tvar program;\n\n    \t\t// Check if code has been already compiled\n    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n    \t\t\tvar programInfo = programs[ p ];\n\n    \t\t\tif ( programInfo.code === code ) {\n\n    \t\t\t\tprogram = programInfo;\n    \t\t\t\t++ program.usedTimes;\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n    \t\t\tprograms.push( program );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t};\n\n    \tthis.releaseProgram = function( program ) {\n\n    \t\tif ( -- program.usedTimes === 0 ) {\n\n    \t\t\t// Remove from unordered set\n    \t\t\tvar i = programs.indexOf( program );\n    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n    \t\t\tprograms.pop();\n\n    \t\t\t// Free WebGL resources\n    \t\t\tprogram.destroy();\n\n    \t\t}\n\n    \t};\n\n    \t// Exposed for resource monitoring & error feedback via renderer.info:\n    \tthis.programs = programs;\n\n    }\n\n    function WebGLGeometries( gl, properties, info ) {\n\n    \tvar geometries = {};\n\n    \tfunction onGeometryDispose( event ) {\n\n    \t\tvar geometry = event.target;\n    \t\tvar buffergeometry = geometries[ geometry.id ];\n\n    \t\tif ( buffergeometry.index !== null ) {\n\n    \t\t\tdeleteAttribute( buffergeometry.index );\n\n    \t\t}\n\n    \t\tdeleteAttributes( buffergeometry.attributes );\n\n    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n    \t\tdelete geometries[ geometry.id ];\n\n    \t\t// TODO\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe ) {\n\n    \t\t\tdeleteAttribute( property.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( geometry );\n\n    \t\tvar bufferproperty = properties.get( buffergeometry );\n\n    \t\tif ( bufferproperty.wireframe ) {\n\n    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( buffergeometry );\n\n    \t\t//\n\n    \t\tinfo.memory.geometries --;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction deleteAttribute( attribute ) {\n\n    \t\tvar buffer = getAttributeBuffer( attribute );\n\n    \t\tif ( buffer !== undefined ) {\n\n    \t\t\tgl.deleteBuffer( buffer );\n    \t\t\tremoveAttributeBuffer( attribute );\n\n    \t\t}\n\n    \t}\n\n    \tfunction deleteAttributes( attributes ) {\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tdeleteAttribute( attributes[ name ] );\n\n    \t\t}\n\n    \t}\n\n    \tfunction removeAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\tproperties.delete( attribute.data );\n\n    \t\t} else {\n\n    \t\t\tproperties.delete( attribute );\n\n    \t\t}\n\n    \t}\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n    \t\t\t\treturn geometries[ geometry.id ];\n\n    \t\t\t}\n\n    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n    \t\t\tvar buffergeometry;\n\n    \t\t\tif ( geometry.isBufferGeometry ) {\n\n    \t\t\t\tbuffergeometry = geometry;\n\n    \t\t\t} else if ( geometry.isGeometry ) {\n\n    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n    \t\t\t\t}\n\n    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n    \t\t\t}\n\n    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n    \t\t\tinfo.memory.geometries ++;\n\n    \t\t\treturn buffergeometry;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLObjects( gl, properties, info ) {\n\n    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\n    \t//\n\n    \tfunction update( object ) {\n\n    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n    \t\tvar geometry = geometries.get( object );\n\n    \t\tif ( object.geometry.isGeometry ) {\n\n    \t\t\tgeometry.updateFromObject( object );\n\n    \t\t}\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\tfor ( var name in morphAttributes ) {\n\n    \t\t\tvar array = morphAttributes[ name ];\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    \tfunction updateAttribute( attribute, bufferType ) {\n\n    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n    \t\tvar attributeProperties = properties.get( data );\n\n    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n    \t\t} else if ( attributeProperties.version !== data.version ) {\n\n    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n    \t\t}\n\n    \t}\n\n    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n    \t\tgl.bufferData( bufferType, data.array, usage );\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n    \t\t\t// Not using update ranges\n\n    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n    \t\t} else if ( data.updateRange.count === 0 ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n    \t\t} else {\n\n    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n    \t\t\tdata.updateRange.count = 0; // reset range\n\n    \t\t}\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction getWireframeAttribute( geometry ) {\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe !== undefined ) {\n\n    \t\t\treturn property.wireframe;\n\n    \t\t}\n\n    \t\tvar indices = [];\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n    \t\tvar position = attributes.position;\n\n    \t\t// console.time( 'wireframe' );\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar edges = {};\n    \t\t\tvar array = index.array;\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = array[ i + 0 ];\n    \t\t\t\tvar b = array[ i + 1 ];\n    \t\t\t\tvar c = array[ i + 2 ];\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar array = attributes.position.array;\n\n    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = i + 0;\n    \t\t\t\tvar b = i + 1;\n    \t\t\t\tvar c = i + 2;\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// console.timeEnd( 'wireframe' );\n\n    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\tproperty.wireframe = attribute;\n\n    \t\treturn attribute;\n\n    \t}\n\n    \treturn {\n\n    \t\tgetAttributeBuffer: getAttributeBuffer,\n    \t\tgetWireframeAttribute: getWireframeAttribute,\n\n    \t\tupdate: update\n\n    \t};\n\n    }\n\n    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n    \tvar _infoMemory = info.memory;\n    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n    \t//\n\n    \tfunction clampToMaxSize( image, maxSize ) {\n\n    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n    \t\t\t// premultiplied alpha.\n\n    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = Math.floor( image.width * scale );\n    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction isPowerOfTwo( image ) {\n\n    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\n    \t}\n\n    \tfunction makePowerOfTwo( image ) {\n\n    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction textureNeedsPowerOfTwo( texture ) {\n\n    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n    \t\treturn false;\n\n    \t}\n\n    \t// Fallback filters for non-power-of-2 textures\n\n    \tfunction filterFallback( f ) {\n\n    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n    \t\t\treturn _gl.NEAREST;\n\n    \t\t}\n\n    \t\treturn _gl.LINEAR;\n\n    \t}\n\n    \t//\n\n    \tfunction onTextureDispose( event ) {\n\n    \t\tvar texture = event.target;\n\n    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n    \t\tdeallocateTexture( texture );\n\n    \t\t_infoMemory.textures --;\n\n\n    \t}\n\n    \tfunction onRenderTargetDispose( event ) {\n\n    \t\tvar renderTarget = event.target;\n\n    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\tdeallocateRenderTarget( renderTarget );\n\n    \t\t_infoMemory.textures --;\n\n    \t}\n\n    \t//\n\n    \tfunction deallocateTexture( texture ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t// cube texture\n\n    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n    \t\t} else {\n\n    \t\t\t// 2D texture\n\n    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\t// remove all webgl properties\n    \t\tproperties.delete( texture );\n\n    \t}\n\n    \tfunction deallocateRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\tif ( ! renderTarget ) return;\n\n    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\trenderTarget.depthTexture.dispose();\n\n    \t\t}\n\n    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n    \t\t}\n\n    \t\tproperties.delete( renderTarget.texture );\n    \t\tproperties.delete( renderTarget );\n\n    \t}\n\n    \t//\n\n\n\n    \tfunction setTexture2D( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\tvar image = texture.image;\n\n    \t\t\tif ( image === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n    \t\t\t} else if ( image.complete === false ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t}\n\n    \tfunction setTextureCube( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image.length === 6 ) {\n\n    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n    \t\t\t\t\t_infoMemory.textures ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n    \t\t\t\tvar cubeImage = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tvar image = cubeImage[ 0 ],\n    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n    \t\t\t\tglType = paramThreeToGL( texture.type );\n\n    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed ) {\n\n    \t\t\t\t\t\tif ( isDataTexture ) {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n    \t\t\t\t}\n\n    \t\t\t\ttextureProperties.__version = texture.version;\n\n    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction setTextureCubeDynamic( texture, slot ) {\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n    \t}\n\n    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n    \t\tvar extension;\n\n    \t\tif ( isPowerOfTwoImage ) {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n    \t\t} else {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n    \t\t\t}\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension ) {\n\n    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\n    \t\tif ( textureProperties.__webglInit === undefined ) {\n\n    \t\t\ttextureProperties.__webglInit = true;\n\n    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t\t_infoMemory.textures ++;\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n    \t\t\timage = makePowerOfTwo( image );\n\n    \t\t}\n\n    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\tglFormat = paramThreeToGL( texture.format ),\n    \t\tglType = paramThreeToGL( texture.type );\n\n    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\n    \t\tif ( (texture && texture.isDepthTexture) ) {\n\n    \t\t\t// populate depth texture with dummy data\n\n    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n    \t\t\tif ( texture.type === FloatType ) {\n\n    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n    \t\t\t} else if ( _isWebGL2 ) {\n\n    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n    \t\t\t}\n\n    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\n    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n    \t\t\t}\n\n    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n    \t\t\t}\n\n    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\tmipmap = mipmaps[ i ];\n\n    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// regular Texture (image, video, canvas)\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n    \t\ttextureProperties.__version = texture.version;\n\n    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t}\n\n    \t// Render targets\n\n    \t// Setup storage for target texture and bind it to correct framebuffer\n    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else {\n\n    \t\t\t// FIXME: We don't support !depth !stencil\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n    \t\t}\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n    \t}\n\n    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n    \t\t}\n\n    \t\t// upload an empty depth texture with framebuffer size\n    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n    \t\t}\n\n    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else {\n\n    \t\t\tthrow new Error('Unknown depthTexture format')\n\n    \t\t}\n\n    \t}\n\n    \t// Setup GL resources for a non-texture depth buffer\n    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n    \t\t} else {\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Set up GL resources for the render target\n    \tfunction setupRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t_infoMemory.textures ++;\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n    \t\t// Setup framebuffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n    \t\t}\n\n    \t\t// Setup color buffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n    \t\t\t}\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n    \t\t} else {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n    \t\t}\n\n    \t\t// Setup depth and stencil buffers\n\n    \t\tif ( renderTarget.depthBuffer ) {\n\n    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\n    \t\t}\n\n    \t}\n\n    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\n    \t\tvar texture = renderTarget.texture;\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n    \t\t\t\ttexture.minFilter !== NearestFilter &&\n    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n    \t\t\tstate.bindTexture( target, webglTexture );\n    \t\t\t_gl.generateMipmap( target );\n    \t\t\tstate.bindTexture( target, null );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setTexture2D = setTexture2D;\n    \tthis.setTextureCube = setTextureCube;\n    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n    \tthis.setupRenderTarget = setupRenderTarget;\n    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n    }\n\n    /**\n     * @author fordacious / fordacious.github.io\n     */\n\n    function WebGLProperties() {\n\n    \tvar properties = {};\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar uuid = object.uuid;\n    \t\t\tvar map = properties[ uuid ];\n\n    \t\t\tif ( map === undefined ) {\n\n    \t\t\t\tmap = {};\n    \t\t\t\tproperties[ uuid ] = map;\n\n    \t\t\t}\n\n    \t\t\treturn map;\n\n    \t\t},\n\n    \t\tdelete: function ( object ) {\n\n    \t\t\tdelete properties[ object.uuid ];\n\n    \t\t},\n\n    \t\tclear: function () {\n\n    \t\t\tproperties = {};\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLState( gl, extensions, paramThreeToGL ) {\n\n    \tfunction ColorBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar color = new Vector4();\n    \t\tvar currentColorMask = null;\n    \t\tvar currentColorClear = new Vector4();\n\n    \t\treturn {\n\n    \t\t\tsetMask: function ( colorMask ) {\n\n    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n    \t\t\t\t\tcurrentColorMask = colorMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( r, g, b, a ) {\n\n    \t\t\t\tcolor.set( r, g, b, a );\n\n    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n    \t\t\t\t\tgl.clearColor( r, g, b, a );\n    \t\t\t\t\tcurrentColorClear.copy( color );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentColorMask = null;\n    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction DepthBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentDepthMask = null;\n    \t\tvar currentDepthFunc = null;\n    \t\tvar currentDepthClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( depthTest ) {\n\n    \t\t\t\tif ( depthTest ) {\n\n    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( depthMask ) {\n\n    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n    \t\t\t\t\tgl.depthMask( depthMask );\n    \t\t\t\t\tcurrentDepthMask = depthMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( depthFunc ) {\n\n    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n    \t\t\t\t\tif ( depthFunc ) {\n\n    \t\t\t\t\t\tswitch ( depthFunc ) {\n\n    \t\t\t\t\t\t\tcase NeverDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase AlwaysDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase EqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase NotEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( depth ) {\n\n    \t\t\t\tif ( currentDepthClear !== depth ) {\n\n    \t\t\t\t\tgl.clearDepth( depth );\n    \t\t\t\t\tcurrentDepthClear = depth;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentDepthMask = null;\n    \t\t\t\tcurrentDepthFunc = null;\n    \t\t\t\tcurrentDepthClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction StencilBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentStencilMask = null;\n    \t\tvar currentStencilFunc = null;\n    \t\tvar currentStencilRef = null;\n    \t\tvar currentStencilFuncMask = null;\n    \t\tvar currentStencilFail  = null;\n    \t\tvar currentStencilZFail = null;\n    \t\tvar currentStencilZPass = null;\n    \t\tvar currentStencilClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( stencilTest ) {\n\n    \t\t\t\tif ( stencilTest ) {\n\n    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( stencilMask ) {\n\n    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n    \t\t\t\t\tgl.stencilMask( stencilMask );\n    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( stencil ) {\n\n    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\n    \t\t\t\t\tgl.clearStencil( stencil );\n    \t\t\t\t\tcurrentStencilClear = stencil;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentStencilMask = null;\n    \t\t\t\tcurrentStencilFunc = null;\n    \t\t\t\tcurrentStencilRef = null;\n    \t\t\t\tcurrentStencilFuncMask = null;\n    \t\t\t\tcurrentStencilFail = null;\n    \t\t\t\tcurrentStencilZFail = null;\n    \t\t\t\tcurrentStencilZPass = null;\n    \t\t\t\tcurrentStencilClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t//\n\n    \tvar colorBuffer = new ColorBuffer();\n    \tvar depthBuffer = new DepthBuffer();\n    \tvar stencilBuffer = new StencilBuffer();\n\n    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n    \tvar capabilities = {};\n\n    \tvar compressedTextureFormats = null;\n\n    \tvar currentBlending = null;\n    \tvar currentBlendEquation = null;\n    \tvar currentBlendSrc = null;\n    \tvar currentBlendDst = null;\n    \tvar currentBlendEquationAlpha = null;\n    \tvar currentBlendSrcAlpha = null;\n    \tvar currentBlendDstAlpha = null;\n    \tvar currentPremultipledAlpha = false;\n\n    \tvar currentFlipSided = null;\n    \tvar currentCullFace = null;\n\n    \tvar currentLineWidth = null;\n\n    \tvar currentPolygonOffsetFactor = null;\n    \tvar currentPolygonOffsetUnits = null;\n\n    \tvar currentScissorTest = null;\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n    \tvar currentTextureSlot = null;\n    \tvar currentBoundTextures = {};\n\n    \tvar currentScissor = new Vector4();\n    \tvar currentViewport = new Vector4();\n\n    \tfunction createTexture( type, target, count ) {\n\n    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n    \t\tvar texture = gl.createTexture();\n\n    \t\tgl.bindTexture( type, texture );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n    \t\tfor ( var i = 0; i < count; i ++ ) {\n\n    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t}\n\n    \tvar emptyTextures = {};\n    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n    \t//\n\n    \tfunction init() {\n\n    \t\tclearColor( 0, 0, 0, 1 );\n    \t\tclearDepth( 1 );\n    \t\tclearStencil( 0 );\n\n    \t\tenable( gl.DEPTH_TEST );\n    \t\tsetDepthFunc( LessEqualDepth );\n\n    \t\tsetFlipSided( false );\n    \t\tsetCullFace( CullFaceBack );\n    \t\tenable( gl.CULL_FACE );\n\n    \t\tenable( gl.BLEND );\n    \t\tsetBlending( NormalBlending );\n\n    \t}\n\n    \tfunction initAttributes() {\n\n    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n    \t\t\tnewAttributes[ i ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttribute( attribute ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n    \t\t\tattributeDivisors[ attribute ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disableUnusedAttributes() {\n\n    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction enable( id ) {\n\n    \t\tif ( capabilities[ id ] !== true ) {\n\n    \t\t\tgl.enable( id );\n    \t\t\tcapabilities[ id ] = true;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disable( id ) {\n\n    \t\tif ( capabilities[ id ] !== false ) {\n\n    \t\t\tgl.disable( id );\n    \t\t\tcapabilities[ id ] = false;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getCompressedTextureFormats() {\n\n    \t\tif ( compressedTextureFormats === null ) {\n\n    \t\t\tcompressedTextureFormats = [];\n\n    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn compressedTextureFormats;\n\n    \t}\n\n    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n    \t\tif ( blending !== NoBlending ) {\n\n    \t\t\tenable( gl.BLEND );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.BLEND );\n    \t\t\tcurrentBlending = blending; // no blending, that is\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n    \t\t\tif ( blending === AdditiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === MultiplyBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tcurrentBlending = blending;\n    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n    \t\t}\n\n    \t\tif ( blending === CustomBlending ) {\n\n    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n    \t\t\t\tcurrentBlendEquation = blendEquation;\n    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n    \t\t\t}\n\n    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n    \t\t\t\tcurrentBlendSrc = blendSrc;\n    \t\t\t\tcurrentBlendDst = blendDst;\n    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tcurrentBlendEquation = null;\n    \t\t\tcurrentBlendSrc = null;\n    \t\t\tcurrentBlendDst = null;\n    \t\t\tcurrentBlendEquationAlpha = null;\n    \t\t\tcurrentBlendSrcAlpha = null;\n    \t\t\tcurrentBlendDstAlpha = null;\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction setColorWrite( colorWrite ) {\n\n    \t\tcolorBuffer.setMask( colorWrite );\n\n    \t}\n\n    \tfunction setDepthTest( depthTest ) {\n\n    \t\tdepthBuffer.setTest( depthTest );\n\n    \t}\n\n    \tfunction setDepthWrite( depthWrite ) {\n\n    \t\tdepthBuffer.setMask( depthWrite );\n\n    \t}\n\n    \tfunction setDepthFunc( depthFunc ) {\n\n    \t\tdepthBuffer.setFunc( depthFunc );\n\n    \t}\n\n    \tfunction setStencilTest( stencilTest ) {\n\n    \t\tstencilBuffer.setTest( stencilTest );\n\n    \t}\n\n    \tfunction setStencilWrite( stencilWrite ) {\n\n    \t\tstencilBuffer.setMask( stencilWrite );\n\n    \t}\n\n    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n    \t}\n\n    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n    \t}\n\n    \t//\n\n    \tfunction setFlipSided( flipSided ) {\n\n    \t\tif ( currentFlipSided !== flipSided ) {\n\n    \t\t\tif ( flipSided ) {\n\n    \t\t\t\tgl.frontFace( gl.CW );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.frontFace( gl.CCW );\n\n    \t\t\t}\n\n    \t\t\tcurrentFlipSided = flipSided;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setCullFace( cullFace ) {\n\n    \t\tif ( cullFace !== CullFaceNone ) {\n\n    \t\t\tenable( gl.CULL_FACE );\n\n    \t\t\tif ( cullFace !== currentCullFace ) {\n\n    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\n    \t\t\t\t\tgl.cullFace( gl.BACK );\n\n    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.CULL_FACE );\n\n    \t\t}\n\n    \t\tcurrentCullFace = cullFace;\n\n    \t}\n\n    \tfunction setLineWidth( width ) {\n\n    \t\tif ( width !== currentLineWidth ) {\n\n    \t\t\tgl.lineWidth( width );\n\n    \t\t\tcurrentLineWidth = width;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n    \t\tif ( polygonOffset ) {\n\n    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n    \t\t\t\tgl.polygonOffset( factor, units );\n\n    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t}\n\n    \t}\n\n    \tfunction getScissorTest() {\n\n    \t\treturn currentScissorTest;\n\n    \t}\n\n    \tfunction setScissorTest( scissorTest ) {\n\n    \t\tcurrentScissorTest = scissorTest;\n\n    \t\tif ( scissorTest ) {\n\n    \t\t\tenable( gl.SCISSOR_TEST );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.SCISSOR_TEST );\n\n    \t\t}\n\n    \t}\n\n    \t// texture\n\n    \tfunction activeTexture( webglSlot ) {\n\n    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    \t\tif ( currentTextureSlot !== webglSlot ) {\n\n    \t\t\tgl.activeTexture( webglSlot );\n    \t\t\tcurrentTextureSlot = webglSlot;\n\n    \t\t}\n\n    \t}\n\n    \tfunction bindTexture( webglType, webglTexture ) {\n\n    \t\tif ( currentTextureSlot === null ) {\n\n    \t\t\tactiveTexture();\n\n    \t\t}\n\n    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n    \t\tif ( boundTexture === undefined ) {\n\n    \t\t\tboundTexture = { type: undefined, texture: undefined };\n    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n    \t\t}\n\n    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n    \t\t\tboundTexture.type = webglType;\n    \t\t\tboundTexture.texture = webglTexture;\n\n    \t\t}\n\n    \t}\n\n    \tfunction compressedTexImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \tfunction texImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.texImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction clearColor( r, g, b, a ) {\n\n    \t\tcolorBuffer.setClear( r, g, b, a );\n\n    \t}\n\n    \tfunction clearDepth( depth ) {\n\n    \t\tdepthBuffer.setClear( depth );\n\n    \t}\n\n    \tfunction clearStencil( stencil ) {\n\n    \t\tstencilBuffer.setClear( stencil );\n\n    \t}\n\n    \t//\n\n    \tfunction scissor( scissor ) {\n\n    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\n    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n    \t\t\tcurrentScissor.copy( scissor );\n\n    \t\t}\n\n    \t}\n\n    \tfunction viewport( viewport ) {\n\n    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\n    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n    \t\t\tcurrentViewport.copy( viewport );\n\n    \t\t}\n\n    \t}\n\n    \t//\n\n    \tfunction reset() {\n\n    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tcapabilities = {};\n\n    \t\tcompressedTextureFormats = null;\n\n    \t\tcurrentTextureSlot = null;\n    \t\tcurrentBoundTextures = {};\n\n    \t\tcurrentBlending = null;\n\n    \t\tcurrentFlipSided = null;\n    \t\tcurrentCullFace = null;\n\n    \t\tcolorBuffer.reset();\n    \t\tdepthBuffer.reset();\n    \t\tstencilBuffer.reset();\n\n    \t}\n\n    \treturn {\n\n    \t\tbuffers: {\n    \t\t\tcolor: colorBuffer,\n    \t\t\tdepth: depthBuffer,\n    \t\t\tstencil: stencilBuffer\n    \t\t},\n\n    \t\tinit: init,\n    \t\tinitAttributes: initAttributes,\n    \t\tenableAttribute: enableAttribute,\n    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n    \t\tenable: enable,\n    \t\tdisable: disable,\n    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n    \t\tsetBlending: setBlending,\n\n    \t\tsetColorWrite: setColorWrite,\n    \t\tsetDepthTest: setDepthTest,\n    \t\tsetDepthWrite: setDepthWrite,\n    \t\tsetDepthFunc: setDepthFunc,\n    \t\tsetStencilTest: setStencilTest,\n    \t\tsetStencilWrite: setStencilWrite,\n    \t\tsetStencilFunc: setStencilFunc,\n    \t\tsetStencilOp: setStencilOp,\n\n    \t\tsetFlipSided: setFlipSided,\n    \t\tsetCullFace: setCullFace,\n\n    \t\tsetLineWidth: setLineWidth,\n    \t\tsetPolygonOffset: setPolygonOffset,\n\n    \t\tgetScissorTest: getScissorTest,\n    \t\tsetScissorTest: setScissorTest,\n\n    \t\tactiveTexture: activeTexture,\n    \t\tbindTexture: bindTexture,\n    \t\tcompressedTexImage2D: compressedTexImage2D,\n    \t\ttexImage2D: texImage2D,\n\n    \t\tclearColor: clearColor,\n    \t\tclearDepth: clearDepth,\n    \t\tclearStencil: clearStencil,\n\n    \t\tscissor: scissor,\n    \t\tviewport: viewport,\n\n    \t\treset: reset\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLCapabilities( gl, extensions, parameters ) {\n\n    \tvar maxAnisotropy;\n\n    \tfunction getMaxAnisotropy() {\n\n    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n    \t\t} else {\n\n    \t\t\tmaxAnisotropy = 0;\n\n    \t\t}\n\n    \t\treturn maxAnisotropy;\n\n    \t}\n\n    \tfunction getMaxPrecision( precision ) {\n\n    \t\tif ( precision === 'highp' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'highp';\n\n    \t\t\t}\n\n    \t\t\tprecision = 'mediump';\n\n    \t\t}\n\n    \t\tif ( precision === 'mediump' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'mediump';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn 'lowp';\n\n    \t}\n\n    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    \tvar maxPrecision = getMaxPrecision( precision );\n\n    \tif ( maxPrecision !== precision ) {\n\n    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n    \t\tprecision = maxPrecision;\n\n    \t}\n\n    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    \tvar vertexTextures = maxVertexTextures > 0;\n    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    \treturn {\n\n    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n    \t\tgetMaxPrecision: getMaxPrecision,\n\n    \t\tprecision: precision,\n    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    \t\tmaxTextures: maxTextures,\n    \t\tmaxVertexTextures: maxVertexTextures,\n    \t\tmaxTextureSize: maxTextureSize,\n    \t\tmaxCubemapSize: maxCubemapSize,\n\n    \t\tmaxAttributes: maxAttributes,\n    \t\tmaxVertexUniforms: maxVertexUniforms,\n    \t\tmaxVaryings: maxVaryings,\n    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n    \t\tvertexTextures: vertexTextures,\n    \t\tfloatFragmentTextures: floatFragmentTextures,\n    \t\tfloatVertexTextures: floatVertexTextures\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLExtensions( gl ) {\n\n    \tvar extensions = {};\n\n    \treturn {\n\n    \t\tget: function ( name ) {\n\n    \t\t\tif ( extensions[ name ] !== undefined ) {\n\n    \t\t\t\treturn extensions[ name ];\n\n    \t\t\t}\n\n    \t\t\tvar extension;\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'WEBGL_depth_texture':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n    \t\t\t\t\textension = gl.getExtension( name );\n\n    \t\t\t}\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n    \t\t\t}\n\n    \t\t\textensions[ name ] = extension;\n\n    \t\t\treturn extension;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLClipping() {\n\n    \tvar scope = this,\n\n    \t\tglobalState = null,\n    \t\tnumGlobalPlanes = 0,\n    \t\tlocalClippingEnabled = false,\n    \t\trenderingShadows = false,\n\n    \t\tplane = new Plane(),\n    \t\tviewNormalMatrix = new Matrix3(),\n\n    \t\tuniform = { value: null, needsUpdate: false };\n\n    \tthis.uniform = uniform;\n    \tthis.numPlanes = 0;\n\n    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\n    \t\tvar enabled =\n    \t\t\tplanes.length !== 0 ||\n    \t\t\tenableLocalClipping ||\n    \t\t\t// enable state of previous frame - the clipping code has to\n    \t\t\t// run another frame in order to reset the state:\n    \t\t\tnumGlobalPlanes !== 0 ||\n    \t\t\tlocalClippingEnabled;\n\n    \t\tlocalClippingEnabled = enableLocalClipping;\n\n    \t\tglobalState = projectPlanes( planes, camera, 0 );\n    \t\tnumGlobalPlanes = planes.length;\n\n    \t\treturn enabled;\n\n    \t};\n\n    \tthis.beginShadows = function() {\n\n    \t\trenderingShadows = true;\n    \t\tprojectPlanes( null );\n\n    \t};\n\n    \tthis.endShadows = function() {\n\n    \t\trenderingShadows = false;\n    \t\tresetGlobalState();\n\n    \t};\n\n    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n    \t\tif ( ! localClippingEnabled ||\n    \t\t\t\tplanes === null || planes.length === 0 ||\n    \t\t\t\trenderingShadows && ! clipShadows ) {\n    \t\t\t// there's no local clipping\n\n    \t\t\tif ( renderingShadows ) {\n    \t\t\t\t// there's no global clipping\n\n    \t\t\t\tprojectPlanes( null );\n\n    \t\t\t} else {\n\n    \t\t\t\tresetGlobalState();\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n    \t\t\t\tlGlobal = nGlobal * 4,\n\n    \t\t\t\tdstArray = cache.clippingState || null;\n\n    \t\t\tuniform.value = dstArray; // ensure unique state\n\n    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\n    \t\t\t}\n\n    \t\t\tcache.clippingState = dstArray;\n    \t\t\tthis.numPlanes += nGlobal;\n\n    \t\t}\n\n\n    \t};\n\n    \tfunction resetGlobalState() {\n\n    \t\tif ( uniform.value !== globalState ) {\n\n    \t\t\tuniform.value = globalState;\n    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n    \t\t}\n\n    \t\tscope.numPlanes = numGlobalPlanes;\n\n    \t}\n\n    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n    \t\t\tdstArray = null;\n\n    \t\tif ( nPlanes !== 0 ) {\n\n    \t\t\tdstArray = uniform.value;\n\n    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n    \t\t\t\t\tplane.copy( planes[ i ] ).\n    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tuniform.value = dstArray;\n    \t\t\tuniform.needsUpdate = true;\n\n    \t\t}\n\n    \t\tscope.numPlanes = nPlanes;\n    \t\treturn dstArray;\n\n    \t}\n\n    }\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     * @author tschw\n     */\n\n    function WebGLRenderer( parameters ) {\n\n    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n    \tparameters = parameters || {};\n\n    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n    \t_context = parameters.context !== undefined ? parameters.context : null,\n\n    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    \tvar lights = [];\n\n    \tvar opaqueObjects = [];\n    \tvar opaqueObjectsLastIndex = - 1;\n    \tvar transparentObjects = [];\n    \tvar transparentObjectsLastIndex = - 1;\n\n    \tvar morphInfluences = new Float32Array( 8 );\n\n    \tvar sprites = [];\n    \tvar lensFlares = [];\n\n    \t// public properties\n\n    \tthis.domElement = _canvas;\n    \tthis.context = null;\n\n    \t// clearing\n\n    \tthis.autoClear = true;\n    \tthis.autoClearColor = true;\n    \tthis.autoClearDepth = true;\n    \tthis.autoClearStencil = true;\n\n    \t// scene graph\n\n    \tthis.sortObjects = true;\n\n    \t// user-defined clipping\n\n    \tthis.clippingPlanes = [];\n    \tthis.localClippingEnabled = false;\n\n    \t// physically based shading\n\n    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n    \tthis.gammaInput = false;\n    \tthis.gammaOutput = false;\n\n    \t// physical lights\n\n    \tthis.physicallyCorrectLights = false;\n\n    \t// tone mapping\n\n    \tthis.toneMapping = LinearToneMapping;\n    \tthis.toneMappingExposure = 1.0;\n    \tthis.toneMappingWhitePoint = 1.0;\n\n    \t// morphs\n\n    \tthis.maxMorphTargets = 8;\n    \tthis.maxMorphNormals = 4;\n\n    \t// internal properties\n\n    \tvar _this = this,\n\n    \t// internal state cache\n\n    \t_currentProgram = null,\n    \t_currentRenderTarget = null,\n    \t_currentFramebuffer = null,\n    \t_currentMaterialId = - 1,\n    \t_currentGeometryProgram = '',\n    \t_currentCamera = null,\n\n    \t_currentScissor = new Vector4(),\n    \t_currentScissorTest = null,\n\n    \t_currentViewport = new Vector4(),\n\n    \t//\n\n    \t_usedTextureUnits = 0,\n\n    \t//\n\n    \t_clearColor = new Color( 0x000000 ),\n    \t_clearAlpha = 0,\n\n    \t_width = _canvas.width,\n    \t_height = _canvas.height,\n\n    \t_pixelRatio = 1,\n\n    \t_scissor = new Vector4( 0, 0, _width, _height ),\n    \t_scissorTest = false,\n\n    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\n    \t// frustum\n\n    \t_frustum = new Frustum(),\n\n    \t// clipping\n\n    \t_clipping = new WebGLClipping(),\n    \t_clippingEnabled = false,\n    \t_localClippingEnabled = false,\n\n    \t_sphere = new Sphere(),\n\n    \t// camera matrices cache\n\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_vector3 = new Vector3(),\n\n    \t// light arrays cache\n\n    \t_lights = {\n\n    \t\thash: '',\n\n    \t\tambient: [ 0, 0, 0 ],\n    \t\tdirectional: [],\n    \t\tdirectionalShadowMap: [],\n    \t\tdirectionalShadowMatrix: [],\n    \t\tspot: [],\n    \t\tspotShadowMap: [],\n    \t\tspotShadowMatrix: [],\n    \t\tpoint: [],\n    \t\tpointShadowMap: [],\n    \t\tpointShadowMatrix: [],\n    \t\themi: [],\n\n    \t\tshadows: []\n\n    \t},\n\n    \t// info\n\n    \t_infoRender = {\n\n    \t\tcalls: 0,\n    \t\tvertices: 0,\n    \t\tfaces: 0,\n    \t\tpoints: 0\n\n    \t};\n\n    \tthis.info = {\n\n    \t\trender: _infoRender,\n    \t\tmemory: {\n\n    \t\t\tgeometries: 0,\n    \t\t\ttextures: 0\n\n    \t\t},\n    \t\tprograms: null\n\n    \t};\n\n\n    \t// initialize\n\n    \tvar _gl;\n\n    \ttry {\n\n    \t\tvar attributes = {\n    \t\t\talpha: _alpha,\n    \t\t\tdepth: _depth,\n    \t\t\tstencil: _stencil,\n    \t\t\tantialias: _antialias,\n    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n    \t\t};\n\n    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n    \t\tif ( _gl === null ) {\n\n    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n    \t\t\t} else {\n\n    \t\t\t\tthrow 'Error creating WebGL context.';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\n    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n    \t\t\t};\n\n    \t\t}\n\n    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t} catch ( error ) {\n\n    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n    \t}\n\n    \tvar extensions = new WebGLExtensions( _gl );\n\n    \textensions.get( 'WEBGL_depth_texture' );\n    \textensions.get( 'OES_texture_float' );\n    \textensions.get( 'OES_texture_float_linear' );\n    \textensions.get( 'OES_texture_half_float' );\n    \textensions.get( 'OES_texture_half_float_linear' );\n    \textensions.get( 'OES_standard_derivatives' );\n    \textensions.get( 'ANGLE_instanced_arrays' );\n\n    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\tBufferGeometry.MaxIndex = 4294967296;\n\n    \t}\n\n    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n    \tvar properties = new WebGLProperties();\n    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n    \tvar programCache = new WebGLPrograms( this, capabilities );\n    \tvar lightCache = new WebGLLights();\n\n    \tthis.info.programs = programCache.programs;\n\n    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n    \t//\n\n    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n    \tvar backgroundCamera2 = new PerspectiveCamera();\n    \tvar backgroundPlaneMesh = new Mesh(\n    \t\tnew PlaneBufferGeometry( 2, 2 ),\n    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n    \t);\n    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n    \tvar backgroundBoxMesh = new Mesh(\n    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n    \t\tnew ShaderMaterial( {\n    \t\t\tuniforms: backgroundBoxShader.uniforms,\n    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n    \t\t\tside: BackSide,\n    \t\t\tdepthTest: false,\n    \t\t\tdepthWrite: false,\n    \t\t\tfog: false\n    \t\t} )\n    \t);\n\n    \t//\n\n    \tfunction getTargetPixelRatio() {\n\n    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n    \t}\n\n    \tfunction glClearColor( r, g, b, a ) {\n\n    \t\tif ( _premultipliedAlpha === true ) {\n\n    \t\t\tr *= a; g *= a; b *= a;\n\n    \t\t}\n\n    \t\tstate.clearColor( r, g, b, a );\n\n    \t}\n\n    \tfunction setDefaultGLState() {\n\n    \t\tstate.init();\n\n    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t}\n\n    \tfunction resetGLState() {\n\n    \t\t_currentProgram = null;\n    \t\t_currentCamera = null;\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n\n    \t\tstate.reset();\n\n    \t}\n\n    \tsetDefaultGLState();\n\n    \tthis.context = _gl;\n    \tthis.capabilities = capabilities;\n    \tthis.extensions = extensions;\n    \tthis.properties = properties;\n    \tthis.state = state;\n\n    \t// shadow map\n\n    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n    \tthis.shadowMap = shadowMap;\n\n\n    \t// Plugins\n\n    \tvar spritePlugin = new SpritePlugin( this, sprites );\n    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n    \t// API\n\n    \tthis.getContext = function () {\n\n    \t\treturn _gl;\n\n    \t};\n\n    \tthis.getContextAttributes = function () {\n\n    \t\treturn _gl.getContextAttributes();\n\n    \t};\n\n    \tthis.forceContextLoss = function () {\n\n    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n    \t};\n\n    \tthis.getMaxAnisotropy = function () {\n\n    \t\treturn capabilities.getMaxAnisotropy();\n\n    \t};\n\n    \tthis.getPrecision = function () {\n\n    \t\treturn capabilities.precision;\n\n    \t};\n\n    \tthis.getPixelRatio = function () {\n\n    \t\treturn _pixelRatio;\n\n    \t};\n\n    \tthis.setPixelRatio = function ( value ) {\n\n    \t\tif ( value === undefined ) return;\n\n    \t\t_pixelRatio = value;\n\n    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n    \t};\n\n    \tthis.getSize = function () {\n\n    \t\treturn {\n    \t\t\twidth: _width,\n    \t\t\theight: _height\n    \t\t};\n\n    \t};\n\n    \tthis.setSize = function ( width, height, updateStyle ) {\n\n    \t\t_width = width;\n    \t\t_height = height;\n\n    \t\t_canvas.width = width * _pixelRatio;\n    \t\t_canvas.height = height * _pixelRatio;\n\n    \t\tif ( updateStyle !== false ) {\n\n    \t\t\t_canvas.style.width = width + 'px';\n    \t\t\t_canvas.style.height = height + 'px';\n\n    \t\t}\n\n    \t\tthis.setViewport( 0, 0, width, height );\n\n    \t};\n\n    \tthis.setViewport = function ( x, y, width, height ) {\n\n    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissor = function ( x, y, width, height ) {\n\n    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissorTest = function ( boolean ) {\n\n    \t\tstate.setScissorTest( _scissorTest = boolean );\n\n    \t};\n\n    \t// Clearing\n\n    \tthis.getClearColor = function () {\n\n    \t\treturn _clearColor;\n\n    \t};\n\n    \tthis.setClearColor = function ( color, alpha ) {\n\n    \t\t_clearColor.set( color );\n\n    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.getClearAlpha = function () {\n\n    \t\treturn _clearAlpha;\n\n    \t};\n\n    \tthis.setClearAlpha = function ( alpha ) {\n\n    \t\t_clearAlpha = alpha;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.clear = function ( color, depth, stencil ) {\n\n    \t\tvar bits = 0;\n\n    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    \t\t_gl.clear( bits );\n\n    \t};\n\n    \tthis.clearColor = function () {\n\n    \t\tthis.clear( true, false, false );\n\n    \t};\n\n    \tthis.clearDepth = function () {\n\n    \t\tthis.clear( false, true, false );\n\n    \t};\n\n    \tthis.clearStencil = function () {\n\n    \t\tthis.clear( false, false, true );\n\n    \t};\n\n    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n    \t\tthis.setRenderTarget( renderTarget );\n    \t\tthis.clear( color, depth, stencil );\n\n    \t};\n\n    \t// Reset\n\n    \tthis.resetGLState = resetGLState;\n\n    \tthis.dispose = function() {\n\n    \t\ttransparentObjects = [];\n    \t\ttransparentObjectsLastIndex = -1;\n    \t\topaqueObjects = [];\n    \t\topaqueObjectsLastIndex = -1;\n\n    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t};\n\n    \t// Events\n\n    \tfunction onContextLost( event ) {\n\n    \t\tevent.preventDefault();\n\n    \t\tresetGLState();\n    \t\tsetDefaultGLState();\n\n    \t\tproperties.clear();\n\n    \t}\n\n    \tfunction onMaterialDispose( event ) {\n\n    \t\tvar material = event.target;\n\n    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n    \t\tdeallocateMaterial( material );\n\n    \t}\n\n    \t// Buffer deallocation\n\n    \tfunction deallocateMaterial( material ) {\n\n    \t\treleaseMaterialProgramReference( material );\n\n    \t\tproperties.delete( material );\n\n    \t}\n\n\n    \tfunction releaseMaterialProgramReference( material ) {\n\n    \t\tvar programInfo = properties.get( material ).program;\n\n    \t\tmaterial.program = undefined;\n\n    \t\tif ( programInfo !== undefined ) {\n\n    \t\t\tprogramCache.releaseProgram( programInfo );\n\n    \t\t}\n\n    \t}\n\n    \t// Buffer rendering\n\n    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\n    \t\tstate.initAttributes();\n\n    \t\tvar buffers = properties.get( object );\n\n    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( object.hasPositions ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.position );\n    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasNormals ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n    \t\t\tif ( ! material.isMeshPhongMaterial &&\n    \t\t\t     ! material.isMeshStandardMaterial &&\n    \t\t\t       material.shading === FlatShading ) {\n\n    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n    \t\t\t\t\tvar array = object.normalArray;\n\n    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n    \t\t\t\t\tarray[ i + 0 ] = nx;\n    \t\t\t\t\tarray[ i + 1 ] = ny;\n    \t\t\t\t\tarray[ i + 2 ] = nz;\n\n    \t\t\t\t\tarray[ i + 3 ] = nx;\n    \t\t\t\t\tarray[ i + 4 ] = ny;\n    \t\t\t\t\tarray[ i + 5 ] = nz;\n\n    \t\t\t\t\tarray[ i + 6 ] = nx;\n    \t\t\t\t\tarray[ i + 7 ] = ny;\n    \t\t\t\t\tarray[ i + 8 ] = nz;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.normal );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasUvs && material.map ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.uv );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.color );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n    \t\tobject.count = 0;\n\n    \t};\n\n    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n    \t\tsetMaterial( material );\n\n    \t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\tvar updateBuffers = false;\n    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n    \t\t\t_currentGeometryProgram = geometryProgram;\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n    \t\tif ( morphTargetInfluences !== undefined ) {\n\n    \t\t\tvar activeInfluences = [];\n\n    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n    \t\t\t}\n\n    \t\t\tactiveInfluences.sort( absNumericalSort );\n\n    \t\t\tif ( activeInfluences.length > 8 ) {\n\n    \t\t\t\tactiveInfluences.length = 8;\n\n    \t\t\t}\n\n    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = activeInfluences[ i ];\n    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n    \t\t\t\t\tvar index = influence[ 1 ];\n\n    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\n    \t\t\t}\n\n    \t\t\tprogram.getUniforms().setValue(\n    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar index = geometry.index;\n    \t\tvar position = geometry.attributes.position;\n    \t\tvar rangeFactor = 1;\n\n    \t\tif ( material.wireframe === true ) {\n\n    \t\t\tindex = objects.getWireframeAttribute( geometry );\n    \t\t\trangeFactor = 2;\n\n    \t\t}\n\n    \t\tvar renderer;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\trenderer = indexedBufferRenderer;\n    \t\t\trenderer.setIndex( index );\n\n    \t\t} else {\n\n    \t\t\trenderer = bufferRenderer;\n\n    \t\t}\n\n    \t\tif ( updateBuffers ) {\n\n    \t\t\tsetupVertexAttributes( material, program, geometry );\n\n    \t\t\tif ( index !== null ) {\n\n    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar dataCount = 0;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tdataCount = index.count;\n\n    \t\t} else if ( position !== undefined ) {\n\n    \t\t\tdataCount = position.count;\n\n    \t\t}\n\n    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n    \t\tif ( drawCount === 0 ) return;\n\n    \t\t//\n\n    \t\tif ( object.isMesh ) {\n\n    \t\t\tif ( material.wireframe === true ) {\n\n    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\tswitch ( object.drawMode ) {\n\n    \t\t\t\t\tcase TrianglesDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleStripDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleFanDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n\n    \t\t} else if ( object.isLine ) {\n\n    \t\t\tvar lineWidth = material.linewidth;\n\n    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n    \t\t\tif ( object.isLineSegments ) {\n\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n    \t\t\t}\n\n    \t\t} else if ( object.isPoints ) {\n\n    \t\t\trenderer.setMode( _gl.POINTS );\n\n    \t\t}\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderer.render( drawStart, drawCount );\n\n    \t\t}\n\n    \t};\n\n    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n    \t\tvar extension;\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( startIndex === undefined ) startIndex = 0;\n\n    \t\tstate.initAttributes();\n\n    \t\tvar geometryAttributes = geometry.attributes;\n\n    \t\tvar programAttributes = program.getAttributes();\n\n    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    \t\tfor ( var name in programAttributes ) {\n\n    \t\t\tvar programAttribute = programAttributes[ name ];\n\n    \t\t\tif ( programAttribute >= 0 ) {\n\n    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\n    \t\t\t\t\tvar type = _gl.FLOAT;\n    \t\t\t\t\tvar array = geometryAttribute.array;\n    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.FLOAT;\n\n    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.BYTE;\n\n    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\n    \t\t\t\t\t\tvar data = geometryAttribute.data;\n    \t\t\t\t\t\tvar stride = data.stride;\n    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n    \t\t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\t\tswitch ( value.length ) {\n\n    \t\t\t\t\t\t\tcase 2:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 3:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 4:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t}\n\n    \t// Sorting\n\n    \tfunction absNumericalSort( a, b ) {\n\n    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n    \t\t\treturn a.material.program.id - b.material.program.id;\n\n    \t\t} else if ( a.material.id !== b.material.id ) {\n\n    \t\t\treturn a.material.id - b.material.id;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn a.z - b.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \tfunction reversePainterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \t// Rendering\n\n    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar fog = scene.fog;\n\n    \t\t// reset caching for this frame\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n    \t\t_currentCamera = null;\n\n    \t\t// update scene graph\n\n    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n    \t\t// update camera matrices and frustum\n\n    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\tlights.length = 0;\n\n    \t\topaqueObjectsLastIndex = - 1;\n    \t\ttransparentObjectsLastIndex = - 1;\n\n    \t\tsprites.length = 0;\n    \t\tlensFlares.length = 0;\n\n    \t\t_localClippingEnabled = this.localClippingEnabled;\n    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n    \t\tprojectObject( scene, camera );\n\n    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n    \t\tif ( _this.sortObjects === true ) {\n\n    \t\t\topaqueObjects.sort( painterSortStable );\n    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n    \t\tsetupShadows( lights );\n\n    \t\tshadowMap.render( scene, camera );\n\n    \t\tsetupLights( lights, camera );\n\n    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n    \t\t//\n\n    \t\t_infoRender.calls = 0;\n    \t\t_infoRender.vertices = 0;\n    \t\t_infoRender.faces = 0;\n    \t\t_infoRender.points = 0;\n\n    \t\tif ( renderTarget === undefined ) {\n\n    \t\t\trenderTarget = null;\n\n    \t\t}\n\n    \t\tthis.setRenderTarget( renderTarget );\n\n    \t\t//\n\n    \t\tvar background = scene.background;\n\n    \t\tif ( background === null ) {\n\n    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t\t} else if ( background && background.isColor ) {\n\n    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n    \t\t\tforceClear = true;\n\n    \t\t}\n\n    \t\tif ( this.autoClear || forceClear ) {\n\n    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n    \t\t}\n\n    \t\tif ( background && background.isCubeTexture ) {\n\n    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n    \t\t\tobjects.update( backgroundBoxMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n    \t\t} else if ( background && background.isTexture ) {\n\n    \t\t\tbackgroundPlaneMesh.material.map = background;\n\n    \t\t\tobjects.update( backgroundPlaneMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( scene.overrideMaterial ) {\n\n    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n    \t\t} else {\n\n    \t\t\t// opaque pass (front-to-back order)\n\n    \t\t\tstate.setBlending( NoBlending );\n    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\n    \t\t\t// transparent pass (back-to-front order)\n\n    \t\t\trenderObjects( transparentObjects, camera, fog );\n\n    \t\t}\n\n    \t\t// custom render plugins (post pass)\n\n    \t\tspritePlugin.render( scene, camera );\n    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n    \t\t}\n\n    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n    \t\tstate.setDepthTest( true );\n    \t\tstate.setDepthWrite( true );\n    \t\tstate.setColorWrite( true );\n\n    \t\t// _gl.finish();\n\n    \t};\n\n    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n    \t\tvar array, index;\n\n    \t\t// allocate the next position in the appropriate array\n\n    \t\tif ( material.transparent ) {\n\n    \t\t\tarray = transparentObjects;\n    \t\t\tindex = ++ transparentObjectsLastIndex;\n\n    \t\t} else {\n\n    \t\t\tarray = opaqueObjects;\n    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\n    \t\t}\n\n    \t\t// recycle existing render item or grow the array\n\n    \t\tvar renderItem = array[ index ];\n\n    \t\tif ( renderItem !== undefined ) {\n\n    \t\t\trenderItem.id = object.id;\n    \t\t\trenderItem.object = object;\n    \t\t\trenderItem.geometry = geometry;\n    \t\t\trenderItem.material = material;\n    \t\t\trenderItem.z = _vector3.z;\n    \t\t\trenderItem.group = group;\n\n    \t\t} else {\n\n    \t\t\trenderItem = {\n    \t\t\t\tid: object.id,\n    \t\t\t\tobject: object,\n    \t\t\t\tgeometry: geometry,\n    \t\t\t\tmaterial: material,\n    \t\t\t\tz: _vector3.z,\n    \t\t\t\tgroup: group\n    \t\t\t};\n\n    \t\t\t// assert( index === array.length );\n    \t\t\tarray.push( renderItem );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Duplicated code (Frustum)\n\n    \tfunction isObjectViewable( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( geometry.boundingSphere === null )\n    \t\t\tgeometry.computeBoundingSphere();\n\n    \t\t_sphere.copy( geometry.boundingSphere ).\n    \t\t\tapplyMatrix4( object.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSpriteViewable( sprite ) {\n\n    \t\t_sphere.center.set( 0, 0, 0 );\n    \t\t_sphere.radius = 0.7071067811865476;\n    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSphereViewable( sphere ) {\n\n    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n    \t\tvar numPlanes = _clipping.numPlanes;\n\n    \t\tif ( numPlanes === 0 ) return true;\n\n    \t\tvar planes = _this.clippingPlanes,\n\n    \t\t\tcenter = sphere.center,\n    \t\t\tnegRad = - sphere.radius,\n    \t\t\ti = 0;\n\n    \t\tdo {\n\n    \t\t\t// out when deeper than radius in the negative halfspace\n    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n    \t\t} while ( ++ i !== numPlanes );\n\n    \t\treturn true;\n\n    \t}\n\n    \tfunction projectObject( object, camera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible ) {\n\n    \t\t\tif ( object.isLight ) {\n\n    \t\t\t\tlights.push( object );\n\n    \t\t\t} else if ( object.isSprite ) {\n\n    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n    \t\t\t\t\tsprites.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( object.isLensFlare ) {\n\n    \t\t\t\tlensFlares.push( object );\n\n    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t}\n\n    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n    \t\t\t\tif ( object.isSkinnedMesh ) {\n\n    \t\t\t\t\tobject.skeleton.update();\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvar geometry = objects.update( object );\n\n    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n    \t\t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera );\n\n    \t\t}\n\n    \t}\n\n    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n    \t\t\tvar renderItem = renderList[ i ];\n\n    \t\t\tvar object = renderItem.object;\n    \t\t\tvar geometry = renderItem.geometry;\n    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n    \t\t\tvar group = renderItem.group;\n\n    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n    \t\t\tif ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tsetMaterial( material );\n\n    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\t\t\t_currentGeometryProgram = '';\n\n    \t\t\t\tobject.render( function ( object ) {\n\n    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n    \t\t\t\t} );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\n    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction initMaterial( material, fog, object ) {\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tvar parameters = programCache.getParameters(\n    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n    \t\tvar code = programCache.getProgramCode( material, parameters );\n\n    \t\tvar program = materialProperties.program;\n    \t\tvar programChange = true;\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\t// new material\n    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n    \t\t} else if ( program.code !== code ) {\n\n    \t\t\t// changed glsl or parameters\n    \t\t\treleaseMaterialProgramReference( material );\n\n    \t\t} else if ( parameters.shaderID !== undefined ) {\n\n    \t\t\t// same glsl and uniform list\n    \t\t\treturn;\n\n    \t\t} else {\n\n    \t\t\t// only rebuild uniform list\n    \t\t\tprogramChange = false;\n\n    \t\t}\n\n    \t\tif ( programChange ) {\n\n    \t\t\tif ( parameters.shaderID ) {\n\n    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n    \t\t\t\t\tvertexShader: shader.vertexShader,\n    \t\t\t\t\tfragmentShader: shader.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t} else {\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: material.uniforms,\n    \t\t\t\t\tvertexShader: material.vertexShader,\n    \t\t\t\t\tfragmentShader: material.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n    \t\t\tmaterialProperties.program = program;\n    \t\t\tmaterial.program = program;\n\n    \t\t}\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( material.morphTargets ) {\n\n    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.morphNormals ) {\n\n    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( ! material.isShaderMaterial &&\n    \t\t     ! material.isRawShaderMaterial ||\n    \t\t       material.clipping === true ) {\n\n    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n    \t\t}\n\n    \t\tmaterialProperties.fog = fog;\n\n    \t\t// store the light setup it was created for\n\n    \t\tmaterialProperties.lightsHash = _lights.hash;\n\n    \t\tif ( material.lights ) {\n\n    \t\t\t// wire up the material to this renderer's lighting state\n\n    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n    \t\t\tuniforms.directionalLights.value = _lights.directional;\n    \t\t\tuniforms.spotLights.value = _lights.spot;\n    \t\t\tuniforms.pointLights.value = _lights.point;\n    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n    \t\t}\n\n    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n    \t\t\tuniformsList =\n    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n    \t\tmaterialProperties.uniformsList = uniformsList;\n    \t\tmaterialProperties.dynamicUniforms =\n    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n    \t}\n\n    \tfunction setMaterial( material ) {\n\n    \t\tmaterial.side === DoubleSide\n    \t\t\t? state.disable( _gl.CULL_FACE )\n    \t\t\t: state.enable( _gl.CULL_FACE );\n\n    \t\tstate.setFlipSided( material.side === BackSide );\n\n    \t\tmaterial.transparent === true\n    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n    \t\t\t: state.setBlending( NoBlending );\n\n    \t\tstate.setDepthFunc( material.depthFunc );\n    \t\tstate.setDepthTest( material.depthTest );\n    \t\tstate.setDepthWrite( material.depthWrite );\n    \t\tstate.setColorWrite( material.colorWrite );\n    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n    \t}\n\n    \tfunction setProgram( camera, fog, material, object ) {\n\n    \t\t_usedTextureUnits = 0;\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tif ( _clippingEnabled ) {\n\n    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n    \t\t\t\tvar useCache =\n    \t\t\t\t\t\tcamera === _currentCamera &&\n    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n    \t\t\t\t// we might want to call this function with some ClippingGroup\n    \t\t\t\t// object instead of the material, once it becomes feasible\n    \t\t\t\t// (#8465, #8379)\n    \t\t\t\t_clipping.setState(\n    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate === false ) {\n\n    \t\t\tif ( materialProperties.program === undefined ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate ) {\n\n    \t\t\tinitMaterial( material, fog, object );\n    \t\t\tmaterial.needsUpdate = false;\n\n    \t\t}\n\n    \t\tvar refreshProgram = false;\n    \t\tvar refreshMaterial = false;\n    \t\tvar refreshLights = false;\n\n    \t\tvar program = materialProperties.program,\n    \t\t\tp_uniforms = program.getUniforms(),\n    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( program.id !== _currentProgram ) {\n\n    \t\t\t_gl.useProgram( program.program );\n    \t\t\t_currentProgram = program.id;\n\n    \t\t\trefreshProgram = true;\n    \t\t\trefreshMaterial = true;\n    \t\t\trefreshLights = true;\n\n    \t\t}\n\n    \t\tif ( material.id !== _currentMaterialId ) {\n\n    \t\t\t_currentMaterialId = material.id;\n\n    \t\t\trefreshMaterial = true;\n\n    \t\t}\n\n    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n    \t\t\t}\n\n\n    \t\t\tif ( camera !== _currentCamera ) {\n\n    \t\t\t\t_currentCamera = camera;\n\n    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n    \t\t\t\t// now, in case this material supports lights - or later, when\n    \t\t\t\t// the next material that does gets activated:\n\n    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n    \t\t\t}\n\n    \t\t\t// load material specific uniforms\n    \t\t\t// (shader material also gets them for the sake of genericity)\n\n    \t\t\tif ( material.isShaderMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.envMap ) {\n\n    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n    \t\t\t\tif ( uCamPos !== undefined ) {\n\n    \t\t\t\t\tuCamPos.setValue( _gl,\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isShaderMaterial ||\n    \t\t\t     material.skinning ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n    \t\t\t}\n\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n    \t\t}\n\n    \t\t// skinning uniforms must be set even if material didn't change\n    \t\t// auto-setting of texture unit for bone texture must go before other textures\n    \t\t// not sure why, but otherwise weird things happen\n\n    \t\tif ( material.skinning ) {\n\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n    \t\t\tvar skeleton = object.skeleton;\n\n    \t\t\tif ( skeleton ) {\n\n    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( refreshMaterial ) {\n\n    \t\t\tif ( material.lights ) {\n\n    \t\t\t\t// the current material requires lighting info\n\n    \t\t\t\t// note: all lighting uniforms are always set correctly\n    \t\t\t\t// they simply reference the renderer's state for their\n    \t\t\t\t// values\n    \t\t\t\t//\n    \t\t\t\t// use the current material's .needsUpdate flags to set\n    \t\t\t\t// the GL state when required\n\n    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n    \t\t\t}\n\n    \t\t\t// refresh uniforms common to several materials\n\n    \t\t\tif ( fog && material.fog ) {\n\n    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isMeshDepthMaterial ) {\n\n    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n    \t\t\t}\n\n    \t\t\t// refresh single material specific uniforms\n\n    \t\t\tif ( material.isLineBasicMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n    \t\t\t} else if ( material.isPointsMaterial ) {\n\n    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n    \t\t\t\tif ( material.displacementMap ) {\n\n    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n    \t\t\t}\n\n    \t\t\tWebGLUniforms.upload(\n    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n    \t\t}\n\n\n    \t\t// common matrices\n\n    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n    \t\t// dynamic uniforms\n\n    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n    \t\tif ( dynUniforms !== null ) {\n\n    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t}\n\n    \t// Uniforms (refresh uniforms objects)\n\n    \tfunction refreshUniformsCommon( uniforms, material ) {\n\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t\tuniforms.diffuse.value = material.color;\n\n    \t\tif ( material.emissive ) {\n\n    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n    \t\t}\n\n    \t\tuniforms.map.value = material.map;\n    \t\tuniforms.specularMap.value = material.specularMap;\n    \t\tuniforms.alphaMap.value = material.alphaMap;\n\n    \t\tif ( material.aoMap ) {\n\n    \t\t\tuniforms.aoMap.value = material.aoMap;\n    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n    \t\t}\n\n    \t\t// uv repeat and offset setting priorities\n    \t\t// 1. color map\n    \t\t// 2. specular map\n    \t\t// 3. normal map\n    \t\t// 4. bump map\n    \t\t// 5. alpha map\n    \t\t// 6. emissive map\n\n    \t\tvar uvScaleMap;\n\n    \t\tif ( material.map ) {\n\n    \t\t\tuvScaleMap = material.map;\n\n    \t\t} else if ( material.specularMap ) {\n\n    \t\t\tuvScaleMap = material.specularMap;\n\n    \t\t} else if ( material.displacementMap ) {\n\n    \t\t\tuvScaleMap = material.displacementMap;\n\n    \t\t} else if ( material.normalMap ) {\n\n    \t\t\tuvScaleMap = material.normalMap;\n\n    \t\t} else if ( material.bumpMap ) {\n\n    \t\t\tuvScaleMap = material.bumpMap;\n\n    \t\t} else if ( material.roughnessMap ) {\n\n    \t\t\tuvScaleMap = material.roughnessMap;\n\n    \t\t} else if ( material.metalnessMap ) {\n\n    \t\t\tuvScaleMap = material.metalnessMap;\n\n    \t\t} else if ( material.alphaMap ) {\n\n    \t\t\tuvScaleMap = material.alphaMap;\n\n    \t\t} else if ( material.emissiveMap ) {\n\n    \t\t\tuvScaleMap = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( uvScaleMap !== undefined ) {\n\n    \t\t\t// backwards compatibility\n    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n    \t\t\t}\n\n    \t\t\tvar offset = uvScaleMap.offset;\n    \t\t\tvar repeat = uvScaleMap.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t\tuniforms.envMap.value = material.envMap;\n\n    \t\t// don't flip CubeTexture envMaps, flip everything else:\n    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n    \t\tuniforms.reflectivity.value = material.reflectivity;\n    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n    \t}\n\n    \tfunction refreshUniformsLine( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t}\n\n    \tfunction refreshUniformsDash( uniforms, material ) {\n\n    \t\tuniforms.dashSize.value = material.dashSize;\n    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n    \t\tuniforms.scale.value = material.scale;\n\n    \t}\n\n    \tfunction refreshUniformsPoints( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n    \t\tuniforms.size.value = material.size * _pixelRatio;\n    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n    \t\tuniforms.map.value = material.map;\n\n    \t\tif ( material.map !== null ) {\n\n    \t\t\tvar offset = material.map.offset;\n    \t\t\tvar repeat = material.map.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsFog( uniforms, fog ) {\n\n    \t\tuniforms.fogColor.value = fog.color;\n\n    \t\tif ( fog.isFog ) {\n\n    \t\t\tuniforms.fogNear.value = fog.near;\n    \t\t\tuniforms.fogFar.value = fog.far;\n\n    \t\t} else if ( fog.isFogExp2 ) {\n\n    \t\t\tuniforms.fogDensity.value = fog.density;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsLambert( uniforms, material ) {\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhong( uniforms, material ) {\n\n    \t\tuniforms.specular.value = material.specular;\n    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsStandard( uniforms, material ) {\n\n    \t\tuniforms.roughness.value = material.roughness;\n    \t\tuniforms.metalness.value = material.metalness;\n\n    \t\tif ( material.roughnessMap ) {\n\n    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n    \t\t}\n\n    \t\tif ( material.metalnessMap ) {\n\n    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n    \t\t}\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t\tif ( material.envMap ) {\n\n    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\n    \t\tuniforms.clearCoat.value = material.clearCoat;\n    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n    \t\trefreshUniformsStandard( uniforms, material );\n\n    \t}\n\n    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\n    \t\tuniforms.directionalLights.needsUpdate = value;\n    \t\tuniforms.pointLights.needsUpdate = value;\n    \t\tuniforms.spotLights.needsUpdate = value;\n    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\n    \t}\n\n    \t// Lighting\n\n    \tfunction setupShadows( lights ) {\n\n    \t\tvar lightShadowsLength = 0;\n\n    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n    \t\t\tvar light = lights[ i ];\n\n    \t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.shadows.length = lightShadowsLength;\n\n    \t}\n\n    \tfunction setupLights( lights, camera ) {\n\n    \t\tvar l, ll, light,\n    \t\tr = 0, g = 0, b = 0,\n    \t\tcolor,\n    \t\tintensity,\n    \t\tdistance,\n    \t\tshadowMap,\n\n    \t\tviewMatrix = camera.matrixWorldInverse,\n\n    \t\tdirectionalLength = 0,\n    \t\tpointLength = 0,\n    \t\tspotLength = 0,\n    \t\themiLength = 0;\n\n    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n    \t\t\tlight = lights[ l ];\n\n    \t\t\tcolor = light.color;\n    \t\t\tintensity = light.intensity;\n    \t\t\tdistance = light.distance;\n\n    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n    \t\t\tif ( light.isAmbientLight ) {\n\n    \t\t\t\tr += color.r * intensity;\n    \t\t\t\tg += color.g * intensity;\n    \t\t\t\tb += color.b * intensity;\n\n    \t\t\t} else if ( light.isDirectionalLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isSpotLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.distance = distance;\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isPointLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.distance = light.distance;\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n    \t\t\t\t}\n\n    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n    \t\t\t\t// equal to inverse of the light's position\n    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isHemisphereLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n    \t\t\t\tuniforms.direction.normalize();\n\n    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.ambient[ 0 ] = r;\n    \t\t_lights.ambient[ 1 ] = g;\n    \t\t_lights.ambient[ 2 ] = b;\n\n    \t\t_lights.directional.length = directionalLength;\n    \t\t_lights.spot.length = spotLength;\n    \t\t_lights.point.length = pointLength;\n    \t\t_lights.hemi.length = hemiLength;\n\n    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n    \t}\n\n    \t// GL state setting\n\n    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n    \t\tstate.setCullFace( cullFace );\n    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n    \t};\n\n    \t// Textures\n\n    \tfunction allocTextureUnit() {\n\n    \t\tvar textureUnit = _usedTextureUnits;\n\n    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n    \t\t}\n\n    \t\t_usedTextureUnits += 1;\n\n    \t\treturn textureUnit;\n\n    \t}\n\n    \tthis.allocTextureUnit = allocTextureUnit;\n\n    \t// this.setTexture2D = setTexture2D;\n    \tthis.setTexture2D = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\t// backwards compatibility: peel texture.texture\n    \t\treturn function setTexture2D( texture, slot ) {\n\n    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTexture = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTexture( texture, slot ) {\n\n    \t\t\tif ( ! warned ) {\n\n    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n    \t\t\t\twarned = true;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTextureCube = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTextureCube( texture, slot ) {\n\n    \t\t\t// backwards compatibility: peel texture.texture\n    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    \t\t\t// TODO: unify these code paths\n    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n    \t\t\t\t// CompressedTexture can have Array in image :/\n\n    \t\t\t\t// this function alone should take care of cube textures\n    \t\t\t\ttextures.setTextureCube( texture, slot );\n\n    \t\t\t} else {\n\n    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.getCurrentRenderTarget = function() {\n\n    \t\treturn _currentRenderTarget;\n\n    \t};\n\n    \tthis.setRenderTarget = function ( renderTarget ) {\n\n    \t\t_currentRenderTarget = renderTarget;\n\n    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n    \t\t\ttextures.setupRenderTarget( renderTarget );\n\n    \t\t}\n\n    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n    \t\tvar framebuffer;\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n    \t\t\t} else {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n    \t\t\t}\n\n    \t\t\t_currentScissor.copy( renderTarget.scissor );\n    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\n    \t\t} else {\n\n    \t\t\tframebuffer = null;\n\n    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n    \t\t\t_currentScissorTest = _scissorTest;\n\n    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n    \t\t}\n\n    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\n    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t\t_currentFramebuffer = framebuffer;\n\n    \t\t}\n\n    \t\tstate.scissor( _currentScissor );\n    \t\tstate.setScissorTest( _currentScissorTest );\n\n    \t\tstate.viewport( _currentViewport );\n\n    \t\tif ( isCube ) {\n\n    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n    \t\t}\n\n    \t};\n\n    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n    \t\tif ( framebuffer ) {\n\n    \t\t\tvar restore = false;\n\n    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\t\t\trestore = true;\n\n    \t\t\t}\n\n    \t\t\ttry {\n\n    \t\t\t\tvar texture = renderTarget.texture;\n    \t\t\t\tvar textureFormat = texture.format;\n    \t\t\t\tvar textureType = texture.type;\n\n    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n    \t\t\t\t}\n\n    \t\t\t} finally {\n\n    \t\t\t\tif ( restore ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \t// Map three.js constants to WebGL constants\n\n    \tfunction paramThreeToGL( p ) {\n\n    \t\tvar extension;\n\n    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n    \t\tif ( p === ByteType ) return _gl.BYTE;\n    \t\tif ( p === ShortType ) return _gl.SHORT;\n    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n    \t\tif ( p === IntType ) return _gl.INT;\n    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\n    \t\textension = extensions.get( 'OES_texture_half_float' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n    \t\t}\n\n    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n    \t\tif ( p === RGBFormat ) return _gl.RGB;\n    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n    \t\tif ( p === OneFactor ) return _gl.ONE;\n    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n    \t\tif ( extension !== null ){\n\n    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n    \t\t}\n\n    \t\treturn 0;\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function FogExp2 ( color, density ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n    }\n\n    FogExp2.prototype.isFogExp2 = true;\n\n    FogExp2.prototype.clone = function () {\n\n    \treturn new FogExp2( this.color.getHex(), this.density );\n\n    };\n\n    FogExp2.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'FogExp2',\n    \t\tcolor: this.color.getHex(),\n    \t\tdensity: this.density\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Fog ( color, near, far ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n\n    \tthis.near = ( near !== undefined ) ? near : 1;\n    \tthis.far = ( far !== undefined ) ? far : 1000;\n\n    }\n\n    Fog.prototype.isFog = true;\n\n    Fog.prototype.clone = function () {\n\n    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\n    };\n\n    Fog.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'Fog',\n    \t\tcolor: this.color.getHex(),\n    \t\tnear: this.near,\n    \t\tfar: this.far\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Scene () {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Scene';\n\n    \tthis.background = null;\n    \tthis.fog = null;\n    \tthis.overrideMaterial = null;\n\n    \tthis.autoUpdate = true; // checked by the renderer\n\n    }\n\n    Scene.prototype = Object.create( Object3D.prototype );\n\n    Scene.prototype.constructor = Scene;\n\n    Scene.prototype.copy = function ( source, recursive ) {\n\n    \tObject3D.prototype.copy.call( this, source, recursive );\n\n    \tif ( source.background !== null ) this.background = source.background.clone();\n    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n    \tthis.autoUpdate = source.autoUpdate;\n    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    \treturn this;\n\n    };\n\n    Scene.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlare( texture, size, distance, blending, color ) {\n\n    \tObject3D.call( this );\n\n    \tthis.lensFlares = [];\n\n    \tthis.positionScreen = new Vector3();\n    \tthis.customUpdateCallback = undefined;\n\n    \tif ( texture !== undefined ) {\n\n    \t\tthis.add( texture, size, distance, blending, color );\n\n    \t}\n\n    }\n\n    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LensFlare,\n\n    \tisLensFlare: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.positionScreen.copy( source.positionScreen );\n    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n    \t\tif ( size === undefined ) size = - 1;\n    \t\tif ( distance === undefined ) distance = 0;\n    \t\tif ( opacity === undefined ) opacity = 1;\n    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n    \t\tif ( blending === undefined ) blending = NormalBlending;\n\n    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n    \t\tthis.lensFlares.push( {\n    \t\t\ttexture: texture,\t// THREE.Texture\n    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n    \t\t\tscale: 1, \t\t// scale\n    \t\t\trotation: 0, \t\t// rotation\n    \t\t\topacity: opacity,\t// opacity\n    \t\t\tcolor: color,\t\t// color\n    \t\t\tblending: blending\t// blending\n    \t\t} );\n\n    \t},\n\n    \t/*\n    \t * Update lens flares update positions on all flares based on the screen position\n    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n    \t */\n\n    \tupdateLensFlares: function () {\n\n    \t\tvar f, fl = this.lensFlares.length;\n    \t\tvar flare;\n    \t\tvar vecX = - this.positionScreen.x * 2;\n    \t\tvar vecY = - this.positionScreen.y * 2;\n\n    \t\tfor ( f = 0; f < fl; f ++ ) {\n\n    \t\t\tflare = this.lensFlares[ f ];\n\n    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *\tuvOffset: new THREE.Vector2(),\n     *\tuvScale: new THREE.Vector2()\n     * }\n     */\n\n    function SpriteMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'SpriteMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n    \tthis.map = null;\n\n    \tthis.rotation = 0;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    SpriteMaterial.prototype = Object.create( Material.prototype );\n    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\n    SpriteMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.map = source.map;\n\n    \tthis.rotation = source.rotation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Sprite( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Sprite';\n\n    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n    }\n\n    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Sprite,\n\n    \tisSprite: true,\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n    \t\t\tif ( distanceSq > guessSizeSq ) {\n\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t\tintersects.push( {\n\n    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n    \t\t\t\tpoint: this.position,\n    \t\t\t\tface: null,\n    \t\t\t\tobject: this\n\n    \t\t\t} );\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LOD() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'LOD';\n\n    \tObject.defineProperties( this, {\n    \t\tlevels: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: []\n    \t\t}\n    \t} );\n\n    }\n\n\n    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LOD,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source, false );\n\n    \t\tvar levels = source.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \taddLevel: function ( object, distance ) {\n\n    \t\tif ( distance === undefined ) distance = 0;\n\n    \t\tdistance = Math.abs( distance );\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\tif ( distance < levels[ l ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n    \t\tthis.add( object );\n\n    \t},\n\n    \tgetObjectForDistance: function ( distance ) {\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tif ( distance < levels[ i ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn levels[ i - 1 ].object;\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n    \t\t};\n\n    \t}() ),\n\n    \tupdate: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar levels = this.levels;\n\n    \t\t\tif ( levels.length > 1 ) {\n\n    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\n    \t\t\t\tlevels[ 0 ].object.visible = true;\n\n    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( ; i < l; i ++ ) {\n\n    \t\t\t\t\tlevels[ i ].object.visible = false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.levels = [];\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tdata.object.levels.push( {\n    \t\t\t\tobject: level.object.uuid,\n    \t\t\t\tdistance: level.distance\n    \t\t\t} );\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { data: data, width: width, height: height };\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps  = false;\n\n    }\n\n    DataTexture.prototype = Object.create( Texture.prototype );\n    DataTexture.prototype.constructor = DataTexture;\n\n    DataTexture.prototype.isDataTexture = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author michael guerrero / http://realitymeltdown.com\n     * @author ikerr / http://verold.com\n     */\n\n    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\n    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    \tthis.identityMatrix = new Matrix4();\n\n    \t// copy the bone array\n\n    \tbones = bones || [];\n\n    \tthis.bones = bones.slice( 0 );\n\n    \t// create a bone texture or an array of floats\n\n    \tif ( this.useVertexTexture ) {\n\n    \t\t// layout (1 matrix = 4 pixels)\n    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n    \t\tsize = Math.max( size, 4 );\n\n    \t\tthis.boneTextureWidth = size;\n    \t\tthis.boneTextureHeight = size;\n\n    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n    \t} else {\n\n    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n    \t}\n\n    \t// use the supplied bone inverses or calculate the inverses\n\n    \tif ( boneInverses === undefined ) {\n\n    \t\tthis.calculateInverses();\n\n    \t} else {\n\n    \t\tif ( this.bones.length === boneInverses.length ) {\n\n    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n    \t\t\tthis.boneInverses = [];\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    }\n\n    Object.assign( Skeleton.prototype, {\n\n    \tcalculateInverses: function () {\n\n    \t\tthis.boneInverses = [];\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tvar inverse = new Matrix4();\n\n    \t\t\tif ( this.bones[ b ] ) {\n\n    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n    \t\t\t}\n\n    \t\t\tthis.boneInverses.push( inverse );\n\n    \t\t}\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tvar bone;\n\n    \t\t// recover the bind-time world matrices\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// compute the local matrices, positions, rotations and scales\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n    \t\t\t\t}\n\n    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdate: ( function () {\n\n    \t\tvar offsetMatrix = new Matrix4();\n\n    \t\treturn function update() {\n\n    \t\t\t// flatten bone matrices to array\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\t// compute the offset between the current and the original transform\n\n    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n    \t\t\t}\n\n    \t\t\tif ( this.useVertexTexture ) {\n\n    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t} )(),\n\n    \tclone: function () {\n\n    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function Bone( skin ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Bone';\n\n    \tthis.skin = skin;\n\n    }\n\n    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Bone,\n\n    \tisBone: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.skin = source.skin;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.type = 'SkinnedMesh';\n\n    \tthis.bindMode = \"attached\";\n    \tthis.bindMatrix = new Matrix4();\n    \tthis.bindMatrixInverse = new Matrix4();\n\n    \t// init bones\n\n    \t// TODO: remove bone creation as there is no reason (other than\n    \t// convenience) for THREE.SkinnedMesh to do this.\n\n    \tvar bones = [];\n\n    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n    \t\tvar bone, gbone;\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tbone = new Bone( this );\n    \t\t\tbones.push( bone );\n\n    \t\t\tbone.name = gbone.name;\n    \t\t\tbone.position.fromArray( gbone.pos );\n    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n    \t\t}\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.add( bones[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tthis.normalizeSkinWeights();\n\n    \tthis.updateMatrixWorld( true );\n    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n    }\n\n\n    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n    \tconstructor: SkinnedMesh,\n\n    \tisSkinnedMesh: true,\n\n    \tbind: function( skeleton, bindMatrix ) {\n\n    \t\tthis.skeleton = skeleton;\n\n    \t\tif ( bindMatrix === undefined ) {\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.skeleton.calculateInverses();\n\n    \t\t\tbindMatrix = this.matrixWorld;\n\n    \t\t}\n\n    \t\tthis.bindMatrix.copy( bindMatrix );\n    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tthis.skeleton.pose();\n\n    \t},\n\n    \tnormalizeSkinWeights: function () {\n\n    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tsw.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n    \t\t\tvar vec = new Vector4();\n\n    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n    \t\t\t\tvec.x = skinWeight.getX( i );\n    \t\t\t\tvec.y = skinWeight.getY( i );\n    \t\t\t\tvec.z = skinWeight.getZ( i );\n    \t\t\t\tvec.w = skinWeight.getW( i );\n\n    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tvec.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrixWorld: function( force ) {\n\n    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n    \t\tif ( this.bindMode === \"attached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n    \t\t} else if ( this.bindMode === \"detached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function() {\n\n    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *  linecap: \"round\",\n     *  linejoin: \"round\"\n     * }\n     */\n\n    function LineBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n    \tthis.linecap = 'round';\n    \tthis.linejoin = 'round';\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineBasicMaterial.prototype = Object.create( Material.prototype );\n    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n    LineBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n    \tthis.linecap = source.linecap;\n    \tthis.linejoin = source.linejoin;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Line( geometry, material, mode ) {\n\n    \tif ( mode === 1 ) {\n\n    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n    \t\treturn new LineSegments( geometry, material );\n\n    \t}\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Line';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Line,\n\n    \tisLine: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar precision = raycaster.linePrecision;\n    \t\t\tvar precisionSq = precision * precision;\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar vStart = new Vector3();\n    \t\t\tvar vEnd = new Vector3();\n    \t\t\tvar interSegment = new Vector3();\n    \t\t\tvar interRay = new Vector3();\n    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar nbVertices = vertices.length;\n\n    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LineSegments( geometry, material ) {\n\n    \tLine.call( this, geometry, material );\n\n    \tthis.type = 'LineSegments';\n\n    }\n\n    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n    \tconstructor: LineSegments,\n\n    \tisLineSegments: true\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  size: <float>,\n     *  sizeAttenuation: <bool>\n     * }\n     */\n\n    function PointsMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'PointsMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.map = null;\n\n    \tthis.size = 1;\n    \tthis.sizeAttenuation = true;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    PointsMaterial.prototype = Object.create( Material.prototype );\n    PointsMaterial.prototype.constructor = PointsMaterial;\n\n    PointsMaterial.prototype.isPointsMaterial = true;\n\n    PointsMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.size = source.size;\n    \tthis.sizeAttenuation = source.sizeAttenuation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Points( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Points';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Points,\n\n    \tisPoints: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar object = this;\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n    \t\t\tvar position = new Vector3();\n\n    \t\t\tfunction testPoint( point, index ) {\n\n    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n    \t\t\t\t\t\tindex: index,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tobject: object\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n\n    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, a );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, i );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Group() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Group';\n\n    }\n\n    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Group\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.generateMipmaps = false;\n\n    \tvar scope = this;\n\n    \tfunction update() {\n\n    \t\trequestAnimationFrame( update );\n\n    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n    \t\t\tscope.needsUpdate = true;\n\n    \t\t}\n\n    \t}\n\n    \tupdate();\n\n    }\n\n    VideoTexture.prototype = Object.create( Texture.prototype );\n    VideoTexture.prototype.constructor = VideoTexture;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { width: width, height: height };\n    \tthis.mipmaps = mipmaps;\n\n    \t// no flipping for cube textures\n    \t// (also flipping doesn't work for compressed textures )\n\n    \tthis.flipY = false;\n\n    \t// can't generate mipmaps for compressed textures\n    \t// mips must be embedded in DDS files\n\n    \tthis.generateMipmaps = false;\n\n    }\n\n    CompressedTexture.prototype = Object.create( Texture.prototype );\n    CompressedTexture.prototype.constructor = CompressedTexture;\n\n    CompressedTexture.prototype.isCompressedTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.needsUpdate = true;\n\n    }\n\n    CanvasTexture.prototype = Object.create( Texture.prototype );\n    CanvasTexture.prototype.constructor = CanvasTexture;\n\n    /**\n     * @author Matt DesLauriers / @mattdesl\n     * @author atix / arthursilber.de\n     */\n\n    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n    \tformat = format !== undefined ? format : DepthFormat;\n\n    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n    \t}\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.image = { width: width, height: height };\n\n    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps\t= false;\n\n    }\n\n    DepthTexture.prototype = Object.create( Texture.prototype );\n    DepthTexture.prototype.constructor = DepthTexture;\n    DepthTexture.prototype.isDepthTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WireframeGeometry( geometry ) {\n\n    \tBufferGeometry.call( this );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faces = geometry.faces;\n    \t\tvar numEdges = 0;\n\n    \t\t// allocate maximal size\n    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\tvar key = edge.toString();\n\n    \t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n    \t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tif ( geometry.index !== null ) {\n\n    \t\t\t// Indexed BufferGeometry\n\n    \t\t\tvar indices = geometry.index.array;\n    \t\t\tvar vertices = geometry.attributes.position;\n    \t\t\tvar groups = geometry.groups;\n    \t\t\tvar numEdges = 0;\n\n    \t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\n    \t\t\t}\n\n    \t\t\t// allocate maximal size\n    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n    \t\t\t\tvar group = groups[ o ];\n\n    \t\t\t\tvar start = group.start;\n    \t\t\t\tvar count = group.count;\n\n    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n    \t\t\t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\t\t\tvar key = edge.toString();\n\n    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t} else {\n\n    \t\t\t// non-indexed BufferGeometry\n\n    \t\t\tvar vertices = geometry.attributes.position.array;\n    \t\t\tvar numEdges = vertices.length / 3;\n    \t\t\tvar numTris = numEdges / 3;\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\n    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n    /**\n     * @author zz85 / https://github.com/zz85\n     * Parametric Surfaces Geometry\n     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n     *\n     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n     *\n     */\n\n    function ParametricGeometry( func, slices, stacks ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ParametricGeometry';\n\n    \tthis.parameters = {\n    \t\tfunc: func,\n    \t\tslices: slices,\n    \t\tstacks: stacks\n    \t};\n\n    \tvar verts = this.vertices;\n    \tvar faces = this.faces;\n    \tvar uvs = this.faceVertexUvs[ 0 ];\n\n    \tvar i, j, p;\n    \tvar u, v;\n\n    \tvar sliceCount = slices + 1;\n\n    \tfor ( i = 0; i <= stacks; i ++ ) {\n\n    \t\tv = i / stacks;\n\n    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\n    \t\t\tu = j / slices;\n\n    \t\t\tp = func( u, v );\n    \t\t\tverts.push( p );\n\n    \t\t}\n\n    \t}\n\n    \tvar a, b, c, d;\n    \tvar uva, uvb, uvc, uvd;\n\n    \tfor ( i = 0; i < stacks; i ++ ) {\n\n    \t\tfor ( j = 0; j < slices; j ++ ) {\n\n    \t\t\ta = i * sliceCount + j;\n    \t\t\tb = i * sliceCount + j + 1;\n    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n    \t\t\td = ( i + 1 ) * sliceCount + j;\n\n    \t\t\tuva = new Vector2( j / slices, i / stacks );\n    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\n    \t\t\tfaces.push( new Face3( a, b, d ) );\n    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n    \t\t\tfaces.push( new Face3( b, c, d ) );\n    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \t// console.log(this);\n\n    \t// magic bullet\n    \t// var diff = this.mergeVertices();\n    \t// console.log('removed ', diff, ' vertices by merging');\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n    /**\n     * @author clockworkgeek / https://github.com/clockworkgeek\n     * @author timothypratley / https://github.com/timothypratley\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PolyhedronGeometry';\n\n    \tthis.parameters = {\n    \t\tvertices: vertices,\n    \t\tindices: indices,\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    \tradius = radius || 1;\n    \tdetail = detail || 0;\n\n    \tvar that = this;\n\n    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n    \t}\n\n    \tvar p = this.vertices;\n\n    \tvar faces = [];\n\n    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n    \t\tvar v1 = p[ indices[ i ] ];\n    \t\tvar v2 = p[ indices[ i + 1 ] ];\n    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\n    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    \t}\n\n    \tvar centroid = new Vector3();\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tsubdivide( faces[ i ], detail );\n\n    \t}\n\n\n    \t// Handle case when face straddles the seam\n\n    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\tvar x0 = uvs[ 0 ].x;\n    \t\tvar x1 = uvs[ 1 ].x;\n    \t\tvar x2 = uvs[ 2 ].x;\n\n    \t\tvar max = Math.max( x0, x1, x2 );\n    \t\tvar min = Math.min( x0, x1, x2 );\n\n    \t\tif ( max > 0.9 && min < 0.1 ) {\n\n    \t\t\t// 0.9 is somewhat arbitrary\n\n    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n    \t\t}\n\n    \t}\n\n\n    \t// Apply radius\n\n    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\n    \t}\n\n\n    \t// Merge vertices\n\n    \tthis.mergeVertices();\n\n    \tthis.computeFaceNormals();\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\n    \t// Project vector onto sphere's surface\n\n    \tfunction prepare( vector ) {\n\n    \t\tvar vertex = vector.normalize().clone();\n    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n    \t\tvertex.uv = new Vector2( u, 1 - v );\n\n    \t\treturn vertex;\n\n    \t}\n\n\n    \t// Approximate a curved face with recursively sub-divided triangles.\n\n    \tfunction make( v1, v2, v3 ) {\n\n    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n    \t\tthat.faces.push( face );\n\n    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n    \t\tvar azi = azimuth( centroid );\n\n    \t\tthat.faceVertexUvs[ 0 ].push( [\n    \t\t\tcorrectUV( v1.uv, v1, azi ),\n    \t\t\tcorrectUV( v2.uv, v2, azi ),\n    \t\t\tcorrectUV( v3.uv, v3, azi )\n    \t\t] );\n\n    \t}\n\n\n    \t// Analytically subdivide a face to the required detail level.\n\n    \tfunction subdivide( face, detail ) {\n\n    \t\tvar cols = Math.pow( 2, detail );\n    \t\tvar a = prepare( that.vertices[ face.a ] );\n    \t\tvar b = prepare( that.vertices[ face.b ] );\n    \t\tvar c = prepare( that.vertices[ face.c ] );\n    \t\tvar v = [];\n\n    \t\t// Construct all of the vertices for this subdivision.\n\n    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n    \t\t\tv[ i ] = [];\n\n    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n    \t\t\tvar rows = cols - i;\n\n    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n    \t\t\t\tif ( j === 0 && i === cols ) {\n\n    \t\t\t\t\tv[ i ][ j ] = aj;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Construct all of the faces.\n\n    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n    \t\t\t\tvar k = Math.floor( j / 2 );\n\n    \t\t\t\tif ( j % 2 === 0 ) {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ],\n    \t\t\t\t\t\tv[ i ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\n    \tfunction azimuth( vector ) {\n\n    \t\treturn Math.atan2( vector.z, - vector.x );\n\n    \t}\n\n\n    \t// Angle above the XZ plane.\n\n    \tfunction inclination( vector ) {\n\n    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    \t}\n\n\n    \t// Texture fixing helper. Spheres have some odd behaviours.\n\n    \tfunction correctUV( uv, vector, azimuth ) {\n\n    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n    \t\treturn uv.clone();\n\n    \t}\n\n    }\n\n    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function TetrahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'TetrahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function OctahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'OctahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function IcosahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    \tvar vertices = [\n    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n    \t];\n\n    \tvar indices = [\n    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'IcosahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n    /**\n     * @author Abe Pazos / https://hamoid.com\n     */\n\n    function DodecahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    \tvar r = 1 / t;\n\n    \tvar vertices = [\n\n    \t\t// (±1, ±1, ±1)\n    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n    \t\t- 1,  1, - 1,    - 1,  1,  1,\n    \t\t 1, - 1, - 1,     1, - 1,  1,\n    \t\t 1,  1, - 1,     1,  1,  1,\n\n    \t\t// (0, ±1/φ, ±φ)\n    \t\t 0, - r, - t,     0, - r,  t,\n    \t\t 0,  r, - t,     0,  r,  t,\n\n    \t\t// (±1/φ, ±φ, 0)\n    \t\t- r, - t,  0,    - r,  t,  0,\n    \t\t r, - t,  0,     r,  t,  0,\n\n    \t\t// (±φ, 0, ±1/φ)\n    \t\t- t,  0, - r,     t,  0, - r,\n    \t\t- t,  0,  r,     t,  0,  r\n    \t];\n\n    \tvar indices = [\n    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'DodecahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n    /**\n     * @author WestLangley / https://github.com/WestLangley\n     * @author zz85 / https://github.com/zz85\n     * @author miningold / https://github.com/miningold\n     * @author jonobr1 / https://github.com/jonobr1\n     *\n     * Modified from the TorusKnotGeometry by @oosmoxiecode\n     *\n     * Creates a tube which extrudes along a 3d spline\n     *\n     * Uses parallel transport frames as described in\n     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n     */\n\n    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TubeGeometry';\n\n    \tthis.parameters = {\n    \t\tpath: path,\n    \t\tsegments: segments,\n    \t\tradius: radius,\n    \t\tradialSegments: radialSegments,\n    \t\tclosed: closed,\n    \t\ttaper: taper\n    \t};\n\n    \tsegments = segments || 64;\n    \tradius = radius || 1;\n    \tradialSegments = radialSegments || 8;\n    \tclosed = closed || false;\n    \ttaper = taper || TubeGeometry.NoTaper;\n\n    \tvar grid = [];\n\n    \tvar scope = this,\n\n    \t\ttangent,\n    \t\tnormal,\n    \t\tbinormal,\n\n    \t\tnumpoints = segments + 1,\n\n    \t\tu, v, r,\n\n    \t\tcx, cy,\n    \t\tpos, pos2 = new Vector3(),\n    \t\ti, j,\n    \t\tip, jp,\n    \t\ta, b, c, d,\n    \t\tuva, uvb, uvc, uvd;\n\n    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n    \t\ttangents = frames.tangents,\n    \t\tnormals = frames.normals,\n    \t\tbinormals = frames.binormals;\n\n    \t// proxy internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \tfunction vert( x, y, z ) {\n\n    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\n    \t}\n\n    \t// construct the grid\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tgrid[ i ] = [];\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\tpos = path.getPointAt( u );\n\n    \t\ttangent = tangents[ i ];\n    \t\tnormal = normals[ i ];\n    \t\tbinormal = binormals[ i ];\n\n    \t\tr = radius * taper( u );\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\n    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n    \t\t\tcy = r * Math.sin( v );\n\n    \t\t\tpos2.copy( pos );\n    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n    \t\t}\n\n    \t}\n\n\n    \t// construct the mesh\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n    \t\t\tjp = ( j + 1 ) % radialSegments;\n\n    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n    \t\t\tb = grid[ ip ][ j ];\n    \t\t\tc = grid[ ip ][ jp ];\n    \t\t\td = grid[ i ][ jp ];\n\n    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    TubeGeometry.prototype = Object.create( Geometry.prototype );\n    TubeGeometry.prototype.constructor = TubeGeometry;\n\n    TubeGeometry.NoTaper = function ( u ) {\n\n    \treturn 1;\n\n    };\n\n    TubeGeometry.SinusoidalTaper = function ( u ) {\n\n    \treturn Math.sin( Math.PI * u );\n\n    };\n\n    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n    \tvar\tnormal = new Vector3(),\n\n    \t\ttangents = [],\n    \t\tnormals = [],\n    \t\tbinormals = [],\n\n    \t\tvec = new Vector3(),\n    \t\tmat = new Matrix4(),\n\n    \t\tnumpoints = segments + 1,\n    \t\ttheta,\n    \t\tsmallest,\n\n    \t\ttx, ty, tz,\n    \t\ti, u;\n\n\n    \t// expose internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \t// compute the tangent vectors for each segment on the path\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\ttangents[ i ] = path.getTangentAt( u );\n    \t\ttangents[ i ].normalize();\n\n    \t}\n\n    \tinitialNormal3();\n\n    \t/*\n    \tfunction initialNormal1(lastBinormal) {\n    \t\t// fixed start binormal. Has dangers of 0 vectors\n    \t\tnormals[ 0 ] = new THREE.Vector3();\n    \t\tbinormals[ 0 ] = new THREE.Vector3();\n    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n\n    \tfunction initialNormal2() {\n\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \t\tvar t2 = path.getTangentAt( epsilon );\n\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    \t}\n    \t*/\n\n    \tfunction initialNormal3() {\n\n    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n    \t\t// and in the direction of the smallest tangent xyz component\n\n    \t\tnormals[ 0 ] = new Vector3();\n    \t\tbinormals[ 0 ] = new Vector3();\n    \t\tsmallest = Number.MAX_VALUE;\n    \t\ttx = Math.abs( tangents[ 0 ].x );\n    \t\tty = Math.abs( tangents[ 0 ].y );\n    \t\ttz = Math.abs( tangents[ 0 ].z );\n\n    \t\tif ( tx <= smallest ) {\n\n    \t\t\tsmallest = tx;\n    \t\t\tnormal.set( 1, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( ty <= smallest ) {\n\n    \t\t\tsmallest = ty;\n    \t\t\tnormal.set( 0, 1, 0 );\n\n    \t\t}\n\n    \t\tif ( tz <= smallest ) {\n\n    \t\t\tnormal.set( 0, 0, 1 );\n\n    \t\t}\n\n    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t}\n\n\n    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    \tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n    \t\tif ( vec.length() > Number.EPSILON ) {\n\n    \t\t\tvec.normalize();\n\n    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n    \t\t}\n\n    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t}\n\n\n    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    \tif ( closed ) {\n\n    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n    \t\ttheta /= ( numpoints - 1 );\n\n    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n    \t\t\ttheta = - theta;\n\n    \t\t}\n\n    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\t\t// twist a little...\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     *\n     * see: http://www.blackpawn.com/texts/pqtorus/\n     */\n    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusKnotBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \tp = p || 2;\n    \tq = q || 3;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar i, j, index = 0, indexOffset = 0;\n\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n    \tvar uv = new Vector2();\n\n    \tvar P1 = new Vector3();\n    \tvar P2 = new Vector3();\n\n    \tvar B = new Vector3();\n    \tvar T = new Vector3();\n    \tvar N = new Vector3();\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n    \t\t// calculate orthonormal basis\n\n    \t\tT.subVectors( P2, P1 );\n    \t\tN.addVectors( P2, P1 );\n    \t\tB.crossVectors( T, N );\n    \t\tN.crossVectors( B, T );\n\n    \t\t// normalize B, N. T can be ignored, we don't use it\n\n    \t\tB.normalize();\n    \t\tN.normalize();\n\n    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n    \t\t\tvar cx = - tube * Math.cos( v );\n    \t\t\tvar cy = tube * Math.sin( v );\n\n    \t\t\t// now calculate the final vertex position.\n    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / tubularSegments;\n    \t\t\tuv.y = j / radialSegments;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// this function calculates the current position on the torus curve\n\n    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n    \t\tvar cu = Math.cos( u );\n    \t\tvar su = Math.sin( u );\n    \t\tvar quOverP = q / p * u;\n    \t\tvar cs = Math.cos( quOverP );\n\n    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n    \t}\n\n    }\n\n    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     */\n\n    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusKnotGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n    \tthis.mergeVertices();\n\n    }\n\n    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n    \tarc = arc || Math.PI * 2;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n\n    \t// helper variables\n    \tvar center = new Vector3();\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n    \t\t\tvar u = i / tubularSegments * arc;\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n    \t\t\tvertex.z = tube * Math.sin( v );\n\n    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n    \t\t\t// this vector is used to calculate the normal\n    \t\t\tcenter.x = radius * Math.cos( u );\n    \t\t\tcenter.y = radius * Math.sin( u );\n\n    \t\t\t// normal\n    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\n    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n    \t\t\t// uv\n    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n    \t\t\t// update offsets\n    \t\t\tvertexBufferOffset += 3;\n    \t\t\tuvBufferOffset += 2;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n    \t\t\t// face one\n    \t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t// face two\n    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t// update offset\n    \t\t\tindexBufferOffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n     */\n\n    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n    }\n\n    TorusGeometry.prototype = Object.create( Geometry.prototype );\n    TorusGeometry.prototype.constructor = TorusGeometry;\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.ShapeUtils = {\n\n    \t// calculate area of the contour polygon\n\n    \tarea: function ( contour ) {\n\n    \t\tvar n = contour.length;\n    \t\tvar a = 0.0;\n\n    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n    \t\t}\n\n    \t\treturn a * 0.5;\n\n    \t},\n\n    \ttriangulate: ( function () {\n\n    \t\t/**\n    \t\t * This code is a quick port of code written in C++ which was submitted to\n    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n    \t\t * See original code and more information here:\n    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n    \t\t *\n    \t\t * ported to actionscript by Zevan Rosser\n    \t\t * www.actionsnippet.com\n    \t\t *\n    \t\t * ported to javascript by Joshua Koo\n    \t\t * http://www.lab4games.net/zz85/blog\n    \t\t *\n    \t\t */\n\n    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\n    \t\t\tvar p;\n    \t\t\tvar ax, ay, bx, by;\n    \t\t\tvar cx, cy, px, py;\n\n    \t\t\tax = contour[ verts[ u ] ].x;\n    \t\t\tay = contour[ verts[ u ] ].y;\n\n    \t\t\tbx = contour[ verts[ v ] ].x;\n    \t\t\tby = contour[ verts[ v ] ].y;\n\n    \t\t\tcx = contour[ verts[ w ] ].x;\n    \t\t\tcy = contour[ verts[ w ] ].y;\n\n    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n    \t\t\tvar aX, aY, bX, bY, cX, cY;\n    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n    \t\t\taX = cx - bx;  aY = cy - by;\n    \t\t\tbX = ax - cx;  bY = ay - cy;\n    \t\t\tcX = bx - ax;  cY = by - ay;\n\n    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\n    \t\t\t\tpx = contour[ verts[ p ] ].x;\n    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\n    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n    \t\t\t\tapx = px - ax;  apy = py - ay;\n    \t\t\t\tbpx = px - bx;  bpy = py - by;\n    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n    \t\t\t\t// see if p is inside triangle abc\n\n    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// takes in an contour array and returns\n\n    \t\treturn function triangulate( contour, indices ) {\n\n    \t\t\tvar n = contour.length;\n\n    \t\t\tif ( n < 3 ) return null;\n\n    \t\t\tvar result = [],\n    \t\t\t\tverts = [],\n    \t\t\t\tvertIndices = [];\n\n    \t\t\t/* we want a counter-clockwise polygon in verts */\n\n    \t\t\tvar u, v, w;\n\n    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n    \t\t\t}\n\n    \t\t\tvar nv = n;\n\n    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n    \t\t\tvar count = 2 * nv;   /* error detection */\n\n    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\n    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n    \t\t\t\t\t//return null;\n    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n    \t\t\t\t\tif ( indices ) return vertIndices;\n    \t\t\t\t\treturn result;\n\n    \t\t\t\t}\n\n    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n    \t\t\t\t\tvar a, b, c, s, t;\n\n    \t\t\t\t\t/* true names of the vertices */\n\n    \t\t\t\t\ta = verts[ u ];\n    \t\t\t\t\tb = verts[ v ];\n    \t\t\t\t\tc = verts[ w ];\n\n    \t\t\t\t\t/* output Triangle */\n\n    \t\t\t\t\tresult.push( [ contour[ a ],\n    \t\t\t\t\t\tcontour[ b ],\n    \t\t\t\t\t\tcontour[ c ] ] );\n\n\n    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n    \t\t\t\t\t/* remove v from the remaining polygon */\n\n    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tnv --;\n\n    \t\t\t\t\t/* reset error detection counter */\n\n    \t\t\t\t\tcount = 2 * nv;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( indices ) return vertIndices;\n    \t\t\treturn result;\n\n    \t\t}\n\n    \t} )(),\n\n    \ttriangulateShape: function ( contour, holes ) {\n\n    \t\tfunction removeDupEndPts(points) {\n\n    \t\t\tvar l = points.length;\n\n    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\t\tpoints.pop();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tremoveDupEndPts( contour );\n    \t\tholes.forEach( removeDupEndPts );\n\n    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n    \t\t\t// inOtherPt needs to be collinear to the inSegment\n    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n    \t\t\t\t// not parallel\n\n    \t\t\t\tvar perpSeg2;\n    \t\t\t\tif ( limit > 0 ) {\n\n    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n    \t\t\t\t}\n\n    \t\t\t\t// i.e. to reduce rounding errors\n    \t\t\t\t// intersection at endpoint of segment#1?\n    \t\t\t\tif ( perpSeg2 === 0 ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\tif ( perpSeg2 === limit ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\n    \t\t\t\t}\n    \t\t\t\t// intersection at endpoint of segment#2?\n    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n    \t\t\t\t// return real intersection point\n    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// parallel or collinear\n    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n    \t\t\t\t// they are collinear or degenerate\n    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n    \t\t\t\t// both segments are points\n    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n    \t\t\t\t}\n    \t\t\t\t// segment#1  is a single point\n    \t\t\t\tif ( seg1Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\t// segment#2  is a single point\n    \t\t\t\tif ( seg2Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\n    \t\t\t\t}\n\n    \t\t\t\t// they are collinear segments, which might overlap\n    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n    \t\t\t\tif ( seg1dx !== 0 ) {\n\n    \t\t\t\t\t// the segments are NOT on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// the segments are on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg2min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg1min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n    \t\t\t// The order of legs is important\n\n    \t\t\t// translation of all points, so that Vertex is at (0,0)\n    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n    \t\t\t\t// angle != 180 deg.\n\n    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n    \t\t\t\tif ( from2toAngle > 0 ) {\n\n    \t\t\t\t\t// main angle < 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// main angle > 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// angle == 180 deg.\n    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n    \t\t\t\treturn\t( from2otherAngle > 0 );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tfunction removeHoles( contour, holes ) {\n\n    \t\t\tvar shape = contour.concat(); // work on this shape\n    \t\t\tvar hole;\n\n    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n    \t\t\t\t// Check if hole point lies within angle around shape point\n    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\t// Check if shape point lies within angle around hole point\n    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\ttrue;\n\n    \t\t\t}\n\n    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with shape edges\n    \t\t\t\tvar sIdx, nextIdx, intersection;\n    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar indepHoles = [];\n\n    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with hole edges\n    \t\t\t\tvar ihIdx, chkHole,\n    \t\t\t\t\thIdx, nextIdx, intersection;\n    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar holeIndex, shapeIndex,\n    \t\t\t\tshapePt, holePt,\n    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n    \t\t\t\ttmpShape1, tmpShape2,\n    \t\t\t\ttmpHole1, tmpHole2;\n\n    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\t\tindepHoles.push( h );\n\n    \t\t\t}\n\n    \t\t\tvar minShapeIndex = 0;\n    \t\t\tvar counter = indepHoles.length * 2;\n    \t\t\twhile ( indepHoles.length > 0 ) {\n\n    \t\t\t\tcounter --;\n    \t\t\t\tif ( counter < 0 ) {\n\n    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t\t// search for shape-vertex and hole-vertex,\n    \t\t\t\t// which can be connected without intersections\n    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n    \t\t\t\t\tholeIndex\t= - 1;\n\n    \t\t\t\t\t// search for hole which can be reached without intersections\n    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n    \t\t\t\t\t\t// prevent multiple checks\n    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n    \t\t\t\t\t\thole = holes[ holeIdx ];\n    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n    \t\t\t\t\t\t\tholeIndex = h2;\n    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\n    \t\t}\n\n\n    \t\tvar i, il, f, face,\n    \t\t\tkey, index,\n    \t\t\tallPointsMap = {};\n\n    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    \t\tvar allpoints = contour.concat();\n\n    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n    \t\t}\n\n    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n    \t\t// prepare all points map\n\n    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n    \t\t\t}\n\n    \t\t\tallPointsMap[ key ] = i;\n\n    \t\t}\n\n    \t\t// remove holes by cutting paths to holes and adding them to the shape\n    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\n    \t\t// check all face vertices against all points map\n\n    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n    \t\t\tface = triangles[ i ];\n\n    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n    \t\t\t\tindex = allPointsMap[ key ];\n\n    \t\t\t\tif ( index !== undefined ) {\n\n    \t\t\t\t\tface[ f ] = index;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn triangles.concat();\n\n    \t},\n\n    \tisClockWise: function ( pts ) {\n\n    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\n    \t},\n\n    \t// Bezier Curves formulas obtained from\n    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    \t// Quad Bezier Functions\n\n    \tb2: ( function () {\n\n    \t\tfunction b2p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * p;\n\n    \t\t}\n\n    \t\tfunction b2p1( t, p ) {\n\n    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\n    \t\t}\n\n    \t\tfunction b2p2( t, p ) {\n\n    \t\t\treturn t * t * p;\n\n    \t\t}\n\n    \t\treturn function b2( t, p0, p1, p2 ) {\n\n    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n    \t\t};\n\n    \t} )(),\n\n    \t// Cubic Bezier Functions\n\n    \tb3: ( function () {\n\n    \t\tfunction b3p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * k * p;\n\n    \t\t}\n\n    \t\tfunction b3p1( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * k * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p2( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * t * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p3( t, p ) {\n\n    \t\t\treturn t * t * t * p;\n\n    \t\t}\n\n    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     * Creates extruded geometry from a path shape.\n     *\n     * parameters = {\n     *\n     *  curveSegments: <int>, // number of points on the curves\n     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n     *  amount: <int>, // Depth to extrude the shape\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n     *  bevelSize: <float>, // how far from shape outline is bevel\n     *  bevelSegments: <int>, // number of bevel layers\n     *\n     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n     *\n     *  uvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ExtrudeGeometry( shapes, options ) {\n\n    \tif ( typeof( shapes ) === \"undefined\" ) {\n\n    \t\tshapes = [];\n    \t\treturn;\n\n    \t}\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ExtrudeGeometry';\n\n    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    \t// can't really use automatic vertex normals\n    \t// as then front and back sides get smoothed too\n    \t// should do separate smoothing just for sides\n\n    \t//this.computeVertexNormals();\n\n    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\n    }\n\n    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tvar sl = shapes.length;\n\n    \tfor ( var s = 0; s < sl; s ++ ) {\n\n    \t\tvar shape = shapes[ s ];\n    \t\tthis.addShape( shape, options );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\n    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\n    \tvar extrudePath = options.extrudePath;\n    \tvar extrudePts, extrudeByPath = false;\n\n    \t// Use default WorldUVGenerator if no UV generators are specified.\n    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n    \tvar splineTube, binormal, normal, position2;\n    \tif ( extrudePath ) {\n\n    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n    \t\textrudeByPath = true;\n    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n    \t\t// SETUP TNB variables\n\n    \t\t// Reuse TNB from TubeGeomtry for now.\n    \t\t// TODO1 - have a .isClosed in spline?\n\n    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    \t\tbinormal = new Vector3();\n    \t\tnormal = new Vector3();\n    \t\tposition2 = new Vector3();\n\n    \t}\n\n    \t// Safeguards if bevels are not enabled\n\n    \tif ( ! bevelEnabled ) {\n\n    \t\tbevelSegments = 0;\n    \t\tbevelThickness = 0;\n    \t\tbevelSize = 0;\n\n    \t}\n\n    \t// Variables initialization\n\n    \tvar ahole, h, hl; // looping of holes\n    \tvar scope = this;\n\n    \tvar shapesOffset = this.vertices.length;\n\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\n    \t\t\t\tholes[ h ] = ahole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    \t}\n\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t/* Vertices */\n\n    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\tvertices = vertices.concat( ahole );\n\n    \t}\n\n\n    \tfunction scalePt2( pt, vec, size ) {\n\n    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n    \t}\n\n    \tvar b, bs, t, z,\n    \t\tvert, vlen = vertices.length,\n    \t\tface, flen = faces.length;\n\n\n    \t// Find directions for point movement\n\n\n    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n    \t\t// computes for inPt the corresponding point inPt' on a new contour\n    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n    \t\t//\n    \t\t// inPt' is the intersection of the two lines parallel to the two\n    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n    \t\t// good reading for geometry algorithms (here: line-line intersection)\n    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n    \t\t// check for collinear edges\n    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n    \t\t\t// not collinear\n\n    \t\t\t// length of vectors for normalizing\n\n    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n    \t\t\t// shift adjacent points by unit vectors to the left\n\n    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n    \t\t\t// scaling factor for v_prev to intersection point\n\n    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\t\t// vector from inPt to intersection point\n\n    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n    \t\t\t//  but prevent crazy spikes\n    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n    \t\t\tif ( v_trans_lensq <= 2 ) {\n\n    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n    \t\t\t} else {\n\n    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// handle special case of collinear edges\n\n    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n    \t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( direction_eq ) {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n    \t\t\t\tv_trans_x = - v_prev_y;\n    \t\t\t\tv_trans_y =  v_prev_x;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n    \t\t\t} else {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n    \t\t\t\tv_trans_x = v_prev_x;\n    \t\t\t\tv_trans_y = v_prev_y;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n    \t}\n\n\n    \tvar contourMovements = [];\n\n    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\tif ( j === il ) j = 0;\n    \t\tif ( k === il ) k = 0;\n\n    \t\t//  (j)---(i)---(k)\n    \t\t// console.log('i,j,k', i, j , k)\n\n    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    \t}\n\n    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\toneHoleMovements = [];\n\n    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\t\tif ( j === il ) j = 0;\n    \t\t\tif ( k === il ) k = 0;\n\n    \t\t\t//  (j)---(i)---(k)\n    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n    \t\t}\n\n    \t\tholesMovements.push( oneHoleMovements );\n    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    \t}\n\n\n    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\n    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n    \t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tbs = bevelSize;\n\n    \t// Back facing vertices\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\tif ( ! extrudeByPath ) {\n\n    \t\t\tv( vert.x, vert.y, 0 );\n\n    \t\t} else {\n\n    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n    \t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t}\n\n    \t}\n\n    \t// Add stepped vertices...\n    \t// Including front facing vertices\n\n    \tvar s;\n\n    \tfor ( s = 1; s <= steps; s ++ ) {\n\n    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n    \t\t\t} else {\n\n    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n    \t\t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Add bevel segments planes\n\n    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n    \t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t/* Faces */\n\n    \t// Top and bottom faces\n\n    \tbuildLidFaces();\n\n    \t// Sides faces\n\n    \tbuildSideFaces();\n\n\n    \t/////  Internal functions\n\n    \tfunction buildLidFaces() {\n\n    \t\tif ( bevelEnabled ) {\n\n    \t\t\tvar layer = 0; // steps + 1\n    \t\t\tvar offset = vlen * layer;\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n    \t\t\t}\n\n    \t\t\tlayer = steps + bevelSegments * 2;\n    \t\t\toffset = vlen * layer;\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t// Create faces for the z-sides of the shape\n\n    \tfunction buildSideFaces() {\n\n    \t\tvar layeroffset = 0;\n    \t\tsidewalls( contour, layeroffset );\n    \t\tlayeroffset += contour.length;\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\tsidewalls( ahole, layeroffset );\n\n    \t\t\t//, true\n    \t\t\tlayeroffset += ahole.length;\n\n    \t\t}\n\n    \t}\n\n    \tfunction sidewalls( contour, layeroffset ) {\n\n    \t\tvar j, k;\n    \t\ti = contour.length;\n\n    \t\twhile ( -- i >= 0 ) {\n\n    \t\t\tj = i;\n    \t\t\tk = i - 1;\n    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\n    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n    \t\t\t\tvar slen1 = vlen * s;\n    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n    \t\t\t\tvar a = layeroffset + j + slen1,\n    \t\t\t\t\tb = layeroffset + k + slen1,\n    \t\t\t\t\tc = layeroffset + k + slen2,\n    \t\t\t\t\td = layeroffset + j + slen2;\n\n    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \tfunction v( x, y, z ) {\n\n    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n    \t}\n\n    \tfunction f3( a, b, c ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n    \t}\n\n    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n    \t\td += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.WorldUVGenerator = {\n\n    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n\n    \t\treturn [\n    \t\t\tnew Vector2( a.x, a.y ),\n    \t\t\tnew Vector2( b.x, b.y ),\n    \t\t\tnew Vector2( c.x, c.y )\n    \t\t];\n\n    \t},\n\n    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n    \t\tvar d = vertices[ indexD ];\n\n    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n    \t\t\t];\n\n    \t\t} else {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n    \t\t\t];\n\n    \t\t}\n\n    \t}\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * Text = 3D Text\n     *\n     * parameters = {\n     *  font: <THREE.Font>, // font\n     *\n     *  size: <float>, // size of the text\n     *  height: <float>, // thickness to extrude text\n     *  curveSegments: <int>, // number of points on the curves\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into text bevel goes\n     *  bevelSize: <float> // how far from text outline is bevel\n     * }\n     */\n\n    function TextGeometry( text, parameters ) {\n\n    \tparameters = parameters || {};\n\n    \tvar font = parameters.font;\n\n    \tif ( (font && font.isFont) === false ) {\n\n    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n    \t\treturn new Geometry();\n\n    \t}\n\n    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n    \t// translate parameters to ExtrudeGeometry API\n\n    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    \t// defaults\n\n    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    \tExtrudeGeometry.call( this, shapes, parameters );\n\n    \tthis.type = 'TextGeometry';\n\n    }\n\n    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n    TextGeometry.prototype.constructor = TextGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     * based on THREE.SphereGeometry\n     */\n\n    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'SphereBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n\n    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    \tphiStart = phiStart !== undefined ? phiStart : 0;\n    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    \tvar thetaEnd = thetaStart + thetaLength;\n\n    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \tvar index = 0, vertices = [], normal = new Vector3();\n\n    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n    \t\tvar verticesRow = [];\n\n    \t\tvar v = y / heightSegments;\n\n    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n    \t\t\tvar u = x / widthSegments;\n\n    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n    \t\t\tnormal.set( px, py, pz ).normalize();\n\n    \t\t\tpositions.setXYZ( index, px, py, pz );\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n    \t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\tverticesRow.push( index );\n\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\tvertices.push( verticesRow );\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n    \t\t\tvar v2 = vertices[ y ][ x ];\n    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n    \tthis.addAttribute( 'position', positions );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'SphereGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n    }\n\n    SphereGeometry.prototype = Object.create( Geometry.prototype );\n    SphereGeometry.prototype.constructor = SphereGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'RingBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tinnerRadius = innerRadius || 20;\n    \touterRadius = outerRadius || 50;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// some helper variables\n    \tvar index = 0, indexOffset = 0, segment;\n    \tvar radius = innerRadius;\n    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \t// values are generate from the inside of the ring to the outside\n\n    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * Math.cos( segment );\n    \t\t\tvertex.y = radius * Math.sin( segment );\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex++;\n\n    \t\t}\n\n    \t\t// increase the radius for next row of vertices\n    \t\tradius += radiusStep;\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\n    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n    \t\t\tsegment = i + thetaSegmentLevel;\n\n    \t\t\t// indices\n    \t\t\tvar a = segment;\n    \t\t\tvar b = segment + thetaSegments + 1;\n    \t\t\tvar c = segment + thetaSegments + 2;\n    \t\t\tvar d = segment + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    }\n\n    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n    /**\n     * @author Kaleb Murphy\n     */\n\n    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'RingGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n    }\n\n    RingGeometry.prototype = Object.create( Geometry.prototype );\n    RingGeometry.prototype.constructor = RingGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PlaneGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n    }\n\n    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n     // points - to create a closed torus, one must use a set of points\n     //    like so: [ a, b, c, d, a ], see first is the same as last.\n     // segments - the number of circumference segments to create\n     // phiStart - the starting radian\n     // phiLength - the radian (0 to 2PI) range of the lathed section\n     //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'LatheBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tsegments = Math.floor( segments ) || 12;\n    \tphiStart = phiStart || 0;\n    \tphiLength = phiLength || Math.PI * 2;\n\n    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( segments + 1 ) * points.length;\n    \tvar indexCount = segments * points.length * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar index = 0, indexOffset = 0, base;\n    \tvar inverseSegments = 1.0 / segments;\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar i, j;\n\n    \t// generate vertices and uvs\n\n    \tfor ( i = 0; i <= segments; i ++ ) {\n\n    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n    \t\tvar sin = Math.sin( phi );\n    \t\tvar cos = Math.cos( phi );\n\n    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = points[ j ].x * sin;\n    \t\t\tvertex.y = points[ j ].y;\n    \t\t\tvertex.z = points[ j ].x * cos;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / segments;\n    \t\t\tuv.y = j / ( points.length - 1 );\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n    \t\t\tbase = j + i * points.length;\n\n    \t\t\t// indices\n    \t\t\tvar a = base;\n    \t\t\tvar b = base + points.length;\n    \t\t\tvar c = base + points.length + 1;\n    \t\t\tvar d = base + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// generate normals\n\n    \tthis.computeVertexNormals();\n\n    \t// if the geometry is closed, we need to average the normals along the seam.\n    \t// because the corresponding vertices are identical (but still have different UVs).\n\n    \tif( phiLength === Math.PI * 2 ) {\n\n    \t\tvar normals = this.attributes.normal.array;\n    \t\tvar n1 = new Vector3();\n    \t\tvar n2 = new Vector3();\n    \t\tvar n = new Vector3();\n\n    \t\t// this is the buffer offset for the last line of vertices\n    \t\tbase = segments * points.length * 3;\n\n    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n    \t\t\t// select the normal of the vertex in the first line\n    \t\t\tn1.x = normals[ j + 0 ];\n    \t\t\tn1.y = normals[ j + 1 ];\n    \t\t\tn1.z = normals[ j + 2 ];\n\n    \t\t\t// select the normal of the vertex in the last line\n    \t\t\tn2.x = normals[ base + j + 0 ];\n    \t\t\tn2.y = normals[ base + j + 1 ];\n    \t\t\tn2.z = normals[ base + j + 2 ];\n\n    \t\t\t// average normals\n    \t\t\tn.addVectors( n1, n2 ).normalize();\n\n    \t\t\t// assign the new values to both normals\n    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n    \t\t} // next row\n\n    \t}\n\n    }\n\n    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n    /**\n     * @author astrodud / http://astrodud.isgreat.org/\n     * @author zz85 / https://github.com/zz85\n     * @author bhouston / http://clara.io\n     */\n\n    // points - to create a closed torus, one must use a set of points\n    //    like so: [ a, b, c, d, a ], see first is the same as last.\n    // segments - the number of circumference segments to create\n    // phiStart - the starting radian\n    // phiLength - the radian (0 to 2PI) range of the lathed section\n    //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'LatheGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    LatheGeometry.prototype = Object.create( Geometry.prototype );\n    LatheGeometry.prototype.constructor = LatheGeometry;\n\n    /**\n     * @author jonobr1 / http://jonobr1.com\n     *\n     * Creates a one-sided polygonal geometry from a path shape. Similar to\n     * ExtrudeGeometry.\n     *\n     * parameters = {\n     *\n     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n     *\n     *\tmaterial: <int> // material index for front and back faces\n     *\tuvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ShapeGeometry( shapes, options ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ShapeGeometry';\n\n    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    }\n\n    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n    /**\n     * Add an array of shapes to THREE.ShapeGeometry.\n     */\n    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n    \t\tthis.addShape( shapes[ i ], options );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n     */\n    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tif ( options === undefined ) options = {};\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar material = options.material;\n    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    \t//\n\n    \tvar i, l, hole;\n\n    \tvar shapesOffset = this.vertices.length;\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\t\thole = holes[ i ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\n    \t\t\t\tholes[ i ] = hole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false;\n\n    \t}\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t// Vertices\n\n    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\thole = holes[ i ];\n    \t\tvertices = vertices.concat( hole );\n\n    \t}\n\n    \t//\n\n    \tvar vert, vlen = vertices.length;\n    \tvar face, flen = faces.length;\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = vertices[ i ];\n\n    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n    \t}\n\n    \tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\tface = faces[ i ];\n\n    \t\tvar a = face[ 0 ] + shapesOffset;\n    \t\tvar b = face[ 1 ] + shapesOffset;\n    \t\tvar c = face[ 2 ] + shapesOffset;\n\n    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function EdgesGeometry( geometry, thresholdAngle ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tvar geometry2;\n\n    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tgeometry2 = new Geometry();\n    \t\tgeometry2.fromBufferGeometry( geometry );\n\n    \t} else {\n\n    \t\tgeometry2 = geometry.clone();\n\n    \t}\n\n    \tgeometry2.mergeVertices();\n    \tgeometry2.computeFaceNormals();\n\n    \tvar vertices = geometry2.vertices;\n    \tvar faces = geometry2.faces;\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tvar face = faces[ i ];\n\n    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\tedge.sort( sortFunction );\n\n    \t\t\tvar key = edge.toString();\n\n    \t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n    \t\t\t} else {\n\n    \t\t\t\thash[ key ].face2 = i;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tvar coords = [];\n\n    \tfor ( var key in hash ) {\n\n    \t\tvar h = hash[ key ];\n\n    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n    \t\t\tvar vertex = vertices[ h.vert1 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t\tvertex = vertices[ h.vert2 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t}\n\n    \t}\n\n    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n    }\n\n    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CylinderBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tvar scope = this;\n\n    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    \theight = height !== undefined ? height : 100;\n\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n\n    \topenEnded = openEnded !== undefined ? openEnded : false;\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n    \t// used to calculate buffer length\n\n    \tvar nbCap = 0;\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) nbCap ++;\n    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\n    \t}\n\n    \tvar vertexCount = calculateVertexCount();\n    \tvar indexCount = calculateIndexCount();\n\n    \t// buffers\n\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n\n    \tvar index = 0,\n    \t    indexOffset = 0,\n    \t    indexArray = [],\n    \t    halfHeight = height / 2;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// generate geometry\n\n    \tgenerateTorso();\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) generateCap( true );\n    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount() {\n\n    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction calculateIndexCount() {\n\n    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += radialSegments * nbCap * 3;\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction generateTorso() {\n\n    \t\tvar x, y;\n    \t\tvar normal = new Vector3();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\t// this will be used to calculate the normal\n    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n    \t\t\tvar indexRow = [];\n\n    \t\t\tvar v = y / heightSegments;\n\n    \t\t\t// calculate the radius of the current row\n    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\t\tvar u = x / radialSegments;\n\n    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\t\tvar sinTheta = Math.sin( theta );\n    \t\t\t\tvar cosTheta = Math.cos( theta );\n\n    \t\t\t\t// vertex\n    \t\t\t\tvertex.x = radius * sinTheta;\n    \t\t\t\tvertex.y = - v * height + halfHeight;\n    \t\t\t\tvertex.z = radius * cosTheta;\n    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t\t// normal\n    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t\t// uv\n    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\t\t// save index of vertex in respective row\n    \t\t\t\tindexRow.push( index );\n\n    \t\t\t\t// increase index\n    \t\t\t\tindex ++;\n\n    \t\t\t}\n\n    \t\t\t// now save vertices of the row in our index array\n    \t\t\tindexArray.push( indexRow );\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n    \t\t\t\t// we use the index array to access the correct indices\n    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n    \t\t\t\t// face one\n    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// update counters\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    \tfunction generateCap( top ) {\n\n    \t\tvar x, centerIndexStart, centerIndexEnd;\n\n    \t\tvar uv = new Vector2();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\n    \t\t// save the index of the first center vertex\n    \t\tcenterIndexStart = index;\n\n    \t\t// first we generate the center vertex data of the cap.\n    \t\t// because the geometry needs one set of uvs per face,\n    \t\t// we must generate a center vertex per face/segment\n\n    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = 0.5;\n    \t\t\tuv.y = 0.5;\n\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// save the index of the last center vertex\n    \t\tcenterIndexEnd = index;\n\n    \t\t// now we generate the surrounding vertices, normals and uvs\n\n    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\tvar u = x / radialSegments;\n    \t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\tvar cosTheta = Math.cos( theta );\n    \t\t\tvar sinTheta = Math.sin( theta );\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * sinTheta;\n    \t\t\tvertex.y = halfHeight * sign;\n    \t\t\tvertex.z = radius * cosTheta;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tvar c = centerIndexStart + x;\n    \t\t\tvar i = centerIndexEnd + x;\n\n    \t\t\tif ( top === true ) {\n\n    \t\t\t\t// face top\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t} else {\n\n    \t\t\t\t// face bottom\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t}\n\n    \t\t\t// update counters\n    \t\t\tgroupCount += 3;\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    }\n\n    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CylinderGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n    /**\n     * @author abelnation / http://github.com/abelnation\n     */\n\n    function ConeGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n    ConeGeometry.prototype.constructor = ConeGeometry;\n\n    /*\n     * @author: abelnation / http://github.com/abelnation\n     */\n\n    function ConeBufferGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderBufferGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CircleBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tvar vertices = segments + 2;\n\n    \tvar positions = new Float32Array( vertices * 3 );\n    \tvar normals = new Float32Array( vertices * 3 );\n    \tvar uvs = new Float32Array( vertices * 2 );\n\n    \t// center data is already zero, but need to set a few extras\n    \tnormals[ 2 ] = 1.0;\n    \tuvs[ 0 ] = 0.5;\n    \tuvs[ 1 ] = 0.5;\n\n    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\n    \t\tpositions[ i ] = radius * Math.cos( segment );\n    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n    \t\tnormals[ i + 2 ] = 1; // normal z\n\n    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var i = 1; i <= segments; i ++ ) {\n\n    \t\tindices.push( i, i + 1, 0 );\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n    /**\n     * @author hughes\n     */\n\n    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CircleGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n    }\n\n    CircleGeometry.prototype = Object.create( Geometry.prototype );\n    CircleGeometry.prototype.constructor = CircleGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n     */\n\n    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'BoxGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n    \tthis.mergeVertices();\n\n    }\n\n    BoxGeometry.prototype = Object.create( Geometry.prototype );\n    BoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n    var Geometries = Object.freeze({\n    \tWireframeGeometry: WireframeGeometry,\n    \tParametricGeometry: ParametricGeometry,\n    \tTetrahedronGeometry: TetrahedronGeometry,\n    \tOctahedronGeometry: OctahedronGeometry,\n    \tIcosahedronGeometry: IcosahedronGeometry,\n    \tDodecahedronGeometry: DodecahedronGeometry,\n    \tPolyhedronGeometry: PolyhedronGeometry,\n    \tTubeGeometry: TubeGeometry,\n    \tTorusKnotGeometry: TorusKnotGeometry,\n    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    \tTorusGeometry: TorusGeometry,\n    \tTorusBufferGeometry: TorusBufferGeometry,\n    \tTextGeometry: TextGeometry,\n    \tSphereBufferGeometry: SphereBufferGeometry,\n    \tSphereGeometry: SphereGeometry,\n    \tRingGeometry: RingGeometry,\n    \tRingBufferGeometry: RingBufferGeometry,\n    \tPlaneBufferGeometry: PlaneBufferGeometry,\n    \tPlaneGeometry: PlaneGeometry,\n    \tLatheGeometry: LatheGeometry,\n    \tLatheBufferGeometry: LatheBufferGeometry,\n    \tShapeGeometry: ShapeGeometry,\n    \tExtrudeGeometry: ExtrudeGeometry,\n    \tEdgesGeometry: EdgesGeometry,\n    \tConeGeometry: ConeGeometry,\n    \tConeBufferGeometry: ConeBufferGeometry,\n    \tCylinderGeometry: CylinderGeometry,\n    \tCylinderBufferGeometry: CylinderBufferGeometry,\n    \tCircleBufferGeometry: CircleBufferGeometry,\n    \tCircleGeometry: CircleGeometry,\n    \tBoxBufferGeometry: BoxBufferGeometry,\n    \tBoxGeometry: BoxGeometry\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ShadowMaterial() {\n\n    \tShaderMaterial.call( this, {\n    \t\tuniforms: exports.UniformsUtils.merge( [\n    \t\t\tUniformsLib[ \"lights\" ],\n    \t\t\t{\n    \t\t\t\topacity: { value: 1.0 }\n    \t\t\t}\n    \t\t] ),\n    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n    \t} );\n\n    \tthis.lights = true;\n    \tthis.transparent = true;\n\n    \tObject.defineProperties( this, {\n    \t\topacity: {\n    \t\t\tenumerable: true,\n    \t\t\tget: function () {\n    \t\t\t\treturn this.uniforms.opacity.value;\n    \t\t\t},\n    \t\t\tset: function ( value ) {\n    \t\t\t\tthis.uniforms.opacity.value = value;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n    ShadowMaterial.prototype.isShadowMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function RawShaderMaterial( parameters ) {\n\n    \tShaderMaterial.call( this, parameters );\n\n    \tthis.type = 'RawShaderMaterial';\n\n    }\n\n    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MultiMaterial( materials ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.type = 'MultiMaterial';\n\n    \tthis.materials = materials instanceof Array ? materials : [];\n\n    \tthis.visible = true;\n\n    }\n\n    MultiMaterial.prototype = {\n\n    \tconstructor: MultiMaterial,\n\n    \tisMultiMaterial: true,\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.2,\n    \t\t\t\ttype: 'material',\n    \t\t\t\tgenerator: 'MaterialExporter'\n    \t\t\t},\n    \t\t\tuuid: this.uuid,\n    \t\t\ttype: this.type,\n    \t\t\tmaterials: []\n    \t\t};\n\n    \t\tvar materials = this.materials;\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tvar material = materials[ i ].toJSON( meta );\n    \t\t\tdelete material.metadata;\n\n    \t\t\toutput.materials.push( material );\n\n    \t\t}\n\n    \t\toutput.visible = this.visible;\n\n    \t\treturn output;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\tvar material = new this.constructor();\n\n    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n    \t\t}\n\n    \t\tmaterial.visible = this.visible;\n\n    \t\treturn material;\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  roughness: <float>,\n     *  metalness: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  roughnessMap: new THREE.Texture( <Image> ),\n     *\n     *  metalnessMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n     *  envMapIntensity: <float>\n     *\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshStandardMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.type = 'MeshStandardMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.roughness = 0.5;\n    \tthis.metalness = 0.5;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.roughnessMap = null;\n\n    \tthis.metalnessMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.envMapIntensity = 1.0;\n\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n    MeshStandardMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.color.copy( source.color );\n    \tthis.roughness = source.roughness;\n    \tthis.metalness = source.metalness;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.roughnessMap = source.roughnessMap;\n\n    \tthis.metalnessMap = source.metalnessMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.envMapIntensity = source.envMapIntensity;\n\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  reflectivity: <float>\n     * }\n     */\n\n    function MeshPhysicalMaterial( parameters ) {\n\n    \tMeshStandardMaterial.call( this );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.type = 'MeshPhysicalMaterial';\n\n    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n    \tthis.clearCoat = 0.0;\n    \tthis.clearCoatRoughness = 0.0;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.reflectivity = source.reflectivity;\n\n    \tthis.clearCoat = source.clearCoat;\n    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  specular: <hex>,\n     *  shininess: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshPhongMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshPhongMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.specular = new Color( 0x111111 );\n    \tthis.shininess = 30;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n    MeshPhongMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.specular.copy( source.specular );\n    \tthis.shininess = source.shininess;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * parameters = {\n     *  opacity: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshNormalMaterial( parameters ) {\n\n    \tMaterial.call( this, parameters );\n\n    \tthis.type = 'MeshNormalMaterial';\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n    \tthis.morphTargets = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n    MeshNormalMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshLambertMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshLambertMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n    MeshLambertMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *\n     *  scale: <float>,\n     *  dashSize: <float>,\n     *  gapSize: <float>\n     * }\n     */\n\n    function LineDashedMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineDashedMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n\n    \tthis.scale = 1;\n    \tthis.dashSize = 3;\n    \tthis.gapSize = 1;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineDashedMaterial.prototype = Object.create( Material.prototype );\n    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n    LineDashedMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n\n    \tthis.scale = source.scale;\n    \tthis.dashSize = source.dashSize;\n    \tthis.gapSize = source.gapSize;\n\n    \treturn this;\n\n    };\n\n\n\n    var Materials = Object.freeze({\n    \tShadowMaterial: ShadowMaterial,\n    \tSpriteMaterial: SpriteMaterial,\n    \tRawShaderMaterial: RawShaderMaterial,\n    \tShaderMaterial: ShaderMaterial,\n    \tPointsMaterial: PointsMaterial,\n    \tMultiMaterial: MultiMaterial,\n    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n    \tMeshStandardMaterial: MeshStandardMaterial,\n    \tMeshPhongMaterial: MeshPhongMaterial,\n    \tMeshNormalMaterial: MeshNormalMaterial,\n    \tMeshLambertMaterial: MeshLambertMaterial,\n    \tMeshDepthMaterial: MeshDepthMaterial,\n    \tMeshBasicMaterial: MeshBasicMaterial,\n    \tLineDashedMaterial: LineDashedMaterial,\n    \tLineBasicMaterial: LineBasicMaterial,\n    \tMaterial: Material\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Cache = {\n\n    \tenabled: false,\n\n    \tfiles: {},\n\n    \tadd: function ( key, file ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n    \t\tthis.files[ key ] = file;\n\n    \t},\n\n    \tget: function ( key ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n    \t\treturn this.files[ key ];\n\n    \t},\n\n    \tremove: function ( key ) {\n\n    \t\tdelete this.files[ key ];\n\n    \t},\n\n    \tclear: function () {\n\n    \t\tthis.files = {};\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LoadingManager( onLoad, onProgress, onError ) {\n\n    \tvar scope = this;\n\n    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n    \tthis.onStart = undefined;\n    \tthis.onLoad = onLoad;\n    \tthis.onProgress = onProgress;\n    \tthis.onError = onError;\n\n    \tthis.itemStart = function ( url ) {\n\n    \t\titemsTotal ++;\n\n    \t\tif ( isLoading === false ) {\n\n    \t\t\tif ( scope.onStart !== undefined ) {\n\n    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tisLoading = true;\n\n    \t};\n\n    \tthis.itemEnd = function ( url ) {\n\n    \t\titemsLoaded ++;\n\n    \t\tif ( scope.onProgress !== undefined ) {\n\n    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n    \t\t}\n\n    \t\tif ( itemsLoaded === itemsTotal ) {\n\n    \t\t\tisLoading = false;\n\n    \t\t\tif ( scope.onLoad !== undefined ) {\n\n    \t\t\t\tscope.onLoad();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \tthis.itemError = function ( url ) {\n\n    \t\tif ( scope.onError !== undefined ) {\n\n    \t\t\tscope.onError( url );\n\n    \t\t}\n\n    \t};\n\n    }\n\n    exports.DefaultLoadingManager = new LoadingManager();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function XHRLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( XHRLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.path !== undefined ) url = this.path + url;\n\n    \t\tvar scope = this;\n\n    \t\tvar cached = exports.Cache.get( url );\n\n    \t\tif ( cached !== undefined ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\tsetTimeout( function () {\n\n    \t\t\t\tif ( onLoad ) onLoad( cached );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, 0 );\n\n    \t\t\treturn cached;\n\n    \t\t}\n\n    \t\tvar request = new XMLHttpRequest();\n    \t\trequest.open( 'GET', url, true );\n\n    \t\trequest.addEventListener( 'load', function ( event ) {\n\n    \t\t\tvar response = event.target.response;\n\n    \t\t\texports.Cache.add( url, response );\n\n    \t\t\tif ( this.status === 200 ) {\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else if ( this.status === 0 ) {\n\n    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( onError ) onError( event );\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t}\n\n    \t\t}, false );\n\n    \t\tif ( onProgress !== undefined ) {\n\n    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n    \t\t\t\tonProgress( event );\n\n    \t\t\t}, false );\n\n    \t\t}\n\n    \t\trequest.addEventListener( 'error', function ( event ) {\n\n    \t\t\tif ( onError ) onError( event );\n\n    \t\t\tscope.manager.itemError( url );\n\n    \t\t}, false );\n\n    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n    \t\trequest.send( null );\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn request;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetResponseType: function ( value ) {\n\n    \t\tthis.responseType = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * Abstract Base class to block based textures loader (dds, pvr, ...)\n     */\n\n    function CompressedTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( CompressedTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar images = [];\n\n    \t\tvar texture = new CompressedTexture();\n    \t\ttexture.image = images;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setPath( this.path );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\timages[ i ] = {\n    \t\t\t\t\twidth: texDatas.width,\n    \t\t\t\t\theight: texDatas.height,\n    \t\t\t\t\tformat: texDatas.format,\n    \t\t\t\t\tmipmaps: texDatas.mipmaps\n    \t\t\t\t};\n\n    \t\t\t\tloaded += 1;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tif ( Array.isArray( url ) ) {\n\n    \t\t\tvar loaded = 0;\n\n    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n    \t\t\t\tloadTexture( i );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// compressed cubemap texture stored in a single DDS file\n\n    \t\t\tloader.load( url, function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\tif ( texDatas.isCubemap ) {\n\n    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttexture.image.width = texDatas.width;\n    \t\t\t\t\ttexture.image.height = texDatas.height;\n    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author Nikos M. / https://github.com/foo123/\n     *\n     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n     */\n\n    var DataTextureLoader = BinaryTextureLoader;\n    function BinaryTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( BinaryTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texture = new DataTexture();\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar texData = scope._parser( buffer );\n\n    \t\t\tif ( ! texData ) return;\n\n    \t\t\tif ( undefined !== texData.image ) {\n\n    \t\t\t\ttexture.image = texData.image;\n\n    \t\t\t} else if ( undefined !== texData.data ) {\n\n    \t\t\t\ttexture.image.width = texData.width;\n    \t\t\t\ttexture.image.height = texData.height;\n    \t\t\t\ttexture.image.data = texData.data;\n\n    \t\t\t}\n\n    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n    \t\t\tif ( undefined !== texData.format ) {\n\n    \t\t\t\ttexture.format = texData.format;\n\n    \t\t\t}\n    \t\t\tif ( undefined !== texData.type ) {\n\n    \t\t\t\ttexture.type = texData.type;\n\n    \t\t\t}\n\n    \t\t\tif ( undefined !== texData.mipmaps ) {\n\n    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n    \t\t\t}\n\n    \t\t\tif ( 1 === texData.mipmapCount ) {\n\n    \t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t}\n\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\n    \t\t}, onProgress, onError );\n\n\n    \t\treturn texture;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ImageLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( ImageLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n    \t\timage.onload = function () {\n\n    \t\t\timage.onload = null;\n\n    \t\t\tURL.revokeObjectURL( image.src );\n\n    \t\t\tif ( onLoad ) onLoad( image );\n\n    \t\t\tscope.manager.itemEnd( url );\n\n    \t\t};\n\n    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n    \t\t\timage.src = url;\n\n    \t\t} else {\n\n    \t\t\tvar loader = new XHRLoader();\n    \t\t\tloader.setPath( this.path );\n    \t\t\tloader.setResponseType( 'blob' );\n    \t\t\tloader.setWithCredentials( this.withCredentials );\n    \t\t\tloader.load( url, function ( blob ) {\n\n    \t\t\t\timage.src = URL.createObjectURL( blob );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn image;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( CubeTextureLoader.prototype, {\n\n    \tload: function ( urls, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new CubeTexture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setPath( this.path );\n\n    \t\tvar loaded = 0;\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( urls[ i ], function ( image ) {\n\n    \t\t\t\ttexture.images[ i ] = image;\n\n    \t\t\t\tloaded ++;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, undefined, onError );\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n    \t\t\tloadTexture( i );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function TextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( TextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new Texture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.setPath( this.path );\n    \t\tloader.load( url, function ( image ) {\n\n    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n    \t\t\ttexture.image = image;\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad !== undefined ) {\n\n    \t\t\t\tonLoad( texture );\n\n    \t\t\t}\n\n    \t\t}, onProgress, onError );\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Light( color, intensity ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Light';\n\n    \tthis.color = new Color( color );\n    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\n    \tthis.receiveShadow = undefined;\n\n    }\n\n    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Light,\n\n    \tisLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.color.copy( source.color );\n    \t\tthis.intensity = source.intensity;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.color = this.color.getHex();\n    \t\tdata.object.intensity = this.intensity;\n\n    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function HemisphereLight( skyColor, groundColor, intensity ) {\n\n    \tLight.call( this, skyColor, intensity );\n\n    \tthis.type = 'HemisphereLight';\n\n    \tthis.castShadow = undefined;\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.groundColor = new Color( groundColor );\n\n    }\n\n    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: HemisphereLight,\n\n    \tisHemisphereLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.groundColor.copy( source.groundColor );\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LightShadow( camera ) {\n\n    \tthis.camera = camera;\n\n    \tthis.bias = 0;\n    \tthis.radius = 1;\n\n    \tthis.mapSize = new Vector2( 512, 512 );\n\n    \tthis.map = null;\n    \tthis.matrix = new Matrix4();\n\n    }\n\n    Object.assign( LightShadow.prototype, {\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.camera = source.camera.clone();\n\n    \t\tthis.bias = source.bias;\n    \t\tthis.radius = source.radius;\n\n    \t\tthis.mapSize.copy( source.mapSize );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar object = {};\n\n    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n    \t\tobject.camera = this.camera.toJSON( false ).object;\n    \t\tdelete object.camera.matrix;\n\n    \t\treturn object;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SpotLightShadow() {\n\n    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n    }\n\n    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: SpotLightShadow,\n\n    \tisSpotLightShadow: true,\n\n    \tupdate: function ( light ) {\n\n    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n    \t\tvar far = light.distance || 500;\n\n    \t\tvar camera = this.camera;\n\n    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n    \t\t\tcamera.fov = fov;\n    \t\t\tcamera.aspect = aspect;\n    \t\t\tcamera.far = far;\n    \t\t\tcamera.updateProjectionMatrix();\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'SpotLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * Math.PI;\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / Math.PI;\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new SpotLightShadow();\n\n    }\n\n    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: SpotLight,\n\n    \tisSpotLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.angle = source.angle;\n    \t\tthis.penumbra = source.penumbra;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n\n    function PointLight( color, intensity, distance, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'PointLight';\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * 4 * Math.PI;\n\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n    }\n\n    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: PointLight,\n\n    \tisPointLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectionalLightShadow( light ) {\n\n    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n    }\n\n    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: DirectionalLightShadow\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DirectionalLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'DirectionalLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tthis.shadow = new DirectionalLightShadow();\n\n    }\n\n    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: DirectionalLight,\n\n    \tisDirectionalLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AmbientLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'AmbientLight';\n\n    \tthis.castShadow = undefined;\n\n    }\n\n    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: AmbientLight,\n\n    \tisAmbientLight: true,\n\n    } );\n\n    /**\n     * @author tschw\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    exports.AnimationUtils = {\n\n    \t// same as Array.prototype.slice, but also works on typed arrays\n    \tarraySlice: function( array, from, to ) {\n\n    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\n    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n    \t\t}\n\n    \t\treturn array.slice( from, to );\n\n    \t},\n\n    \t// converts an array to a specific type\n    \tconvertArray: function( array, type, forceClone ) {\n\n    \t\tif ( ! array || // let 'undefined' and 'null' pass\n    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\n    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n    \t\t\treturn new type( array ); // create typed array\n\n    \t\t}\n\n    \t\treturn Array.prototype.slice.call( array ); // create Array\n\n    \t},\n\n    \tisTypedArray: function( object ) {\n\n    \t\treturn ArrayBuffer.isView( object ) &&\n    \t\t\t\t! ( object instanceof DataView );\n\n    \t},\n\n    \t// returns an array by which times and values can be sorted\n    \tgetKeyframeOrder: function( times ) {\n\n    \t\tfunction compareTime( i, j ) {\n\n    \t\t\treturn times[ i ] - times[ j ];\n\n    \t\t}\n\n    \t\tvar n = times.length;\n    \t\tvar result = new Array( n );\n    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n    \t\tresult.sort( compareTime );\n\n    \t\treturn result;\n\n    \t},\n\n    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n    \tsortedArray: function( values, stride, order ) {\n\n    \t\tvar nValues = values.length;\n    \t\tvar result = new values.constructor( nValues );\n\n    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n    \t\t\tvar srcOffset = order[ i ] * stride;\n\n    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// function for parsing AOS keyframe formats\n    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\n    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n    \t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t}\n\n    \t\tif ( key === undefined ) return; // no data\n\n    \t\tvar value = key[ valuePropertyName ];\n    \t\tif ( value === undefined ) return; // no data\n\n    \t\tif ( Array.isArray( value ) ) {\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else if ( value.toArray !== undefined ) {\n    \t\t\t// ...assume THREE.Math-ish\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalue.toArray( values, values.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else {\n    \t\t\t// otherwise push as-is\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push( value );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * Abstract base class of interpolants over parametric samples.\n     *\n     * The parameter domain is one dimensional, typically the time or a path\n     * along a curve defined by the data.\n     *\n     * The sample values can have any dimensionality and derived classes may\n     * apply special interpretations to the data.\n     *\n     * This class provides the interval seek in a Template Method, deferring\n     * the actual interpolation to derived classes.\n     *\n     * Time complexity is O(1) for linear access crossing at most two points\n     * and O(log N) for random access, where N is the number of positions.\n     *\n     * References:\n     *\n     * \t\thttp://www.oodesign.com/template-method-pattern.html\n     *\n     * @author tschw\n     */\n\n    function Interpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tthis.parameterPositions = parameterPositions;\n    \tthis._cachedIndex = 0;\n\n    \tthis.resultBuffer = resultBuffer !== undefined ?\n    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n    \tthis.sampleValues = sampleValues;\n    \tthis.valueSize = sampleSize;\n\n    }\n\n    Interpolant.prototype = {\n\n    \tconstructor: Interpolant,\n\n    \tevaluate: function( t ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\ti1 = this._cachedIndex,\n\n    \t\t\tt1 = pp[   i1   ],\n    \t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\tvalidate_interval: {\n\n    \t\t\tseek: {\n\n    \t\t\t\tvar right;\n\n    \t\t\t\tlinear_scan: {\n    //- See http://jsperf.com/comparison-to-undefined/3\n    //- slower code:\n    //-\n    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n    \t\t\t\t\t\t\t\t// after end\n\n    \t\t\t\t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt0 = t1;\n    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n    \t\t\t\t\t\t\tif ( t < t1 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the right side of the index\n    \t\t\t\t\t\tright = pp.length;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    //- slower code:\n    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n    \t\t\t\t\t\t// looping?\n\n    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n    \t\t\t\t\t\tif ( t < t1global ) {\n\n    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n    \t\t\t\t\t\t\tt0 = t1global;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// linear reverse scan\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\t\t\t\t// before start\n\n    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt1 = t0;\n    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the left side of the index\n    \t\t\t\t\t\tright = i1;\n    \t\t\t\t\t\ti1 = 0;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// the interval is valid\n\n    \t\t\t\t\tbreak validate_interval;\n\n    \t\t\t\t} // linear scan\n\n    \t\t\t\t// binary search\n\n    \t\t\t\twhile ( i1 < right ) {\n\n    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\n    \t\t\t\t\t\tright = mid;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\ti1 = mid + 1;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tt1 = pp[   i1   ];\n    \t\t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\t\t\t// check boundary cases, again\n\n    \t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n    \t\t\t\t}\n\n    \t\t\t} // seek\n\n    \t\t\tthis._cachedIndex = i1;\n\n    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n    \t\t} // validate_interval\n\n    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\n    \t},\n\n    \tsettings: null, // optional, subclass-specific settings structure\n    \t// Note: The indirection allows central control of many interpolants.\n\n    \t// --- Protected interface\n\n    \tDefaultSettings_: {},\n\n    \tgetSettings_: function() {\n\n    \t\treturn this.settings || this.DefaultSettings_;\n\n    \t},\n\n    \tcopySampleValue_: function( index ) {\n\n    \t\t// copies a sample value to the result buffer\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = index * stride;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] = values[ offset + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// Template methods for derived classes:\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tthrow new Error( \"call to abstract method\" );\n    \t\t// implementations shall return this.resultBuffer\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\t// empty\n\n    \t}\n\n    };\n\n    Object.assign( Interpolant.prototype, {\n\n    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_,\n\n    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_\n\n    } );\n\n    /**\n     * Fast and simple cubic spline interpolant.\n     *\n     * It was derived from a Hermitian construction setting the first derivative\n     * at each sample position to the linear slope between neighboring positions\n     * over their parameter interval.\n     *\n     * @author tschw\n     */\n\n    function CubicInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    \tthis._weightPrev = -0;\n    \tthis._offsetPrev = -0;\n    \tthis._weightNext = -0;\n    \tthis._offsetNext = -0;\n\n    }\n\n    CubicInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: CubicInterpolant,\n\n    \tDefaultSettings_: {\n\n    \t\tendingStart: \tZeroCurvatureEnding,\n    \t\tendingEnd:\t\tZeroCurvatureEnding\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\tiPrev = i1 - 2,\n    \t\t\tiNext = i1 + 1,\n\n    \t\t\ttPrev = pp[ iPrev ],\n    \t\t\ttNext = pp[ iNext ];\n\n    \t\tif ( tPrev === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(t0) = 0\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiPrev = pp.length - 2;\n    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = t1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tNext === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(tN) = 0\n    \t\t\t\t\tiNext = i1;\n    \t\t\t\t\ttNext = 2 * t1 - t0;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiNext = 1;\n    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n    \t\t\t\t\tiNext = i1 - 1;\n    \t\t\t\t\ttNext = t0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n    \t\t\tstride = this.valueSize;\n\n    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n    \t\tthis._offsetPrev = iPrev * stride;\n    \t\tthis._offsetNext = iNext * stride;\n\n    \t},\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tpp = p * p,\n    \t\t\tppp = pp * p;\n\n    \t\t// evaluate polynomials\n\n    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n    \t\t// combine data linearly\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tsP * values[ oP + i ] +\n    \t\t\t\t\ts0 * values[ o0 + i ] +\n    \t\t\t\t\ts1 * values[ o1 + i ] +\n    \t\t\t\t\tsN * values[ oN + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     * @author tschw\n     */\n\n    function LinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    LinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: LinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset1 = i1 * stride,\n    \t\t\toffset0 = offset1 - stride,\n\n    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tweight0 = 1 - weight1;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Interpolant that evaluates to the sample value at the position preceeding\n     * the parameter.\n     *\n     * @author tschw\n     */\n\n    function DiscreteInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    DiscreteInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: DiscreteInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\treturn this.copySampleValue_( i1 - 1 );\n\n    \t}\n\n    } );\n\n    var KeyframeTrackPrototype;\n\n    KeyframeTrackPrototype = {\n\n    \tTimeBufferType: Float32Array,\n    \tValueBufferType: Float32Array,\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\n    \t\treturn new DiscreteInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new LinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: function( result ) {\n\n    \t\treturn new CubicInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tsetInterpolation: function( interpolation ) {\n\n    \t\tvar factoryMethod;\n\n    \t\tswitch ( interpolation ) {\n\n    \t\t\tcase InterpolateDiscrete:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateLinear:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateSmooth:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tif ( factoryMethod === undefined ) {\n\n    \t\t\tvar message = \"unsupported interpolation for \" +\n    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n    \t\t\tif ( this.createInterpolant === undefined ) {\n\n    \t\t\t\t// fall back to default, unless the default itself is messed up\n    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tconsole.warn( message );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.createInterpolant = factoryMethod;\n\n    \t},\n\n    \tgetInterpolation: function() {\n\n    \t\tswitch ( this.createInterpolant ) {\n\n    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n    \t\t\t\treturn InterpolateDiscrete;\n\n    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\n    \t\t\t\treturn InterpolateLinear;\n\n    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n    \t\t\t\treturn InterpolateSmooth;\n\n    \t\t}\n\n    \t},\n\n    \tgetValueSize: function() {\n\n    \t\treturn this.values.length / this.times.length;\n\n    \t},\n\n    \t// move all keyframes either forwards or backwards in time\n    \tshift: function( timeOffset ) {\n\n    \t\tif( timeOffset !== 0.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] += timeOffset;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    \tscale: function( timeScale ) {\n\n    \t\tif( timeScale !== 1.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] *= timeScale;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    \ttrim: function( startTime, endTime ) {\n\n    \t\tvar times = this.times,\n    \t\t\tnKeys = times.length,\n    \t\t\tfrom = 0,\n    \t\t\tto = nKeys - 1;\n\n    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n    \t\t++ to; // inclusive -> exclusive bound\n\n    \t\tif( from !== 0 || to !== nKeys ) {\n\n    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n    \t\t\tvar stride = this.getValueSize();\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n    \t\t\tthis.values = exports.AnimationUtils.\n    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    \tvalidate: function() {\n\n    \t\tvar valid = true;\n\n    \t\tvar valueSize = this.getValueSize();\n    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n    \t\t\tconsole.error( \"invalid value size in track\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n\n    \t\t\tnKeys = times.length;\n\n    \t\tif( nKeys === 0 ) {\n\n    \t\t\tconsole.error( \"track is empty\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar prevTime = null;\n\n    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n    \t\t\tvar currTime = times[ i ];\n\n    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tprevTime = currTime;\n\n    \t\t}\n\n    \t\tif ( values !== undefined ) {\n\n    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\n    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tvar value = values[ i ];\n\n    \t\t\t\t\tif ( isNaN( value ) ) {\n\n    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n    \t\t\t\t\t\tvalid = false;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn valid;\n\n    \t},\n\n    \t// removes equivalent sequential keys as common in morph target sequences\n    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    \toptimize: function() {\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n    \t\t\tstride = this.getValueSize(),\n\n    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n    \t\t\twriteIndex = 1,\n    \t\t\tlastIndex = times.length - 1;\n\n    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n    \t\t\tvar keep = false;\n\n    \t\t\tvar time = times[ i ];\n    \t\t\tvar timeNext = times[ i + 1 ];\n\n    \t\t\t// remove adjacent keyframes scheduled at the same time\n\n    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n    \t\t\t\tif ( ! smoothInterpolation ) {\n\n    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n    \t\t\t\t\tvar offset = i * stride,\n    \t\t\t\t\t\toffsetP = offset - stride,\n    \t\t\t\t\t\toffsetN = offset + stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\t\t\tvar value = values[ offset + j ];\n\n    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n    \t\t\t\t\t\t\tkeep = true;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else keep = true;\n\n    \t\t\t}\n\n    \t\t\t// in-place compaction\n\n    \t\t\tif ( keep ) {\n\n    \t\t\t\tif ( i !== writeIndex ) {\n\n    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n    \t\t\t\t\tvar readOffset = i * stride,\n    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t\t}\n\n    \t\t\t\t++ writeIndex;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// flush last keyframe (compaction looks ahead)\n\n    \t\tif ( lastIndex > 0 ) {\n\n    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t++ writeIndex;\n\n    \t\t}\n\n    \t\tif ( writeIndex !== times.length ) {\n\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    }\n\n    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n    \tif( times === undefined || times.length === 0 ) {\n\n    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\n    \t}\n\n    \tthis.name = name;\n\n    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n    \tthis.validate();\n    \tthis.optimize();\n\n    }\n\n    /**\n     *\n     * A Track of vectored keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    VectorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: VectorKeyframeTrack,\n\n    \tValueTypeName: 'vector'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     * Spherical linear unit quaternion interpolant.\n     *\n     * @author tschw\n     */\n\n    function QuaternionLinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    QuaternionLinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: QuaternionLinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset = i1 * stride,\n\n    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n    \t\t\tQuaternion.slerpFlat( result, 0,\n    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * A Track of quaternion keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    QuaternionKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: QuaternionKeyframeTrack,\n\n    \tValueTypeName: 'quaternion',\n\n    \t// ValueBufferType is inherited\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new QuaternionLinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n    } );\n\n    /**\n     *\n     * A Track of numeric keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    NumberKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: NumberKeyframeTrack,\n\n    \tValueTypeName: 'number',\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     *\n     * A Track that interpolates Strings\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function StringKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    StringKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: StringKeyframeTrack,\n\n    \tValueTypeName: 'string',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    } );\n\n    /**\n     *\n     * A Track of Boolean keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function BooleanKeyframeTrack( name, times, values ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values );\n\n    }\n\n    BooleanKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: BooleanKeyframeTrack,\n\n    \tValueTypeName: 'bool',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    \t// Note: Actually this track could have a optimized / compressed\n    \t// representation of a single value and a custom interpolant that\n    \t// computes \"firstValue ^ isOdd( index )\".\n\n    } );\n\n    /**\n     *\n     * A Track of keyframe values that represent color.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    ColorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: ColorKeyframeTrack,\n\n    \tValueTypeName: 'color'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n\n    \t// Note: Very basic implementation and nothing special yet.\n    \t// However, this is the place for color space parameterization.\n\n    } );\n\n    /**\n     *\n     * A timed sequence of keyframes for a specific property.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function KeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.apply( this, arguments );\n\n    }\n\n    KeyframeTrack.prototype = KeyframeTrackPrototype;\n    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\n    // Static methods:\n\n    Object.assign( KeyframeTrack, {\n\n    \t// Serialization (in static context, because of constructor invocation\n    \t// and automatic invocation of .toJSON):\n\n    \tparse: function( json ) {\n\n    \t\tif( json.type === undefined ) {\n\n    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n    \t\t}\n\n    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n    \t\tif ( json.times === undefined ) {\n\n    \t\t\tvar times = [], values = [];\n\n    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n    \t\t\tjson.times = times;\n    \t\t\tjson.values = values;\n\n    \t\t}\n\n    \t\t// derived classes can define a static parse method\n    \t\tif ( trackType.parse !== undefined ) {\n\n    \t\t\treturn trackType.parse( json );\n\n    \t\t} else {\n\n    \t\t\t// by default, we asssume a constructor compatible with the base\n    \t\t\treturn new trackType(\n    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function( track ) {\n\n    \t\tvar trackType = track.constructor;\n\n    \t\tvar json;\n\n    \t\t// derived classes can define a static toJSON method\n    \t\tif ( trackType.toJSON !== undefined ) {\n\n    \t\t\tjson = trackType.toJSON( track );\n\n    \t\t} else {\n\n    \t\t\t// by default, we assume the data can be serialized as-is\n    \t\t\tjson = {\n\n    \t\t\t\t'name': track.name,\n    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\n    \t\t\t};\n\n    \t\t\tvar interpolation = track.getInterpolation();\n\n    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n    \t\t\t\tjson.interpolation = interpolation;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tjson.type = track.ValueTypeName; // mandatory\n\n    \t\treturn json;\n\n    \t},\n\n    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\n    \t\tswitch( typeName.toLowerCase() ) {\n\n    \t\t\tcase \"scalar\":\n    \t\t\tcase \"double\":\n    \t\t\tcase \"float\":\n    \t\t\tcase \"number\":\n    \t\t\tcase \"integer\":\n\n    \t\t\t\treturn NumberKeyframeTrack;\n\n    \t\t\tcase \"vector\":\n    \t\t\tcase \"vector2\":\n    \t\t\tcase \"vector3\":\n    \t\t\tcase \"vector4\":\n\n    \t\t\t\treturn VectorKeyframeTrack;\n\n    \t\t\tcase \"color\":\n\n    \t\t\t\treturn ColorKeyframeTrack;\n\n    \t\t\tcase \"quaternion\":\n\n    \t\t\t\treturn QuaternionKeyframeTrack;\n\n    \t\t\tcase \"bool\":\n    \t\t\tcase \"boolean\":\n\n    \t\t\t\treturn BooleanKeyframeTrack;\n\n    \t\t\tcase \"string\":\n\n    \t\t\t\treturn StringKeyframeTrack;\n\n    \t\t}\n\n    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Reusable set of Tracks that represent an animation.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    function AnimationClip( name, duration, tracks ) {\n\n    \tthis.name = name;\n    \tthis.tracks = tracks;\n    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// this means it should figure out its duration by scanning the tracks\n    \tif ( this.duration < 0 ) {\n\n    \t\tthis.resetDuration();\n\n    \t}\n\n    \tthis.optimize();\n\n    }\n\n    AnimationClip.prototype = {\n\n    \tconstructor: AnimationClip,\n\n    \tresetDuration: function() {\n\n    \t\tvar tracks = this.tracks,\n    \t\t\tduration = 0;\n\n    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n    \t\t\tvar track = this.tracks[ i ];\n\n    \t\t\tduration = Math.max(\n    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n    \t\t}\n\n    \t\tthis.duration = duration;\n\n    \t},\n\n    \ttrim: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \toptimize: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].optimize();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    // Static methods:\n\n    Object.assign( AnimationClip, {\n\n    \tparse: function( json ) {\n\n    \t\tvar tracks = [],\n    \t\t\tjsonTracks = json.tracks,\n    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n    \t\t}\n\n    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n    \t},\n\n\n    \ttoJSON: function( clip ) {\n\n    \t\tvar tracks = [],\n    \t\t\tclipTracks = clip.tracks;\n\n    \t\tvar json = {\n\n    \t\t\t'name': clip.name,\n    \t\t\t'duration': clip.duration,\n    \t\t\t'tracks': tracks\n\n    \t\t};\n\n    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n    \t\t}\n\n    \t\treturn json;\n\n    \t},\n\n\n    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n    \t\tvar numMorphTargets = morphTargetSequence.length;\n    \t\tvar tracks = [];\n\n    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n    \t\t\tvar times = [];\n    \t\t\tvar values = [];\n\n    \t\t\ttimes.push(\n    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n    \t\t\t\t\ti,\n    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n    \t\t\tvalues.push( 0, 1, 0 );\n\n    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\n    \t\t\t// if there is a key at the first frame, duplicate it as the\n    \t\t\t// last frame as well for perfect loop.\n    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n    \t\t\t\ttimes.push( numMorphTargets );\n    \t\t\t\tvalues.push( values[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\ttracks.push(\n    \t\t\t\t\tnew NumberKeyframeTrack(\n    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n    \t\t\t\t\t\ttimes, values\n    \t\t\t\t\t).scale( 1.0 / fps ) );\n    \t\t}\n\n    \t\treturn new AnimationClip( name, -1, tracks );\n\n    \t},\n\n    \tfindByName: function( objectOrClipArray, name ) {\n\n    \t\tvar clipArray = objectOrClipArray;\n\n    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n    \t\t\tvar o = objectOrClipArray;\n    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n    \t\t\tif ( clipArray[ i ].name === name ) {\n\n    \t\t\t\treturn clipArray[ i ];\n\n    \t\t\t}\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n    \t\tvar animationToMorphTargets = {};\n\n    \t\t// tested with https://regex101.com/ on trick sequences\n    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    \t\t// sort morph target names into animation groups based\n    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n    \t\t\tvar morphTarget = morphTargets[ i ];\n    \t\t\tvar parts = morphTarget.name.match( pattern );\n\n    \t\t\tif ( parts && parts.length > 1 ) {\n\n    \t\t\t\tvar name = parts[ 1 ];\n\n    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n    \t\t\t\tif ( ! animationMorphTargets ) {\n\n    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n    \t\t\t\t}\n\n    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar clips = [];\n\n    \t\tfor ( var name in animationToMorphTargets ) {\n\n    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n    \t\t}\n\n    \t\treturn clips;\n\n    \t},\n\n    \t// parse the animation.hierarchy format\n    \tparseAnimation: function( animation, bones ) {\n\n    \t\tif ( ! animation ) {\n\n    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar addNonemptyTrack = function(\n    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n    \t\t\t// only return track if there are actually keys.\n    \t\t\tif ( animationKeys.length !== 0 ) {\n\n    \t\t\t\tvar times = [];\n    \t\t\t\tvar values = [];\n\n    \t\t\t\texports.AnimationUtils.flattenJSON(\n    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n    \t\t\t\t// empty keys are filtered out, so check again\n    \t\t\t\tif ( times.length !== 0 ) {\n\n    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t\tvar tracks = [];\n\n    \t\tvar clipName = animation.name || 'default';\n    \t\t// automatic length determination in AnimationClip.\n    \t\tvar duration = animation.length || -1;\n    \t\tvar fps = animation.fps || 30;\n\n    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\n    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n    \t\t\t// skip empty tracks\n    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n    \t\t\t// process morph targets in a way exactly compatible\n    \t\t\t// with AnimationHandler.init( animation )\n    \t\t\tif ( animationKeys[0].morphTargets ) {\n\n    \t\t\t\t// figure out all morph targets used in this track\n    \t\t\t\tvar morphTargetNames = {};\n    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\t// create a track for each morph target with all zero\n    \t\t\t\t// morphTargetInfluences except for the keys in which\n    \t\t\t\t// the morphTarget is named.\n    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n    \t\t\t\t\tvar times = [];\n    \t\t\t\t\tvar values = [];\n\n    \t\t\t\t\tfor ( var m = 0;\n    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n    \t\t\t\t\t\ttimes.push( animationKey.time );\n    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n    \t\t\t} else {\n    \t\t\t\t// ...assume skeletal animation\n\n    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tracks.length === 0 ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n    \t\treturn clip;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MaterialLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.textures = {};\n\n    }\n\n    Object.assign( MaterialLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTextures: function ( value ) {\n\n    \t\tthis.textures = value;\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar textures = this.textures;\n\n    \t\tfunction getTexture( name ) {\n\n    \t\t\tif ( textures[ name ] === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n    \t\t\t}\n\n    \t\t\treturn textures[ name ];\n\n    \t\t}\n\n    \t\tvar material = new Materials[ json.type ]();\n\n    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n    \t\tif ( json.name !== undefined ) material.name = json.name;\n    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n    \t\tif ( json.side !== undefined ) material.side = json.side;\n    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n    \t\t// for PointsMaterial\n\n    \t\tif ( json.size !== undefined ) material.size = json.size;\n    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n    \t\t// maps\n\n    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n    \t\tif ( json.alphaMap !== undefined ) {\n\n    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n    \t\t\tmaterial.transparent = true;\n\n    \t\t}\n\n    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n    \t\tif ( json.normalScale !== undefined ) {\n\n    \t\t\tvar normalScale = json.normalScale;\n\n    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n    \t\t\t}\n\n    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n    \t\t}\n\n    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n    \t\t// MultiMaterial\n\n    \t\tif ( json.materials !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn material;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometryLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( BufferGeometryLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar geometry = new BufferGeometry();\n\n    \t\tvar index = json.data.index;\n\n    \t\tvar TYPED_ARRAYS = {\n    \t\t\t'Int8Array': Int8Array,\n    \t\t\t'Uint8Array': Uint8Array,\n    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n    \t\t\t'Int16Array': Int16Array,\n    \t\t\t'Uint16Array': Uint16Array,\n    \t\t\t'Int32Array': Int32Array,\n    \t\t\t'Uint32Array': Uint32Array,\n    \t\t\t'Float32Array': Float32Array,\n    \t\t\t'Float64Array': Float64Array\n    \t\t};\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n    \t\t}\n\n    \t\tvar attributes = json.data.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n    \t\t}\n\n    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    \t\tif ( groups !== undefined ) {\n\n    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar boundingSphere = json.data.boundingSphere;\n\n    \t\tif ( boundingSphere !== undefined ) {\n\n    \t\t\tvar center = new Vector3();\n\n    \t\t\tif ( boundingSphere.center !== undefined ) {\n\n    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\n    \t\t\t}\n\n    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Loader() {\n\n    \tthis.onLoadStart = function () {};\n    \tthis.onLoadProgress = function () {};\n    \tthis.onLoadComplete = function () {};\n\n    }\n\n    Loader.prototype = {\n\n    \tconstructor: Loader,\n\n    \tcrossOrigin: undefined,\n\n    \textractUrlBase: function ( url ) {\n\n    \t\tvar parts = url.split( '/' );\n\n    \t\tif ( parts.length === 1 ) return './';\n\n    \t\tparts.pop();\n\n    \t\treturn parts.join( '/' ) + '/';\n\n    \t},\n\n    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n    \t\tvar array = [];\n\n    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n    \t\t}\n\n    \t\treturn array;\n\n    \t},\n\n    \tcreateMaterial: ( function () {\n\n    \t\tvar color, textureLoader, materialLoader;\n\n    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n    \t\t\tif ( color === undefined ) color = new Color();\n    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n    \t\t\t// convert from old material format\n\n    \t\t\tvar textures = {};\n\n    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n    \t\t\t\tvar fullPath = texturePath + path;\n    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n    \t\t\t\tvar texture;\n\n    \t\t\t\tif ( loader !== null ) {\n\n    \t\t\t\t\ttexture = loader.load( fullPath );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( repeat !== undefined ) {\n\n    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( offset !== undefined ) {\n\n    \t\t\t\t\ttexture.offset.fromArray( offset );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( wrap !== undefined ) {\n\n    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( anisotropy !== undefined ) {\n\n    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\n    \t\t\t\ttextures[ uuid ] = texture;\n\n    \t\t\t\treturn uuid;\n\n    \t\t\t}\n\n    \t\t\t//\n\n    \t\t\tvar json = {\n    \t\t\t\tuuid: exports.Math.generateUUID(),\n    \t\t\t\ttype: 'MeshLambertMaterial'\n    \t\t\t};\n\n    \t\t\tfor ( var name in m ) {\n\n    \t\t\t\tvar value = m[ name ];\n\n    \t\t\t\tswitch ( name ) {\n    \t\t\t\t\tcase 'DbgColor':\n    \t\t\t\t\tcase 'DbgIndex':\n    \t\t\t\t\tcase 'opticalDensity':\n    \t\t\t\t\tcase 'illumination':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'DbgName':\n    \t\t\t\t\t\tjson.name = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'blending':\n    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorAmbient':\n    \t\t\t\t\tcase 'mapAmbient':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorDiffuse':\n    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorSpecular':\n    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorEmissive':\n    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'specularCoef':\n    \t\t\t\t\t\tjson.shininess = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'shading':\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuse':\n    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuseRepeat':\n    \t\t\t\t\tcase 'mapDiffuseOffset':\n    \t\t\t\t\tcase 'mapDiffuseWrap':\n    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissive':\n    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissiveRepeat':\n    \t\t\t\t\tcase 'mapEmissiveOffset':\n    \t\t\t\t\tcase 'mapEmissiveWrap':\n    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLight':\n    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLightRepeat':\n    \t\t\t\t\tcase 'mapLightOffset':\n    \t\t\t\t\tcase 'mapLightWrap':\n    \t\t\t\t\tcase 'mapLightAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAO':\n    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAORepeat':\n    \t\t\t\t\tcase 'mapAOOffset':\n    \t\t\t\t\tcase 'mapAOWrap':\n    \t\t\t\t\tcase 'mapAOAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBump':\n    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpScale':\n    \t\t\t\t\t\tjson.bumpScale = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpRepeat':\n    \t\t\t\t\tcase 'mapBumpOffset':\n    \t\t\t\t\tcase 'mapBumpWrap':\n    \t\t\t\t\tcase 'mapBumpAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormal':\n    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalFactor':\n    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalRepeat':\n    \t\t\t\t\tcase 'mapNormalOffset':\n    \t\t\t\t\tcase 'mapNormalWrap':\n    \t\t\t\t\tcase 'mapNormalAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecular':\n    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecularRepeat':\n    \t\t\t\t\tcase 'mapSpecularOffset':\n    \t\t\t\t\tcase 'mapSpecularWrap':\n    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalness':\n    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalnessRepeat':\n    \t\t\t\t\tcase 'mapMetalnessOffset':\n    \t\t\t\t\tcase 'mapMetalnessWrap':\n    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughness':\n    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughnessRepeat':\n    \t\t\t\t\tcase 'mapRoughnessOffset':\n    \t\t\t\t\tcase 'mapRoughnessWrap':\n    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlpha':\n    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlphaRepeat':\n    \t\t\t\t\tcase 'mapAlphaOffset':\n    \t\t\t\t\tcase 'mapAlphaWrap':\n    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'flipSided':\n    \t\t\t\t\t\tjson.side = BackSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'doubleSided':\n    \t\t\t\t\t\tjson.side = DoubleSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'transparency':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n    \t\t\t\t\t\tjson.opacity = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'depthTest':\n    \t\t\t\t\tcase 'depthWrite':\n    \t\t\t\t\tcase 'colorWrite':\n    \t\t\t\t\tcase 'opacity':\n    \t\t\t\t\tcase 'reflectivity':\n    \t\t\t\t\tcase 'transparent':\n    \t\t\t\t\tcase 'visible':\n    \t\t\t\t\tcase 'wireframe':\n    \t\t\t\t\t\tjson[ name ] = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'vertexColors':\n    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tdefault:\n    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n    \t\t\tmaterialLoader.setTextures( textures );\n\n    \t\t\treturn materialLoader.parse( json );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    Loader.Handlers = {\n\n    \thandlers: [],\n\n    \tadd: function ( regex, loader ) {\n\n    \t\tthis.handlers.push( regex, loader );\n\n    \t},\n\n    \tget: function ( file ) {\n\n    \t\tvar handlers = this.handlers;\n\n    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n    \t\t\tvar regex = handlers[ i ];\n    \t\t\tvar loader  = handlers[ i + 1 ];\n\n    \t\t\tif ( regex.test( file ) ) {\n\n    \t\t\t\treturn loader;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function JSONLoader( manager ) {\n\n    \tif ( typeof manager === 'boolean' ) {\n\n    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n    \t\tmanager = undefined;\n\n    \t}\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \tthis.withCredentials = false;\n\n    }\n\n    Object.assign( JSONLoader.prototype, {\n\n    \tload: function( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json = JSON.parse( text );\n    \t\t\tvar metadata = json.metadata;\n\n    \t\t\tif ( metadata !== undefined ) {\n\n    \t\t\t\tvar type = metadata.type;\n\n    \t\t\t\tif ( type !== undefined ) {\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar object = scope.parse( json, texturePath );\n    \t\t\tonLoad( object.geometry, object.materials );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tparse: function ( json, texturePath ) {\n\n    \t\tvar geometry = new Geometry(),\n    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    \t\tparseModel( scale );\n\n    \t\tparseSkin();\n    \t\tparseMorphing( scale );\n    \t\tparseAnimations();\n\n    \t\tgeometry.computeFaceNormals();\n    \t\tgeometry.computeBoundingSphere();\n\n    \t\tfunction parseModel( scale ) {\n\n    \t\t\tfunction isBitSet( value, position ) {\n\n    \t\t\t\treturn value & ( 1 << position );\n\n    \t\t\t}\n\n    \t\t\tvar i, j, fi,\n\n    \t\t\toffset, zLength,\n\n    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n    \t\t\ttype,\n    \t\t\tisQuad,\n    \t\t\thasMaterial,\n    \t\t\thasFaceVertexUv,\n    \t\t\thasFaceNormal, hasFaceVertexNormal,\n    \t\t\thasFaceColor, hasFaceVertexColor,\n\n    \t\tvertex, face, faceA, faceB, hex, normal,\n\n    \t\t\tuvLayer, uv, u, v,\n\n    \t\t\tfaces = json.faces,\n    \t\t\tvertices = json.vertices,\n    \t\t\tnormals = json.normals,\n    \t\t\tcolors = json.colors,\n\n    \t\t\tnUvLayers = 0;\n\n    \t\t\tif ( json.uvs !== undefined ) {\n\n    \t\t\t\t// disregard empty arrays\n\n    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = vertices.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\tvertex = new Vector3();\n\n    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n    \t\t\t\tgeometry.vertices.push( vertex );\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = faces.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\ttype = faces[ offset ++ ];\n\n\n    \t\t\t\tisQuad              = isBitSet( type, 0 );\n    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n    \t\t\t\tif ( isQuad ) {\n\n    \t\t\t\t\tfaceA = new Face3();\n    \t\t\t\t\tfaceA.a = faces[ offset ];\n    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n    \t\t\t\t\tfaceB = new Face3();\n    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n    \t\t\t\t\toffset += 4;\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tfaceA.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\tfaceA.color.setHex( hex );\n    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( faceA );\n    \t\t\t\t\tgeometry.faces.push( faceB );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface = new Face3();\n    \t\t\t\t\tface.a = faces[ offset ++ ];\n    \t\t\t\t\tface.b = faces[ offset ++ ];\n    \t\t\t\t\tface.c = faces[ offset ++ ];\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tface.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( face );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseSkin() {\n\n    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n    \t\t\tif ( json.skinWeights ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.skinIndices ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry.bones = json.bones;\n\n    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseMorphing( scale ) {\n\n    \t\t\tif ( json.morphTargets !== undefined ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n    \t\t\t\t\t\tvar vertex = new Vector3();\n    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n    \t\t\t\t\t\tdstVertices.push( vertex );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseAnimations() {\n\n    \t\t\tvar outputAnimations = [];\n\n    \t\t\t// parse old style Bone/Hierarchy animations\n    \t\t\tvar animations = [];\n\n    \t\t\tif ( json.animation !== undefined ) {\n\n    \t\t\t\tanimations.push( json.animation );\n\n    \t\t\t}\n\n    \t\t\tif ( json.animations !== undefined ) {\n\n    \t\t\t\tif ( json.animations.length ) {\n\n    \t\t\t\t\tanimations = animations.concat( json.animations );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tanimations.push( json.animations );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n    \t\t\t}\n\n    \t\t\t// parse implicit morph animations\n    \t\t\tif ( geometry.morphTargets ) {\n\n    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n    \t\t\t}\n\n    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n    \t\t}\n\n    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n    \t\t\treturn { geometry: geometry };\n\n    \t\t} else {\n\n    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n    \t\t\treturn { geometry: geometry, materials: materials };\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ObjectLoader ( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.texturePath = '';\n\n    }\n\n    Object.assign( ObjectLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.texturePath === '' ) {\n\n    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n    \t\t}\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n\n    \t},\n\n    \tparse: function ( json, onLoad ) {\n\n    \t\tvar geometries = this.parseGeometries( json.geometries );\n\n    \t\tvar images = this.parseImages( json.images, function () {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t} );\n\n    \t\tvar textures  = this.parseTextures( json.textures, images );\n    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\n    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\n    \t\tif ( json.animations ) {\n\n    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\n    \t\t}\n\n    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t}\n\n    \t\treturn object;\n\n    \t},\n\n    \tparseGeometries: function ( json ) {\n\n    \t\tvar geometries = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar geometryLoader = new JSONLoader();\n    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar geometry;\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tswitch ( data.type ) {\n\n    \t\t\t\t\tcase 'PlaneGeometry':\n    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BoxGeometry':\n    \t\t\t\t\tcase 'BoxBufferGeometry':\n    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.depth,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.depthSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CircleGeometry':\n    \t\t\t\t\tcase 'CircleBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CylinderGeometry':\n    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radiusTop,\n    \t\t\t\t\t\t\tdata.radiusBottom,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'ConeGeometry':\n    \t\t\t\t\tcase 'ConeBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'SphereGeometry':\n    \t\t\t\t\tcase 'SphereBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'DodecahedronGeometry':\n    \t\t\t\t\tcase 'IcosahedronGeometry':\n    \t\t\t\t\tcase 'OctahedronGeometry':\n    \t\t\t\t\tcase 'TetrahedronGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.detail\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'RingGeometry':\n    \t\t\t\t\tcase 'RingBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.innerRadius,\n    \t\t\t\t\t\t\tdata.outerRadius,\n    \t\t\t\t\t\t\tdata.thetaSegments,\n    \t\t\t\t\t\t\tdata.phiSegments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusGeometry':\n    \t\t\t\t\tcase 'TorusBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.arc\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusKnotGeometry':\n    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.p,\n    \t\t\t\t\t\t\tdata.q\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'LatheGeometry':\n    \t\t\t\t\tcase 'LatheBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.points,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BufferGeometry':\n\n    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'Geometry':\n\n    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tdefault:\n\n    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n    \t\t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tgeometry.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometries;\n\n    \t},\n\n    \tparseMaterials: function ( json, textures ) {\n\n    \t\tvar materials = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar loader = new MaterialLoader();\n    \t\t\tloader.setTextures( textures );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar material = loader.parse( json[ i ] );\n    \t\t\t\tmaterials[ material.uuid ] = material;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn materials;\n\n    \t},\n\n    \tparseAnimations: function ( json ) {\n\n    \t\tvar animations = [];\n\n    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n    \t\t\tanimations.push( clip );\n\n    \t\t}\n\n    \t\treturn animations;\n\n    \t},\n\n    \tparseImages: function ( json, onLoad ) {\n\n    \t\tvar scope = this;\n    \t\tvar images = {};\n\n    \t\tfunction loadImage( url ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\treturn loader.load( url, function () {\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, undefined, function () {\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t} );\n\n    \t\t}\n\n    \t\tif ( json !== undefined && json.length > 0 ) {\n\n    \t\t\tvar manager = new LoadingManager( onLoad );\n\n    \t\t\tvar loader = new ImageLoader( manager );\n    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar image = json[ i ];\n    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn images;\n\n    \t},\n\n    \tparseTextures: function ( json, images ) {\n\n    \t\tfunction parseConstant( value, type ) {\n\n    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\n    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n    \t\t\treturn type[ value ];\n\n    \t\t}\n\n    \t\tvar textures = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tif ( data.image === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n    \t\t\t\t}\n\n    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\ttexture.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n    \t\t\t\tif ( data.wrap !== undefined ) {\n\n    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n    \t\t\t\ttextures[ data.uuid ] = texture;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn textures;\n\n    \t},\n\n    \tparseObject: function () {\n\n    \t\tvar matrix = new Matrix4();\n\n    \t\treturn function parseObject( data, geometries, materials ) {\n\n    \t\t\tvar object;\n\n    \t\t\tfunction getGeometry( name ) {\n\n    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn geometries[ name ];\n\n    \t\t\t}\n\n    \t\t\tfunction getMaterial( name ) {\n\n    \t\t\t\tif ( name === undefined ) return undefined;\n\n    \t\t\t\tif ( materials[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn materials[ name ];\n\n    \t\t\t}\n\n    \t\t\tswitch ( data.type ) {\n\n    \t\t\t\tcase 'Scene':\n\n    \t\t\t\t\tobject = new Scene();\n\n    \t\t\t\t\tif ( data.background !== undefined ) {\n\n    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( data.fog !== undefined ) {\n\n    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PerspectiveCamera':\n\n    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'OrthographicCamera':\n\n    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'AmbientLight':\n\n    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'DirectionalLight':\n\n    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n\n    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n\n    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n\n    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Mesh':\n\n    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n    \t\t\t\t\tvar material = getMaterial( data.material );\n\n    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LOD':\n\n    \t\t\t\t\tobject = new LOD();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Line':\n\n    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LineSegments':\n\n    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointCloud':\n    \t\t\t\tcase 'Points':\n\n    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Sprite':\n\n    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Group':\n\n    \t\t\t\t\tobject = new Group();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tobject = new Object3D();\n\n    \t\t\t}\n\n    \t\t\tobject.uuid = data.uuid;\n\n    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n    \t\t\tif ( data.matrix !== undefined ) {\n\n    \t\t\t\tmatrix.fromArray( data.matrix );\n    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n    \t\t\t}\n\n    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n    \t\t\tif ( data.shadow ) {\n\n    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n    \t\t\t}\n\n    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n    \t\t\tif ( data.children !== undefined ) {\n\n    \t\t\t\tfor ( var child in data.children ) {\n\n    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( data.type === 'LOD' ) {\n\n    \t\t\t\tvar levels = data.levels;\n\n    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\t\t\tvar level = levels[ l ];\n    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n    \t\t\t\t\tif ( child !== undefined ) {\n\n    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn object;\n\n    \t\t};\n\n    \t}()\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Extensible curve object\n     *\n     * Some common of Curve methods\n     * .getPoint(t), getTangent(t)\n     * .getPointAt(u), getTangentAt(u)\n     * .getPoints(), .getSpacedPoints()\n     * .getLength()\n     * .updateArcLengths()\n     *\n     * This following classes subclasses THREE.Curve:\n     *\n     * -- 2d classes --\n     * THREE.LineCurve\n     * THREE.QuadraticBezierCurve\n     * THREE.CubicBezierCurve\n     * THREE.SplineCurve\n     * THREE.ArcCurve\n     * THREE.EllipseCurve\n     *\n     * -- 3d classes --\n     * THREE.LineCurve3\n     * THREE.QuadraticBezierCurve3\n     * THREE.CubicBezierCurve3\n     * THREE.SplineCurve3\n     *\n     * A series of curves can be represented as a THREE.CurvePath\n     *\n     **/\n\n    /**************************************************************\n     *\tAbstract Curve base class\n     **************************************************************/\n\n    function Curve() {}\n\n    Curve.prototype = {\n\n    \tconstructor: Curve,\n\n    \t// Virtual base class method to overwrite and implement in subclasses\n    \t//\t- t [0 .. 1]\n\n    \tgetPoint: function ( t ) {\n\n    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n    \t\treturn null;\n\n    \t},\n\n    \t// Get point at relative position in curve according to arc length\n    \t// - u [0 .. 1]\n\n    \tgetPointAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getPoint( t );\n\n    \t},\n\n    \t// Get sequence of points using getPoint( t )\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get sequence of points using getPointAt( u )\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get total curve arc length\n\n    \tgetLength: function () {\n\n    \t\tvar lengths = this.getLengths();\n    \t\treturn lengths[ lengths.length - 1 ];\n\n    \t},\n\n    \t// Get list of cumulative segment lengths\n\n    \tgetLengths: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n    \t\tif ( this.cacheArcLengths\n    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n    \t\t\t&& ! this.needsUpdate ) {\n\n    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n    \t\t\treturn this.cacheArcLengths;\n\n    \t\t}\n\n    \t\tthis.needsUpdate = false;\n\n    \t\tvar cache = [];\n    \t\tvar current, last = this.getPoint( 0 );\n    \t\tvar p, sum = 0;\n\n    \t\tcache.push( 0 );\n\n    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n    \t\t\tcurrent = this.getPoint ( p / divisions );\n    \t\t\tsum += current.distanceTo( last );\n    \t\t\tcache.push( sum );\n    \t\t\tlast = current;\n\n    \t\t}\n\n    \t\tthis.cacheArcLengths = cache;\n\n    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n    \t},\n\n    \tupdateArcLengths: function() {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    \tgetUtoTmapping: function ( u, distance ) {\n\n    \t\tvar arcLengths = this.getLengths();\n\n    \t\tvar i = 0, il = arcLengths.length;\n\n    \t\tvar targetArcLength; // The targeted u distance value to get\n\n    \t\tif ( distance ) {\n\n    \t\t\ttargetArcLength = distance;\n\n    \t\t} else {\n\n    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n    \t\t}\n\n    \t\t//var time = Date.now();\n\n    \t\t// binary search for the index with largest value smaller than target u distance\n\n    \t\tvar low = 0, high = il - 1, comparison;\n\n    \t\twhile ( low <= high ) {\n\n    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n    \t\t\tif ( comparison < 0 ) {\n\n    \t\t\t\tlow = i + 1;\n\n    \t\t\t} else if ( comparison > 0 ) {\n\n    \t\t\t\thigh = i - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\thigh = i;\n    \t\t\t\tbreak;\n\n    \t\t\t\t// DONE\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\ti = high;\n\n    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\n    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n    \t\t\tvar t = i / ( il - 1 );\n    \t\t\treturn t;\n\n    \t\t}\n\n    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n    \t\tvar lengthBefore = arcLengths[ i ];\n    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\n    \t\t// determine where we are between the 'before' and 'after' points\n\n    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    \t\t// add that fractional amount to t\n\n    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n    \t\treturn t;\n\n    \t},\n\n    \t// Returns a unit vector tangent at t\n    \t// In case any sub curve does not implement its tangent derivation,\n    \t// 2 points a small delta apart will be used to find its gradient\n    \t// which seems to give a reasonable approximation\n\n    \tgetTangent: function( t ) {\n\n    \t\tvar delta = 0.0001;\n    \t\tvar t1 = t - delta;\n    \t\tvar t2 = t + delta;\n\n    \t\t// Capping in case of danger\n\n    \t\tif ( t1 < 0 ) t1 = 0;\n    \t\tif ( t2 > 1 ) t2 = 1;\n\n    \t\tvar pt1 = this.getPoint( t1 );\n    \t\tvar pt2 = this.getPoint( t2 );\n\n    \t\tvar vec = pt2.clone().sub( pt1 );\n    \t\treturn vec.normalize();\n\n    \t},\n\n    \tgetTangentAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getTangent( t );\n\n    \t}\n\n    };\n\n    // TODO: Transformation for Curves?\n\n    /**************************************************************\n     *\t3D Curves\n     **************************************************************/\n\n    // A Factory method for creating new curve subclasses\n\n    Curve.create = function ( constructor, getPointFunc ) {\n\n    \tconstructor.prototype = Object.create( Curve.prototype );\n    \tconstructor.prototype.constructor = constructor;\n    \tconstructor.prototype.getPoint = getPointFunc;\n\n    \treturn constructor;\n\n    };\n\n    /**************************************************************\n     *\tLine\n     **************************************************************/\n\n    function LineCurve( v1, v2 ) {\n\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    LineCurve.prototype = Object.create( Curve.prototype );\n    LineCurve.prototype.constructor = LineCurve;\n\n    LineCurve.prototype.isLineCurve = true;\n\n    LineCurve.prototype.getPoint = function ( t ) {\n\n    \tif ( t === 1 ) {\n\n    \t\treturn this.v2.clone();\n\n    \t}\n\n    \tvar point = this.v2.clone().sub( this.v1 );\n    \tpoint.multiplyScalar( t ).add( this.v1 );\n\n    \treturn point;\n\n    };\n\n    // Line curve is linear, so we can overwrite default getPointAt\n\n    LineCurve.prototype.getPointAt = function ( u ) {\n\n    \treturn this.getPoint( u );\n\n    };\n\n    LineCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangent = this.v2.clone().sub( this.v1 );\n\n    \treturn tangent.normalize();\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     **/\n\n    /**************************************************************\n     *\tCurved Path - a curve path is simply a array of connected\n     *  curves, but retains the api of a curve\n     **************************************************************/\n\n    function CurvePath() {\n\n    \tthis.curves = [];\n\n    \tthis.autoClose = false; // Automatically closes the path\n\n    }\n\n    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n    \tconstructor: CurvePath,\n\n    \tadd: function ( curve ) {\n\n    \t\tthis.curves.push( curve );\n\n    \t},\n\n    \tclosePath: function () {\n\n    \t\t// Add a line curve if start and end of lines are not connected\n    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\n    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n    \t\t}\n\n    \t},\n\n    \t// To get accurate point with reference to\n    \t// entire path distance at time t,\n    \t// following has to be done:\n\n    \t// 1. Length of each sub path have to be known\n    \t// 2. Locate and identify type of curve\n    \t// 3. Get t for the curve\n    \t// 4. Return curve.getPointAt(t')\n\n    \tgetPoint: function ( t ) {\n\n    \t\tvar d = t * this.getLength();\n    \t\tvar curveLengths = this.getCurveLengths();\n    \t\tvar i = 0;\n\n    \t\t// To think about boundaries points.\n\n    \t\twhile ( i < curveLengths.length ) {\n\n    \t\t\tif ( curveLengths[ i ] >= d ) {\n\n    \t\t\t\tvar diff = curveLengths[ i ] - d;\n    \t\t\t\tvar curve = this.curves[ i ];\n\n    \t\t\t\tvar segmentLength = curve.getLength();\n    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n    \t\t\t\treturn curve.getPointAt( u );\n\n    \t\t\t}\n\n    \t\t\ti ++;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\n    \t},\n\n    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    \t// getPoint() depends on getLength\n\n    \tgetLength: function () {\n\n    \t\tvar lens = this.getCurveLengths();\n    \t\treturn lens[ lens.length - 1 ];\n\n    \t},\n\n    \t// cacheLengths must be recalculated.\n    \tupdateArcLengths: function () {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.cacheLengths = null;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Compute lengths and cache them\n    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    \tgetCurveLengths: function () {\n\n    \t\t// We use cache values if curves and cache array are same length\n\n    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n    \t\t\treturn this.cacheLengths;\n\n    \t\t}\n\n    \t\t// Get length of sub-curve\n    \t\t// Push sums into cached array\n\n    \t\tvar lengths = [], sums = 0;\n\n    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n    \t\t\tsums += this.curves[ i ].getLength();\n    \t\t\tlengths.push( sums );\n\n    \t\t}\n\n    \t\tthis.cacheLengths = lengths;\n\n    \t\treturn lengths;\n\n    \t},\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 40;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n    \t\t}\n\n    \t\tif ( this.autoClose ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tdivisions = divisions || 12;\n\n    \t\tvar points = [], last;\n\n    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n    \t\t\tvar curve = curves[ i ];\n    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n    \t\t\t\t: divisions;\n\n    \t\t\tvar pts = curve.getPoints( resolution );\n\n    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n    \t\t\t\tvar point = pts[ j ];\n\n    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n    \t\t\t\tpoints.push( point );\n    \t\t\t\tlast = point;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t/**************************************************************\n    \t *\tCreate Geometries Helpers\n    \t **************************************************************/\n\n    \t/// Generate geometry from path points (for Line or Points objects)\n\n    \tcreatePointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \t// Generate geometry from equidistant sampling along the path\n\n    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getSpacedPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \tcreateGeometry: function ( points ) {\n\n    \t\tvar geometry = new Geometry();\n\n    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n    \t\t\tvar point = points[ i ];\n    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**************************************************************\n     *\tEllipse curve\n     **************************************************************/\n\n    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \tthis.aX = aX;\n    \tthis.aY = aY;\n\n    \tthis.xRadius = xRadius;\n    \tthis.yRadius = yRadius;\n\n    \tthis.aStartAngle = aStartAngle;\n    \tthis.aEndAngle = aEndAngle;\n\n    \tthis.aClockwise = aClockwise;\n\n    \tthis.aRotation = aRotation || 0;\n\n    }\n\n    EllipseCurve.prototype = Object.create( Curve.prototype );\n    EllipseCurve.prototype.constructor = EllipseCurve;\n\n    EllipseCurve.prototype.isEllipseCurve = true;\n\n    EllipseCurve.prototype.getPoint = function( t ) {\n\n    \tvar twoPi = Math.PI * 2;\n    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n    \t// ensures that deltaAngle is 0 .. 2 PI\n    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n    \tif ( deltaAngle < Number.EPSILON ) {\n\n    \t\tif ( samePoints ) {\n\n    \t\t\tdeltaAngle = 0;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tif ( this.aClockwise === true && ! samePoints ) {\n\n    \t\tif ( deltaAngle === twoPi ) {\n\n    \t\t\tdeltaAngle = - twoPi;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tvar angle = this.aStartAngle + t * deltaAngle;\n    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n    \tif ( this.aRotation !== 0 ) {\n\n    \t\tvar cos = Math.cos( this.aRotation );\n    \t\tvar sin = Math.sin( this.aRotation );\n\n    \t\tvar tx = x - this.aX;\n    \t\tvar ty = y - this.aY;\n\n    \t\t// Rotate the point about the center of the ellipse.\n    \t\tx = tx * cos - ty * sin + this.aX;\n    \t\ty = tx * sin + ty * cos + this.aY;\n\n    \t}\n\n    \treturn new Vector2( x, y );\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.CurveUtils = {\n\n    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    \t},\n\n    \t// Puay Bing, thanks for helping with this derivative!\n\n    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n    \t\t\t3 * t * t * p3;\n\n    \t},\n\n    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n    \t\t// To check if my formulas are correct\n\n    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n    \t\treturn h00 + h10 + h01 + h11;\n\n    \t},\n\n    \t// Catmull-Rom\n\n    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t * t2;\n    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    };\n\n    /**************************************************************\n     *\tSpline curve\n     **************************************************************/\n\n    function SplineCurve( points /* array of Vector2 */ ) {\n\n    \tthis.points = ( points === undefined ) ? [] : points;\n\n    }\n\n    SplineCurve.prototype = Object.create( Curve.prototype );\n    SplineCurve.prototype.constructor = SplineCurve;\n\n    SplineCurve.prototype.isSplineCurve = true;\n\n    SplineCurve.prototype.getPoint = function ( t ) {\n\n    \tvar points = this.points;\n    \tvar point = ( points.length - 1 ) * t;\n\n    \tvar intPoint = Math.floor( point );\n    \tvar weight = point - intPoint;\n\n    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n    \tvar point1 = points[ intPoint ];\n    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \tvar interpolate = exports.CurveUtils.interpolate;\n\n    \treturn new Vector2(\n    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n    \t);\n\n    };\n\n    /**************************************************************\n     *\tCubic Bezier curve\n     **************************************************************/\n\n    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n    \tthis.v3 = v3;\n\n    }\n\n    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b3 = exports.ShapeUtils.b3;\n\n    \treturn new Vector2(\n    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t);\n\n    };\n\n    CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\n    \treturn new Vector2(\n    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t).normalize();\n\n    };\n\n    /**************************************************************\n     *\tQuadratic Bezier curve\n     **************************************************************/\n\n\n    function QuadraticBezierCurve( v0, v1, v2 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b2 = exports.ShapeUtils.b2;\n\n    \treturn new Vector2(\n    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n    \t);\n\n    };\n\n\n    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\n    \treturn new Vector2(\n    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n    \t).normalize();\n\n    };\n\n    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n    \tfromPoints: function ( vectors ) {\n\n    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n    \t\t}\n\n    \t},\n\n    \tmoveTo: function ( x, y ) {\n\n    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n    \t},\n\n    \tlineTo: function ( x, y ) {\n\n    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( x, y );\n\n    \t},\n\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n    \t\tvar curve = new QuadraticBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCPx, aCPy ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n    \t\tvar curve = new CubicBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCP1x, aCP1y ),\n    \t\t\tnew Vector2( aCP2x, aCP2y ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n    \t\tvar curve = new SplineCurve( npts );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n    \t},\n\n    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n    \t\t\taStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t},\n\n    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t\tif ( this.curves.length > 0 ) {\n\n    \t\t\t// if a previous curve is present, attempt to join\n    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\n    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.curves.push( curve );\n\n    \t\tvar lastPoint = curve.getPoint( 1 );\n    \t\tthis.currentPoint.copy( lastPoint );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n    function Shape() {\n\n    \tPath.apply( this, arguments );\n\n    \tthis.holes = [];\n\n    }\n\n    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n    \tconstructor: Shape,\n\n    \tgetPointsHoles: function ( divisions ) {\n\n    \t\tvar holesPts = [];\n\n    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n    \t\t}\n\n    \t\treturn holesPts;\n\n    \t},\n\n    \t// Get points of shape and holes (keypoints based on segments parameter)\n\n    \textractAllPoints: function ( divisions ) {\n\n    \t\treturn {\n\n    \t\t\tshape: this.getPoints( divisions ),\n    \t\t\tholes: this.getPointsHoles( divisions )\n\n    \t\t};\n\n    \t},\n\n    \textractPoints: function ( divisions ) {\n\n    \t\treturn this.extractAllPoints( divisions );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Creates free form 2d path using series of points, lines or curves.\n     *\n     **/\n\n    function Path( points ) {\n\n    \tCurvePath.call( this );\n    \tthis.currentPoint = new Vector2();\n\n    \tif ( points ) {\n\n    \t\tthis.fromPoints( points );\n\n    \t}\n\n    }\n\n    Path.prototype = PathPrototype;\n    PathPrototype.constructor = Path;\n\n\n    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n    function ShapePath() {\n    \tthis.subPaths = [];\n    \tthis.currentPath = null;\n    }\n\n    ShapePath.prototype = {\n    \tmoveTo: function ( x, y ) {\n    \t\tthis.currentPath = new Path();\n    \t\tthis.subPaths.push(this.currentPath);\n    \t\tthis.currentPath.moveTo( x, y );\n    \t},\n    \tlineTo: function ( x, y ) {\n    \t\tthis.currentPath.lineTo( x, y );\n    \t},\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n    \t},\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n    \t},\n    \tsplineThru: function ( pts ) {\n    \t\tthis.currentPath.splineThru( pts );\n    \t},\n\n    \ttoShapes: function ( isCCW, noHoles ) {\n\n    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\n    \t\t\tvar shapes = [];\n\n    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n    \t\t\t\tvar tmpShape = new Shape();\n    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\n    \t\t\t\tshapes.push( tmpShape );\n\n    \t\t\t}\n\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n    \t\t\tvar polyLen = inPolygon.length;\n\n    \t\t\t// inPt on polygon contour => immediate success    or\n    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n    \t\t\t//  with the horizontal line through inPt, left of inPt\n    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n    \t\t\tvar inside = false;\n    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n    \t\t\t\t\t// not parallel\n    \t\t\t\t\tif ( edgeDy < 0 ) {\n\n    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// parallel or collinear\n    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n    \t\t\t\t\t// continue;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn\tinside;\n\n    \t\t}\n\n    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\n    \t\tvar subPaths = this.subPaths;\n    \t\tif ( subPaths.length === 0 ) return [];\n\n    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n    \t\tif ( subPaths.length === 1 ) {\n\n    \t\t\ttmpPath = subPaths[ 0 ];\n    \t\t\ttmpShape = new Shape();\n    \t\t\ttmpShape.curves = tmpPath.curves;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n    \t\t// console.log(\"Holes first\", holesFirst);\n\n    \t\tvar betterShapeHoles = [];\n    \t\tvar newShapes = [];\n    \t\tvar newShapeHoles = [];\n    \t\tvar mainIdx = 0;\n    \t\tvar tmpPoints;\n\n    \t\tnewShapes[ mainIdx ] = undefined;\n    \t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n    \t\t\ttmpPath = subPaths[ i ];\n    \t\t\ttmpPoints = tmpPath.getPoints();\n    \t\t\tsolid = isClockWise( tmpPoints );\n    \t\t\tsolid = isCCW ? ! solid : solid;\n\n    \t\t\tif ( solid ) {\n\n    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\t\t\t//console.log('cw', i);\n\n    \t\t\t} else {\n\n    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n    \t\t\t\t//console.log('ccw', i);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// only Holes? -> probably all Shapes with wrong orientation\n    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tif ( newShapes.length > 1 ) {\n\n    \t\t\tvar ambiguous = false;\n    \t\t\tvar toChange = [];\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n    \t\t\t\t\tvar ho = sho[ hIdx ];\n    \t\t\t\t\tvar hole_unassigned = true;\n\n    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\t\t\thole_unassigned = false;\n    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tambiguous = true;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n    \t\t\tif ( toChange.length > 0 ) {\n\n    \t\t\t\t// console.log(\"to change: \", toChange);\n    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar tmpHoles;\n\n    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n    \t\t\ttmpShape = newShapes[ i ].s;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\ttmpHoles = newShapeHoles[ i ];\n\n    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//console.log(\"shape\", shapes);\n\n    \t\treturn shapes;\n\n    \t}\n    }\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Font( data ) {\n\n    \tthis.data = data;\n\n    }\n\n    Object.assign( Font.prototype, {\n\n    \tisFont: true,\n\n    \tgenerateShapes: function ( text, size, divisions ) {\n\n    \t\tfunction createPaths( text ) {\n\n    \t\t\tvar chars = String( text ).split( '' );\n    \t\t\tvar scale = size / data.resolution;\n    \t\t\tvar offset = 0;\n\n    \t\t\tvar paths = [];\n\n    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n    \t\t\t\toffset += ret.offset;\n\n    \t\t\t\tpaths.push( ret.path );\n\n    \t\t\t}\n\n    \t\t\treturn paths;\n\n    \t\t}\n\n    \t\tfunction createPath( c, scale, offset ) {\n\n    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n    \t\t\tif ( ! glyph ) return;\n\n    \t\t\tvar path = new ShapePath();\n\n    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n    \t\t\tif ( glyph.o ) {\n\n    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n    \t\t\t\t\tvar action = outline[ i ++ ];\n\n    \t\t\t\t\tswitch ( action ) {\n\n    \t\t\t\t\t\tcase 'm': // moveTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'l': // lineTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( size === undefined ) size = 100;\n    \t\tif ( divisions === undefined ) divisions = 4;\n\n    \t\tvar data = this.data;\n\n    \t\tvar paths = createPaths( text );\n    \t\tvar shapes = [];\n\n    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    \t\t}\n\n    \t\treturn shapes;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function FontLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( FontLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json;\n\n    \t\t\ttry {\n\n    \t\t\t\tjson = JSON.parse( text );\n\n    \t\t\t} catch ( e ) {\n\n    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n    \t\t\t}\n\n    \t\t\tvar font = scope.parse( json );\n\n    \t\t\tif ( onLoad ) onLoad( font );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\treturn new Font( json );\n\n    \t}\n\n    } );\n\n    var context;\n\n    function getAudioContext() {\n\n    \tif ( context === undefined ) {\n\n    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n    \t}\n\n    \treturn context;\n\n    }\n\n    /**\n     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n     */\n\n    function AudioLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( AudioLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar context = getAudioContext();\n\n    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n    \t\t\t\tonLoad( audioBuffer );\n\n    \t\t\t} );\n\n    \t\t}, onProgress, onError );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function StereoCamera() {\n\n    \tthis.type = 'StereoCamera';\n\n    \tthis.aspect = 1;\n\n    \tthis.eyeSep = 0.064;\n\n    \tthis.cameraL = new PerspectiveCamera();\n    \tthis.cameraL.layers.enable( 1 );\n    \tthis.cameraL.matrixAutoUpdate = false;\n\n    \tthis.cameraR = new PerspectiveCamera();\n    \tthis.cameraR.layers.enable( 2 );\n    \tthis.cameraR.matrixAutoUpdate = false;\n\n    }\n\n    Object.assign( StereoCamera.prototype, {\n\n    \tupdate: ( function () {\n\n    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n    \t\tvar eyeRight = new Matrix4();\n    \t\tvar eyeLeft = new Matrix4();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n    \t\t\tif ( needsUpdate ) {\n\n    \t\t\t\tinstance = this;\n    \t\t\t\tfocus = camera.focus;\n    \t\t\t\tfov = camera.fov;\n    \t\t\t\taspect = camera.aspect * this.aspect;\n    \t\t\t\tnear = camera.near;\n    \t\t\t\tfar = camera.far;\n    \t\t\t\tzoom = camera.zoom;\n\n    \t\t\t\t// Off-axis stereoscopic effect based on\n    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n    \t\t\t\tvar xmin, xmax;\n\n    \t\t\t\t// translate xOffset\n\n    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n    \t\t\t\t// for left eye\n\n    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t\t// for right eye\n\n    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t}\n\n    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    /**\n     * Camera for rendering cube maps\n     *\t- renders scene into axis-aligned cube\n     *\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CubeCamera( near, far, cubeResolution ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'CubeCamera';\n\n    \tvar fov = 90, aspect = 1;\n\n    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPX.up.set( 0, - 1, 0 );\n    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n    \tthis.add( cameraPX );\n\n    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNX.up.set( 0, - 1, 0 );\n    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n    \tthis.add( cameraNX );\n\n    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPY.up.set( 0, 0, 1 );\n    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n    \tthis.add( cameraPY );\n\n    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNY.up.set( 0, 0, - 1 );\n    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n    \tthis.add( cameraNY );\n\n    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPZ.up.set( 0, - 1, 0 );\n    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n    \tthis.add( cameraPZ );\n\n    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNZ.up.set( 0, - 1, 0 );\n    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n    \tthis.add( cameraNZ );\n\n    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n    \tthis.updateCubeMap = function ( renderer, scene ) {\n\n    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n    \t\tvar renderTarget = this.renderTarget;\n    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n    \t\trenderTarget.texture.generateMipmaps = false;\n\n    \t\trenderTarget.activeCubeFace = 0;\n    \t\trenderer.render( scene, cameraPX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 1;\n    \t\trenderer.render( scene, cameraNX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 2;\n    \t\trenderer.render( scene, cameraPY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 3;\n    \t\trenderer.render( scene, cameraNY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 4;\n    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\n    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n    \t\trenderTarget.activeCubeFace = 5;\n    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\n    \t\trenderer.setRenderTarget( null );\n\n    \t};\n\n    }\n\n    CubeCamera.prototype = Object.create( Object3D.prototype );\n    CubeCamera.prototype.constructor = CubeCamera;\n\n    function AudioListener() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'AudioListener';\n\n    \tthis.context = getAudioContext();\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( this.context.destination );\n\n    \tthis.filter = null;\n\n    }\n\n    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: AudioListener,\n\n    \tgetInput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tremoveFilter: function ( ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n    \t\t\tthis.gain.connect( this.context.destination );\n    \t\t\tthis.filter = null;\n\n    \t\t}\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.filter;\n\n    \t},\n\n    \tsetFilter: function ( value ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n\n    \t\t} else {\n\n    \t\t\tthis.gain.disconnect( this.context.destination );\n\n    \t\t}\n\n    \t\tthis.filter = value;\n    \t\tthis.gain.connect( this.filter );\n    \t\tthis.filter.connect( this.context.destination );\n\n    \t},\n\n    \tgetMasterVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n    \tsetMasterVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n    \t\tvar scale = new Vector3();\n\n    \t\tvar orientation = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tvar listener = this.context.listener;\n    \t\t\tvar up = this.up;\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    function Audio( listener ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Audio';\n\n    \tthis.context = listener.context;\n    \tthis.source = this.context.createBufferSource();\n    \tthis.source.onended = this.onEnded.bind( this );\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( listener.getInput() );\n\n    \tthis.autoplay = false;\n\n    \tthis.startTime = 0;\n    \tthis.playbackRate = 1;\n    \tthis.isPlaying = false;\n    \tthis.hasPlaybackControl = true;\n    \tthis.sourceType = 'empty';\n\n    \tthis.filters = [];\n\n    }\n\n    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Audio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tsetNodeSource: function ( audioNode ) {\n\n    \t\tthis.hasPlaybackControl = false;\n    \t\tthis.sourceType = 'audioNode';\n    \t\tthis.source = audioNode;\n    \t\tthis.connect();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetBuffer: function ( audioBuffer ) {\n\n    \t\tthis.source.buffer = audioBuffer;\n    \t\tthis.sourceType = 'buffer';\n\n    \t\tif ( this.autoplay ) this.play();\n\n    \t\treturn this;\n\n    \t},\n\n    \tplay: function () {\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar source = this.context.createBufferSource();\n\n    \t\tsource.buffer = this.source.buffer;\n    \t\tsource.loop = this.source.loop;\n    \t\tsource.onended = this.source.onended;\n    \t\tsource.start( 0, this.startTime );\n    \t\tsource.playbackRate.value = this.playbackRate;\n\n    \t\tthis.isPlaying = true;\n\n    \t\tthis.source = source;\n\n    \t\treturn this.connect();\n\n    \t},\n\n    \tpause: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = this.context.currentTime;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = 0;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.connect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdisconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.disconnect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilters: function () {\n\n    \t\treturn this.filters;\n\n    \t},\n\n    \tsetFilters: function ( value ) {\n\n    \t\tif ( ! value ) value = [];\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.disconnect();\n    \t\t\tthis.filters = value;\n    \t\t\tthis.connect();\n\n    \t\t} else {\n\n    \t\t\tthis.filters = value;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.getFilters()[ 0 ];\n\n    \t},\n\n    \tsetFilter: function ( filter ) {\n\n    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n    \t},\n\n    \tsetPlaybackRate: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.playbackRate = value;\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetPlaybackRate: function () {\n\n    \t\treturn this.playbackRate;\n\n    \t},\n\n    \tonEnded: function () {\n\n    \t\tthis.isPlaying = false;\n\n    \t},\n\n    \tgetLoop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn this.source.loop;\n\n    \t},\n\n    \tsetLoop: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.loop = value;\n\n    \t},\n\n    \tgetVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n\n    \tsetVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    function PositionalAudio( listener ) {\n\n    \tAudio.call( this, listener );\n\n    \tthis.panner = this.context.createPanner();\n    \tthis.panner.connect( this.gain );\n\n    }\n\n    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n    \tconstructor: PositionalAudio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.panner;\n\n    \t},\n\n    \tgetRefDistance: function () {\n\n    \t\treturn this.panner.refDistance;\n\n    \t},\n\n    \tsetRefDistance: function ( value ) {\n\n    \t\tthis.panner.refDistance = value;\n\n    \t},\n\n    \tgetRolloffFactor: function () {\n\n    \t\treturn this.panner.rolloffFactor;\n\n    \t},\n\n    \tsetRolloffFactor: function ( value ) {\n\n    \t\tthis.panner.rolloffFactor = value;\n\n    \t},\n\n    \tgetDistanceModel: function () {\n\n    \t\treturn this.panner.distanceModel;\n\n    \t},\n\n    \tsetDistanceModel: function ( value ) {\n\n    \t\tthis.panner.distanceModel = value;\n\n    \t},\n\n    \tgetMaxDistance: function () {\n\n    \t\treturn this.panner.maxDistance;\n\n    \t},\n\n    \tsetMaxDistance: function ( value ) {\n\n    \t\tthis.panner.maxDistance = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n    \t\t};\n\n    \t} )()\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AudioAnalyser( audio, fftSize ) {\n\n    \tthis.analyser = audio.context.createAnalyser();\n    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n    \taudio.getOutput().connect( this.analyser );\n\n    }\n\n    Object.assign( AudioAnalyser.prototype, {\n\n    \tgetFrequencyData: function () {\n\n    \t\tthis.analyser.getByteFrequencyData( this.data );\n\n    \t\treturn this.data;\n\n    \t},\n\n    \tgetAverageFrequency: function () {\n\n    \t\tvar value = 0, data = this.getFrequencyData();\n\n    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n    \t\t\tvalue += data[ i ];\n\n    \t\t}\n\n    \t\treturn value / data.length;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Buffered scene graph property that allows weighted accumulation.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyMixer( binding, typeName, valueSize ) {\n\n    \tthis.binding = binding;\n    \tthis.valueSize = valueSize;\n\n    \tvar bufferType = Float64Array,\n    \t\tmixFunction;\n\n    \tswitch ( typeName ) {\n\n    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n    \t\tcase 'string':\n    \t\tcase 'bool':\n\n    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n    \t}\n\n    \tthis.buffer = new bufferType( valueSize * 4 );\n    \t// layout: [ incoming | accu0 | accu1 | orig ]\n    \t//\n    \t// interpolators can use .buffer as their .result\n    \t// the data then goes to 'incoming'\n    \t//\n    \t// 'accu0' and 'accu1' are used frame-interleaved for\n    \t// the cumulative result and are compared to detect\n    \t// changes\n    \t//\n    \t// 'orig' stores the original state of the property\n\n    \tthis._mixBufferRegion = mixFunction;\n\n    \tthis.cumulativeWeight = 0;\n\n    \tthis.useCount = 0;\n    \tthis.referenceCount = 0;\n\n    }\n\n    PropertyMixer.prototype = {\n\n    \tconstructor: PropertyMixer,\n\n    \t// accumulate data in the 'incoming' region into 'accu<i>'\n    \taccumulate: function( accuIndex, weight ) {\n\n    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n    \t\t// the weight and shouldn't have made the call in the first place\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tcurrentWeight = this.cumulativeWeight;\n\n    \t\tif ( currentWeight === 0 ) {\n\n    \t\t\t// accuN := incoming * weight\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n    \t\t\t}\n\n    \t\t\tcurrentWeight = weight;\n\n    \t\t} else {\n\n    \t\t\t// accuN := accuN + incoming * weight\n\n    \t\t\tcurrentWeight += weight;\n    \t\t\tvar mix = weight / currentWeight;\n    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = currentWeight;\n\n    \t},\n\n    \t// apply the state of 'accu<i>' to the binding when accus differ\n    \tapply: function( accuIndex ) {\n\n    \t\tvar stride = this.valueSize,\n    \t\t\tbuffer = this.buffer,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tweight = this.cumulativeWeight,\n\n    \t\t\tbinding = this.binding;\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t\tif ( weight < 1 ) {\n\n    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n    \t\t\tvar originalValueOffset = stride * 3;\n\n    \t\t\tthis._mixBufferRegion(\n    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n    \t\t}\n\n    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n    \t\t\t\t// value has changed -> update scene graph\n\n    \t\t\t\tbinding.setValue( buffer, offset );\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remember the state of the bound property and copy it to both accus\n    \tsaveOriginalState: function() {\n\n    \t\tvar binding = this.binding;\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toriginalValueOffset = stride * 3;\n\n    \t\tbinding.getValue( buffer, originalValueOffset );\n\n    \t\t// accu[0..1] := orig -- initially detect changes against the original\n    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t},\n\n    \t// apply the state previously taken via 'saveOriginalState' to the binding\n    \trestoreOriginalState: function() {\n\n    \t\tvar originalValueOffset = this.valueSize * 3;\n    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n    \t},\n\n\n    \t// mix functions\n\n    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tif ( t >= 0.5 ) {\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n    \t},\n\n    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tvar s = 1 - t;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tvar j = dstOffset + i;\n\n    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * A reference to a real property in the scene graph.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyBinding( rootNode, path, parsedPath ) {\n\n    \tthis.path = path;\n    \tthis.parsedPath = parsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis.node = PropertyBinding.findNode(\n    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n    \tthis.rootNode = rootNode;\n\n    }\n\n    PropertyBinding.prototype = {\n\n    \tconstructor: PropertyBinding,\n\n    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.getValue( targetArray, offset );\n\n    \t\t// Note: This class uses a State pattern on a per-method basis:\n    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    \t\t// prototype version of these methods with one that represents\n    \t\t// the bound state. When the property is not found, the methods\n    \t\t// become no-ops.\n\n    \t},\n\n    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.setValue( sourceArray, offset );\n\n    \t},\n\n    \t// create getter / setter pair for a property in the scene graph\n    \tbind: function() {\n\n    \t\tvar targetObject = this.node,\n    \t\t\tparsedPath = this.parsedPath,\n\n    \t\t\tobjectName = parsedPath.objectName,\n    \t\t\tpropertyName = parsedPath.propertyName,\n    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n    \t\tif ( ! targetObject ) {\n\n    \t\t\ttargetObject = PropertyBinding.findNode(\n    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n    \t\t\tthis.node = targetObject;\n\n    \t\t}\n\n    \t\t// set fail state so we can just 'return' on error\n    \t\tthis.getValue = this._getValue_unavailable;\n    \t\tthis.setValue = this._setValue_unavailable;\n\n     \t\t// ensure there is a value node\n    \t\tif ( ! targetObject ) {\n\n    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( objectName ) {\n\n    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\n    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n    \t\t\tswitch ( objectName ) {\n\n    \t\t\t\tcase 'materials':\n\n    \t\t\t\t\tif ( ! targetObject.material ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'bones':\n\n    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n    \t\t\t\t\t// and convert the integer string to a true integer.\n\n    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n    \t\t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n    \t\t\t\t\t\t\tobjectIndex = i;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n    \t\t\t}\n\n\n    \t\t\tif ( objectIndex !== undefined ) {\n\n    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// resolve property\n    \t\tvar nodeProperty = targetObject[ propertyName ];\n\n    \t\tif ( nodeProperty === undefined ) {\n\n    \t\t\tvar nodeName = parsedPath.nodeName;\n\n    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\t// determine versioning scheme\n    \t\tvar versioning = this.Versioning.None;\n\n    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n    \t\t\tversioning = this.Versioning.NeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t}\n\n    \t\t// determine how the property gets bound\n    \t\tvar bindingType = this.BindingType.Direct;\n\n    \t\tif ( propertyIndex !== undefined ) {\n    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n    \t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\tif ( ! targetObject.geometry ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n    \t\t\t\t\t\tpropertyIndex = i;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tbindingType = this.BindingType.ArrayElement;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n    \t\t\tthis.propertyIndex = propertyIndex;\n\n    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\n    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else if ( nodeProperty.length !== undefined ) {\n\n    \t\t\tbindingType = this.BindingType.EntireArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else {\n\n    \t\t\tthis.propertyName = propertyName;\n\n    \t\t}\n\n    \t\t// select getter / setter\n    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tthis.node = null;\n\n    \t\t// back to the prototype version of getValue / setValue\n    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n    \t\tthis.getValue = this._getValue_unbound;\n    \t\tthis.setValue = this._setValue_unbound;\n\n    \t}\n\n    };\n\n    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\n    \t// these are used to \"bind\" a nonexistent property\n    \t_getValue_unavailable: function() {},\n    \t_setValue_unavailable: function() {},\n\n    \t// initial state of these methods that calls 'bind'\n    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n    \tBindingType: {\n    \t\tDirect: 0,\n    \t\tEntireArray: 1,\n    \t\tArrayElement: 2,\n    \t\tHasFromToArray: 3\n    \t},\n\n    \tVersioning: {\n    \t\tNone: 0,\n    \t\tNeedsUpdate: 1,\n    \t\tMatrixWorldNeedsUpdate: 2\n    \t},\n\n    \tGetterByBindingType: [\n\n    \t\tfunction getValue_direct( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n    \t\t},\n\n    \t\tfunction getValue_array( buffer, offset ) {\n\n    \t\t\tvar source = this.resolvedProperty;\n\n    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n    \t\t\t}\n\n    \t\t},\n\n    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n    \t\t},\n\n    \t\tfunction getValue_toArray( buffer, offset ) {\n\n    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n    \t\t}\n\n    \t],\n\n    \tSetterByBindingTypeAndVersioning: [\n\n    \t\t[\n    \t\t\t// Direct\n\n    \t\t\tfunction setValue_direct( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// EntireArray\n\n    \t\t\tfunction setValue_array( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// ArrayElement\n\n    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// HasToFromArray\n\n    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t]\n\n    \t]\n\n    } );\n\n    PropertyBinding.Composite =\n    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n    \tvar parsedPath = optionalParsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis._targetGroup = targetGroup;\n    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n    };\n\n    PropertyBinding.Composite.prototype = {\n\n    \tconstructor: PropertyBinding.Composite,\n\n    \tgetValue: function( array, offset ) {\n\n    \t\tthis.bind(); // bind all binding\n\n    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\n    \t\t// and only call .getValue on the first\n    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n    \t},\n\n    \tsetValue: function( array, offset ) {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].setValue( array, offset );\n\n    \t\t}\n\n    \t},\n\n    \tbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].bind();\n\n    \t\t}\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].unbind();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    PropertyBinding.create = function( root, path, parsedPath ) {\n\n    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n    \t\treturn new PropertyBinding( root, path, parsedPath );\n\n    \t} else {\n\n    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n    \t}\n\n    };\n\n    PropertyBinding.parseTrackName = function( trackName ) {\n\n    \t// matches strings in the form of:\n    \t//    nodeName.property\n    \t//    nodeName.property[accessor]\n    \t//    nodeName.material.property[accessor]\n    \t//    uuid.property[accessor]\n    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    \t//    parentName/nodeName.property\n    \t//    parentName/parentName/nodeName.property[index]\n    \t//    .bone[Armature.DEF_cog].position\n    \t//    scene:helium_balloon_model:helium_balloon_model.position\n    \t// created and tested via https://regex101.com/#javascript\n\n    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n    \tvar matches = re.exec( trackName );\n\n    \tif ( ! matches ) {\n\n    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n    \t}\n\n    \tvar results = {\n    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n    \t\tobjectName: matches[ 3 ],\n    \t\tobjectIndex: matches[ 4 ],\n    \t\tpropertyName: matches[ 5 ],\n    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n    \t};\n\n    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n    \t}\n\n    \treturn results;\n\n    };\n\n    PropertyBinding.findNode = function( root, nodeName ) {\n\n    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n    \t\treturn root;\n\n    \t}\n\n    \t// search into skeleton bones.\n    \tif ( root.skeleton ) {\n\n    \t\tvar searchSkeleton = function( skeleton ) {\n\n    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n    \t\t\t\tvar bone = skeleton.bones[ i ];\n\n    \t\t\t\tif ( bone.name === nodeName ) {\n\n    \t\t\t\t\treturn bone;\n\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar bone = searchSkeleton( root.skeleton );\n\n    \t\tif ( bone ) {\n\n    \t\t\treturn bone;\n\n    \t\t}\n    \t}\n\n    \t// search into node subtree.\n    \tif ( root.children ) {\n\n    \t\tvar searchNodeSubtree = function( children ) {\n\n    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n    \t\t\t\tvar childNode = children[ i ];\n\n    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n    \t\t\t\t\treturn childNode;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n    \t\t\t\tif ( result ) return result;\n\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n    \t\tif ( subTreeNode ) {\n\n    \t\t\treturn subTreeNode;\n\n    \t\t}\n\n    \t}\n\n    \treturn null;\n\n    };\n\n    /**\n     *\n     * A group of objects that receives a shared animation state.\n     *\n     * Usage:\n     *\n     * \t-\tAdd objects you would otherwise pass as 'root' to the\n     * \t\tconstructor or the .clipAction method of AnimationMixer.\n     *\n     * \t-\tInstead pass this object as 'root'.\n     *\n     * \t-\tYou can also add and remove objects later when the mixer\n     * \t\tis running.\n     *\n     * Note:\n     *\n     *  \tObjects of this class appear as one object to the mixer,\n     *  \tso cache control of the individual objects must be done\n     *  \ton the group.\n     *\n     * Limitation:\n     *\n     * \t- \tThe animated properties must be compatible among the\n     * \t\tall objects in the group.\n     *\n     *  -\tA single property can either be controlled through a\n     *  \ttarget group or directly, but not both.\n     *\n     * @author tschw\n     */\n\n    function AnimationObjectGroup( var_args ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// cached objects followed by the active ones\n    \tthis._objects = Array.prototype.slice.call( arguments );\n\n    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n    \t// note: read by PropertyBinding.Composite\n\n    \tvar indices = {};\n    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\tindices[ arguments[ i ].uuid ] = i;\n\n    \t}\n\n    \tthis._paths = [];\t\t\t\t\t// inside: string\n    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n    \tvar scope = this;\n\n    \tthis.stats = {\n\n    \t\tobjects: {\n    \t\t\tget total() { return scope._objects.length; },\n    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n    \t\t},\n\n    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\n    \t};\n\n    }\n\n    AnimationObjectGroup.prototype = {\n\n    \tconstructor: AnimationObjectGroup,\n\n    \tisAnimationObjectGroup: true,\n\n    \tadd: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tpaths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index === undefined ) {\n\n    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\n    \t\t\t\tindex = nObjects ++;\n    \t\t\t\tindicesByUUID[ uuid ] = index;\n    \t\t\t\tobjects.push( object );\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tbindings[ j ].push(\n    \t\t\t\t\t\t\tnew PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( index < nCachedObjects ) {\n\n    \t\t\t\tvar knownObject = objects[ index ];\n\n    \t\t\t\t// move existing object to the ACTIVE region\n\n    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n    \t\t\t\t\tif ( binding === undefined ) {\n\n    \t\t\t\t\t\t// since we do not bother to create new bindings\n    \t\t\t\t\t\t// for objects that are cached, the binding may\n    \t\t\t\t\t\t// or may not exist\n\n    \t\t\t\t\t\tbinding = new PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\n    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n    \t\t\t} // else the object is already where we want it to be\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \tremove: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n    \t\t\t\t// move existing object into the CACHED region\n\n    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = firstActiveObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// remove & forget\n    \tuncache: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined ) {\n\n    \t\t\t\tdelete indicesByUUID[ uuid ];\n\n    \t\t\t\tif ( index < nCachedObjects ) {\n\n    \t\t\t\t\t// object is cached, shrink the CACHED region\n\n    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n    \t\t\t\t\t\tlastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\t// last cached object takes this object's place\n    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\t\t// last object goes to the activated slot and pop\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// object is active, just swap with the last and pop\n\n    \t\t\t\t\tvar lastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} // cached or active\n\n    \t\t\t} // if object is known\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// Internal interface used by befriended PropertyBinding.Composite:\n\n    \tsubscribe_: function( path, parsedPath ) {\n    \t\t// returns an array of bindings for the given path that is changed\n    \t\t// according to the contained objects in the group\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ],\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( index !== undefined ) return bindings[ index ];\n\n    \t\tvar paths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tobjects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tbindingsForPath = new Array( nObjects );\n\n    \t\tindex = bindings.length;\n\n    \t\tindicesByPath[ path ] = index;\n\n    \t\tpaths.push( path );\n    \t\tparsedPaths.push( parsedPath );\n    \t\tbindings.push( bindingsForPath );\n\n    \t\tfor ( var i = nCachedObjects,\n    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = objects[ i ];\n\n    \t\t\tbindingsForPath[ i ] =\n    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n    \t\t}\n\n    \t\treturn bindingsForPath;\n\n    \t},\n\n    \tunsubscribe_: function( path ) {\n    \t\t// tells the group to forget about a property path and no longer\n    \t\t// update the array previously obtained with 'subscribe_'\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ];\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar paths = this._paths,\n    \t\t\t\tparsedPaths = this._parsedPaths,\n    \t\t\t\tbindings = this._bindings,\n    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n    \t\t\tbindings[ index ] = lastBindings;\n    \t\t\tbindings.pop();\n\n    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n    \t\t\tparsedPaths.pop();\n\n    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n    \t\t\tpaths.pop();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Action provided by AnimationMixer for scheduling clip playback on specific\n     * objects.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     *\n     */\n\n    function AnimationAction( mixer, clip, localRoot ) {\n\n    \tthis._mixer = mixer;\n    \tthis._clip = clip;\n    \tthis._localRoot = localRoot || null;\n\n    \tvar tracks = clip.tracks,\n    \t\tnTracks = tracks.length,\n    \t\tinterpolants = new Array( nTracks );\n\n    \tvar interpolantSettings = {\n    \t\t\tendingStart: \tZeroCurvatureEnding,\n    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n    \t};\n\n    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n    \t\tinterpolants[ i ] = interpolant;\n    \t\tinterpolant.settings = interpolantSettings;\n\n    \t}\n\n    \tthis._interpolantSettings = interpolantSettings;\n\n    \tthis._interpolants = interpolants;\t// bound by the mixer\n\n    \t// inside: PropertyMixer (managed by the mixer)\n    \tthis._propertyBindings = new Array( nTracks );\n\n    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n    \tthis._timeScaleInterpolant = null;\n    \tthis._weightInterpolant = null;\n\n    \tthis.loop = LoopRepeat;\n    \tthis._loopCount = -1;\n\n    \t// global mixer time when the action is to be started\n    \t// it's set back to 'null' upon start of the action\n    \tthis._startTime = null;\n\n    \t// scaled local time of the action\n    \t// gets clamped or wrapped to 0..clip.duration according to loop\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1;\n    \tthis._effectiveTimeScale = 1;\n\n    \tthis.weight = 1;\n    \tthis._effectiveWeight = 1;\n\n    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n    };\n\n    AnimationAction.prototype = {\n\n    \tconstructor: AnimationAction,\n\n    \t// State & Scheduling\n\n    \tplay: function() {\n\n    \t\tthis._mixer._activateAction( this );\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function() {\n\n    \t\tthis._mixer._deactivateAction( this );\n\n    \t\treturn this.reset();\n\n    \t},\n\n    \treset: function() {\n\n    \t\tthis.paused = false;\n    \t\tthis.enabled = true;\n\n    \t\tthis.time = 0;\t\t\t// restart clip\n    \t\tthis._loopCount = -1;\t// forget previous loops\n    \t\tthis._startTime = null;\t// forget scheduling\n\n    \t\treturn this.stopFading().stopWarping();\n\n    \t},\n\n    \tisRunning: function() {\n\n    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n    \t},\n\n    \t// return true when play has been called\n    \tisScheduled: function() {\n\n    \t\treturn this._mixer._isActiveAction( this );\n\n    \t},\n\n    \tstartAt: function( time ) {\n\n    \t\tthis._startTime = time;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetLoop: function( mode, repetitions ) {\n\n    \t\tthis.loop = mode;\n    \t\tthis.repetitions = repetitions;\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Weight\n\n    \t// set the weight stopping any scheduled fading\n    \t// although .enabled = false yields an effective weight of zero, this\n    \t// method does *not* change .enabled, because it would be confusing\n    \tsetEffectiveWeight: function( weight ) {\n\n    \t\tthis.weight = weight;\n\n    \t\t// note: same logic as when updated at runtime\n    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n    \t\treturn this.stopFading();\n\n    \t},\n\n    \t// return the weight considering fading and .enabled\n    \tgetEffectiveWeight: function() {\n\n    \t\treturn this._effectiveWeight;\n\n    \t},\n\n    \tfadeIn: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 0, 1 );\n\n    \t},\n\n    \tfadeOut: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 1, 0 );\n\n    \t},\n\n    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n    \t\tfadeOutAction.fadeOut( duration );\n    \t\tthis.fadeIn( duration );\n\n    \t\tif( warp ) {\n\n    \t\t\tvar fadeInDuration = this._clip.duration,\n    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n    \t},\n\n    \tstopFading: function() {\n\n    \t\tvar weightInterpolant = this._weightInterpolant;\n\n    \t\tif ( weightInterpolant !== null ) {\n\n    \t\t\tthis._weightInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Time Scale Control\n\n    \t// set the weight stopping any scheduled warping\n    \t// although .paused = true yields an effective time scale of zero, this\n    \t// method does *not* change .paused, because it would be confusing\n    \tsetEffectiveTimeScale: function( timeScale ) {\n\n    \t\tthis.timeScale = timeScale;\n    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \t// return the time scale considering warping and .paused\n    \tgetEffectiveTimeScale: function() {\n\n    \t\treturn this._effectiveTimeScale;\n\n    \t},\n\n    \tsetDuration: function( duration ) {\n\n    \t\tthis.timeScale = this._clip.duration / duration;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \tsyncWith: function( action ) {\n\n    \t\tthis.time = action.time;\n    \t\tthis.timeScale = action.timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \thalt: function( duration ) {\n\n    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n    \t},\n\n    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._timeScaleInterpolant,\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._timeScaleInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now;\n    \t\ttimes[ 1 ] = now + duration;\n\n    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstopWarping: function() {\n\n    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n    \t\tif ( timeScaleInterpolant !== null ) {\n\n    \t\t\tthis._timeScaleInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Object Accessors\n\n    \tgetMixer: function() {\n\n    \t\treturn this._mixer;\n\n    \t},\n\n    \tgetClip: function() {\n\n    \t\treturn this._clip;\n\n    \t},\n\n    \tgetRoot: function() {\n\n    \t\treturn this._localRoot || this._mixer._root;\n\n    \t},\n\n    \t// Interna\n\n    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n    \t\t// called by the mixer\n\n    \t\tvar startTime = this._startTime;\n\n    \t\tif ( startTime !== null ) {\n\n    \t\t\t// check for scheduled start of action\n\n    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n    \t\t\t}\n\n    \t\t\t// start\n\n    \t\t\tthis._startTime = null; // unschedule\n    \t\t\tdeltaTime = timeDirection * timeRunning;\n\n    \t\t}\n\n    \t\t// apply time scale and advance time\n\n    \t\tdeltaTime *= this._updateTimeScale( time );\n    \t\tvar clipTime = this._updateTime( deltaTime );\n\n    \t\t// note: _updateTime may disable the action resulting in\n    \t\t// an effective weight of 0\n\n    \t\tvar weight = this._updateWeight( time );\n\n    \t\tif ( weight > 0 ) {\n\n    \t\t\tvar interpolants = this._interpolants;\n    \t\t\tvar propertyMixers = this._propertyBindings;\n\n    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_updateWeight: function( time ) {\n\n    \t\tvar weight = 0;\n\n    \t\tif ( this.enabled ) {\n\n    \t\t\tweight = this.weight;\n    \t\t\tvar interpolant = this._weightInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\tweight *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopFading();\n\n    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\n    \t\t\t\t\t\t// faded out, disable\n    \t\t\t\t\t\tthis.enabled = false;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveWeight = weight;\n    \t\treturn weight;\n\n    \t},\n\n    \t_updateTimeScale: function( time ) {\n\n    \t\tvar timeScale = 0;\n\n    \t\tif ( ! this.paused ) {\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\ttimeScale *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopWarping();\n\n    \t\t\t\t\tif ( timeScale === 0 ) {\n\n    \t\t\t\t\t\t// motion has halted, pause\n    \t\t\t\t\t\tthis.paused = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// warp done - apply final time scale\n    \t\t\t\t\t\tthis.timeScale = timeScale;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveTimeScale = timeScale;\n    \t\treturn timeScale;\n\n    \t},\n\n    \t_updateTime: function( deltaTime ) {\n\n    \t\tvar time = this.time + deltaTime;\n\n    \t\tif ( deltaTime === 0 ) return time;\n\n    \t\tvar duration = this._clip.duration,\n\n    \t\t\tloop = this.loop,\n    \t\t\tloopCount = this._loopCount;\n\n    \t\tif ( loop === LoopOnce ) {\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tthis.loopCount = 0;\n    \t\t\t\tthis._setEndings( true, true, false );\n\n    \t\t\t}\n\n    \t\t\thandle_stop: {\n\n    \t\t\t\tif ( time >= duration ) {\n\n    \t\t\t\t\ttime = duration;\n\n    \t\t\t\t} else if ( time < 0 ) {\n\n    \t\t\t\t\ttime = 0;\n\n    \t\t\t\t} else break handle_stop;\n\n    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\telse this.enabled = false;\n\n    \t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n    \t\t\t\t} );\n\n    \t\t\t}\n\n    \t\t} else { // repetitive Repeat or PingPong\n\n    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tif ( deltaTime >= 0 ) {\n\n    \t\t\t\t\tloopCount = 0;\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// when looping in reverse direction, the initial\n    \t\t\t\t\t// transition through zero counts as a repetition,\n    \t\t\t\t\t// so leave loopCount at -1\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( time >= duration || time < 0 ) {\n    \t\t\t\t// wrap around\n\n    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n    \t\t\t\ttime -= duration * loopDelta;\n\n    \t\t\t\tloopCount += Math.abs( loopDelta );\n\n    \t\t\t\tvar pending = this.repetitions - loopCount;\n\n    \t\t\t\tif ( pending < 0 ) {\n    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\t\telse this.enabled = false;\n\n    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n    \t\t\t\t\t} );\n\n    \t\t\t\t} else {\n    \t\t\t\t\t// keep running\n\n    \t\t\t\t\tif ( pending === 0 ) {\n    \t\t\t\t\t\t// entering the last round\n\n    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._loopCount = loopCount;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n    \t\t\t\t// invert time for the \"pong round\"\n\n    \t\t\t\tthis.time = time;\n    \t\t\t\treturn duration - time;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.time = time;\n    \t\treturn time;\n\n    \t},\n\n    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\n    \t\tvar settings = this._interpolantSettings;\n\n    \t\tif ( pingPong ) {\n\n    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n    \t\t} else {\n\n    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n    \t\t\tif ( atStart ) {\n\n    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t\tif ( atEnd ) {\n\n    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._weightInterpolant;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._weightInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Player for AnimationClips.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function AnimationMixer( root ) {\n\n    \tthis._root = root;\n    \tthis._initMemoryManager();\n    \tthis._accuIndex = 0;\n\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1.0;\n\n    }\n\n    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n    \t// return an action for a clip optionally using a custom root target\n    \t// object (this method allocates a lot of dynamic memory in case a\n    \t// previously unknown clip/root combination is specified)\n    \tclipAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n    \t\t\tprototypeAction = null;\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\tvar existingAction =\n    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n    \t\t\tif ( existingAction !== undefined ) {\n\n    \t\t\t\treturn existingAction;\n\n    \t\t\t}\n\n    \t\t\t// we know the clip, so we don't have to parse all\n    \t\t\t// the bindings again but can just copy\n    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n    \t\t\t// also, take the clip from the prototype action\n    \t\t\tif ( clipObject === null )\n    \t\t\t\tclipObject = prototypeAction._clip;\n\n    \t\t}\n\n    \t\t// clip must be known when specified via string\n    \t\tif ( clipObject === null ) return null;\n\n    \t\t// allocate all resources required to run it\n    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n    \t\tthis._bindAction( newAction, prototypeAction );\n\n    \t\t// and make the action known to the memory manager\n    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n    \t\treturn newAction;\n\n    \t},\n\n    \t// get an existing action\n    \texistingAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \t// deactivates all previously scheduled actions\n    \tstopAllAction: function() {\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tthis._nActiveActions = 0;\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tactions[ i ].reset();\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].useCount = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// advance the time and update apply the animation\n    \tupdate: function( deltaTime ) {\n\n    \t\tdeltaTime *= this.timeScale;\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n\n    \t\t\ttime = this.time += deltaTime,\n    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\n    \t\t\taccuIndex = this._accuIndex ^= 1;\n\n    \t\t// run active actions\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tvar action = actions[ i ];\n\n    \t\t\tif ( action.enabled ) {\n\n    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// update scene graph\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].apply( accuIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// return this mixer's root target object\n    \tgetRoot: function() {\n\n    \t\treturn this._root;\n\n    \t},\n\n    \t// free all resources specific to a particular clip\n    \tuncacheClip: function( clip ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tclipUuid = clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\t// note: just calling _removeInactiveAction would mess up the\n    \t\t\t// iteration state and also require updating the state we can\n    \t\t\t// just throw away\n\n    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar action = actionsToRemove[ i ];\n\n    \t\t\t\tthis._deactivateAction( action );\n\n    \t\t\t\tvar cacheIndex = action._cacheIndex,\n    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n    \t\t\t\taction._cacheIndex = null;\n    \t\t\t\taction._byClipCacheIndex = null;\n\n    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\t\t\tactions.pop();\n\n    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n    \t\t\t}\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t// free all resources specific to a particular root target object\n    \tuncacheRoot: function( root ) {\n\n    \t\tvar rootUuid = root.uuid,\n    \t\t\tactionsByClip = this._actionsByClip;\n\n    \t\tfor ( var clipUuid in actionsByClip ) {\n\n    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n    \t\t\t\taction = actionByRoot[ rootUuid ];\n\n    \t\t\tif ( action !== undefined ) {\n\n    \t\t\t\tthis._deactivateAction( action );\n    \t\t\t\tthis._removeInactiveAction( action );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingByName !== undefined ) {\n\n    \t\t\tfor ( var trackName in bindingByName ) {\n\n    \t\t\t\tvar binding = bindingByName[ trackName ];\n    \t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remove a targeted clip from the cache\n    \tuncacheAction: function( clip, optionalRoot ) {\n\n    \t\tvar action = this.existingAction( clip, optionalRoot );\n\n    \t\tif ( action !== null ) {\n\n    \t\t\tthis._deactivateAction( action );\n    \t\t\tthis._removeInactiveAction( action );\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    // Implementation details:\n\n    Object.assign( AnimationMixer.prototype, {\n\n    \t_bindAction: function( action, prototypeAction ) {\n\n    \t\tvar root = action._localRoot || this._root,\n    \t\t\ttracks = action._clip.tracks,\n    \t\t\tnTracks = tracks.length,\n    \t\t\tbindings = action._propertyBindings,\n    \t\t\tinterpolants = action._interpolants,\n    \t\t\trootUuid = root.uuid,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingsByName === undefined ) {\n\n    \t\t\tbindingsByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\t\tvar track = tracks[ i ],\n    \t\t\t\ttrackName = track.name,\n    \t\t\t\tbinding = bindingsByName[ trackName ];\n\n    \t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t} else {\n\n    \t\t\t\tbinding = bindings[ i ];\n\n    \t\t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\t\t// existing binding, make sure the cache knows\n\n    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n    \t\t\t\t\t\t++ binding.referenceCount;\n    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar path = prototypeAction && prototypeAction.\n    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n    \t\t\t\tbinding = new PropertyMixer(\n    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n    \t\t\t\t++ binding.referenceCount;\n    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t}\n\n    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n    \t\t}\n\n    \t},\n\n    \t_activateAction: function( action ) {\n\n    \t\tif ( ! this._isActiveAction( action ) ) {\n\n    \t\t\tif ( action._cacheIndex === null ) {\n\n    \t\t\t\t// this action has been forgotten by the cache, but the user\n    \t\t\t\t// appears to be still using it -> rebind\n\n    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n    \t\t\t\t\tclipUuid = action._clip.uuid,\n    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\t\t\tthis._bindAction( action,\n    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n    \t\t\t}\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// increment reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n    \t\t\t\t\tthis._lendBinding( binding );\n    \t\t\t\t\tbinding.saveOriginalState();\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._lendAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t_deactivateAction: function( action ) {\n\n    \t\tif ( this._isActiveAction( action ) ) {\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// decrement reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\n    \t\t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\t\tthis._takeBackBinding( binding );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._takeBackAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t// Memory manager\n\n    \t_initMemoryManager: function() {\n\n    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n    \t\tthis._nActiveActions = 0;\n\n    \t\tthis._actionsByClip = {};\n    \t\t// inside:\n    \t\t// {\n    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n    \t\t// }\n\n\n    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n    \t\tthis._controlInterpolants = []; // same game as above\n    \t\tthis._nActiveControlInterpolants = 0;\n\n    \t\tvar scope = this;\n\n    \t\tthis.stats = {\n\n    \t\t\tactions: {\n    \t\t\t\tget total() { return scope._actions.length; },\n    \t\t\t\tget inUse() { return scope._nActiveActions; }\n    \t\t\t},\n    \t\t\tbindings: {\n    \t\t\t\tget total() { return scope._bindings.length; },\n    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n    \t\t\t},\n    \t\t\tcontrolInterpolants: {\n    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n    \t\t\t}\n\n    \t\t};\n\n    \t},\n\n    \t// Memory management for AnimationAction objects\n\n    \t_isActiveAction: function( action ) {\n\n    \t\tvar index = action._cacheIndex;\n    \t\treturn index !== null && index < this._nActiveActions;\n\n    \t},\n\n    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip === undefined ) {\n\n    \t\t\tactionsForClip = {\n\n    \t\t\t\tknownActions: [ action ],\n    \t\t\t\tactionByRoot: {}\n\n    \t\t\t};\n\n    \t\t\taction._byClipCacheIndex = 0;\n\n    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n    \t\t} else {\n\n    \t\t\tvar knownActions = actionsForClip.knownActions;\n\n    \t\t\taction._byClipCacheIndex = knownActions.length;\n    \t\t\tknownActions.push( action );\n\n    \t\t}\n\n    \t\taction._cacheIndex = actions.length;\n    \t\tactions.push( action );\n\n    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n    \t},\n\n    \t_removeInactiveAction: function( action ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n    \t\t\tcacheIndex = action._cacheIndex;\n\n    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\tactions.pop();\n\n    \t\taction._cacheIndex = null;\n\n\n    \t\tvar clipUuid = action._clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n    \t\t\tlastKnownAction =\n    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n    \t\tknownActionsForClip.pop();\n\n    \t\taction._byClipCacheIndex = null;\n\n\n    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n    \t\tdelete actionByRoot[ rootUuid ];\n\n    \t\tif ( knownActionsForClip.length === 0 ) {\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t\tthis._removeInactiveBindingsForAction( action );\n\n    \t},\n\n    \t_removeInactiveBindingsForAction: function( action ) {\n\n    \t\tvar bindings = action._propertyBindings;\n    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tvar binding = bindings[ i ];\n\n    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_lendAction: function( action ) {\n\n    \t\t// [ active actions |  inactive actions  ]\n    \t\t// [  active actions >| inactive actions ]\n    \t\t//                 s        a\n    \t\t//                  <-swap->\n    \t\t//                 a        s\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\n    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n    \t\taction._cacheIndex = lastActiveIndex;\n    \t\tactions[ lastActiveIndex ] = action;\n\n    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = firstInactiveAction;\n\n    \t},\n\n    \t_takeBackAction: function( action ) {\n\n    \t\t// [  active actions  | inactive actions ]\n    \t\t// [ active actions |< inactive actions  ]\n    \t\t//        a        s\n    \t\t//         <-swap->\n    \t\t//        s        a\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n    \t\taction._cacheIndex = firstInactiveIndex;\n    \t\tactions[ firstInactiveIndex ] = action;\n\n    \t\tlastActiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = lastActiveAction;\n\n    \t},\n\n    \t// Memory management for PropertyMixer objects\n\n    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( bindingByName === undefined ) {\n\n    \t\t\tbindingByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n    \t\t}\n\n    \t\tbindingByName[ trackName ] = binding;\n\n    \t\tbinding._cacheIndex = bindings.length;\n    \t\tbindings.push( binding );\n\n    \t},\n\n    \t_removeInactiveBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tpropBinding = binding.binding,\n    \t\t\trootUuid = propBinding.rootNode.uuid,\n    \t\t\ttrackName = propBinding.path,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n    \t\t\tcacheIndex = binding._cacheIndex;\n\n    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n    \t\tbindings.pop();\n\n    \t\tdelete bindingByName[ trackName ];\n\n    \t\tremove_empty_map: {\n\n    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t_lendBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n    \t\tbinding._cacheIndex = lastActiveIndex;\n    \t\tbindings[ lastActiveIndex ] = binding;\n\n    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n    \t},\n\n    \t_takeBackBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n    \t\tbinding._cacheIndex = firstInactiveIndex;\n    \t\tbindings[ firstInactiveIndex ] = binding;\n\n    \t\tlastActiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\n    \t},\n\n\n    \t// Memory management of Interpolants for weight and time scale\n\n    \t_lendControlInterpolant: function() {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n    \t\tif ( interpolant === undefined ) {\n\n    \t\t\tinterpolant = new LinearInterpolant(\n    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n    \t\t}\n\n    \t\treturn interpolant;\n\n    \t},\n\n    \t_takeBackControlInterpolant: function( interpolant ) {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tprevIndex = interpolant.__cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n    \t},\n\n    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Uniform( value ) {\n\n    \tif ( typeof value === 'string' ) {\n\n    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n    \t\tvalue = arguments[ 1 ];\n\n    \t}\n\n    \tthis.value = value;\n\n    \tthis.dynamic = false;\n\n    }\n\n    Uniform.prototype = {\n\n    \tconstructor: Uniform,\n\n    \tonUpdate: function ( callback ) {\n\n    \t\tthis.dynamic = true;\n    \t\tthis.onUpdateCallback = callback;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferGeometry() {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'InstancedBufferGeometry';\n    \tthis.maxInstancedCount = undefined;\n\n    }\n\n    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n    \tthis.groups.push( {\n\n    \t\tstart: start,\n    \t\tcount: count,\n    \t\tinstances: instances\n\n    \t} );\n\n    };\n\n    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n    \tvar index = source.index;\n\n    \tif ( index !== null ) {\n\n    \t\tthis.setIndex( index.clone() );\n\n    \t}\n\n    \tvar attributes = source.attributes;\n\n    \tfor ( var name in attributes ) {\n\n    \t\tvar attribute = attributes[ name ];\n    \t\tthis.addAttribute( name, attribute.clone() );\n\n    \t}\n\n    \tvar groups = source.groups;\n\n    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\tvar group = groups[ i ];\n    \t\tthis.addGroup( group.start, group.count, group.instances );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.data = interleavedBuffer;\n    \tthis.itemSize = itemSize;\n    \tthis.offset = offset;\n\n    \tthis.normalized = normalized === true;\n\n    }\n\n\n    InterleavedBufferAttribute.prototype = {\n\n    \tconstructor: InterleavedBufferAttribute,\n\n    \tisInterleavedBufferAttribute: true,\n\n    \tget count() {\n\n    \t\treturn this.data.count;\n\n    \t},\n\n    \tget array() {\n\n    \t\treturn this.data.array;\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n    \t\tthis.data.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBuffer( array, stride ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.stride = stride;\n    \tthis.count = array !== undefined ? array.length / stride : 0;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    InterleavedBuffer.prototype = {\n\n    \tconstructor: InterleavedBuffer,\n\n    \tisInterleavedBuffer: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.count = source.count;\n    \t\tthis.stride = source.stride;\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.stride;\n    \t\tindex2 *= attribute.stride;\n\n    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n    \tInterleavedBuffer.call( this, array, stride );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n    \tInterleavedBuffer.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n    \tBufferAttribute.call( this, array, itemSize );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n    \tBufferAttribute.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author bhouston / http://clara.io/\n     * @author stephomi / http://stephaneginier.com/\n     */\n\n    function Raycaster( origin, direction, near, far ) {\n\n    \tthis.ray = new Ray( origin, direction );\n    \t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \tthis.near = near || 0;\n    \tthis.far = far || Infinity;\n\n    \tthis.params = {\n    \t\tMesh: {},\n    \t\tLine: {},\n    \t\tLOD: {},\n    \t\tPoints: { threshold: 1 },\n    \t\tSprite: {}\n    \t};\n\n    \tObject.defineProperties( this.params, {\n    \t\tPointCloud: {\n    \t\t\tget: function () {\n    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n    \t\t\t\treturn this.Points;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    function ascSort( a, b ) {\n\n    \treturn a.distance - b.distance;\n\n    }\n\n    function intersectObject( object, raycaster, intersects, recursive ) {\n\n    \tif ( object.visible === false ) return;\n\n    \tobject.raycast( raycaster, intersects );\n\n    \tif ( recursive === true ) {\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    //\n\n    Raycaster.prototype = {\n\n    \tconstructor: Raycaster,\n\n    \tlinePrecision: 1,\n\n    \tset: function ( origin, direction ) {\n\n    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \t\tthis.ray.set( origin, direction );\n\n    \t},\n\n    \tsetFromCamera: function ( coords, camera ) {\n\n    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n    \t\t}\n\n    \t},\n\n    \tintersectObject: function ( object, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tintersectObject( object, this, intersects, recursive );\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t},\n\n    \tintersectObjects: function ( objects, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tif ( Array.isArray( objects ) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n    \t\t\treturn intersects;\n\n    \t\t}\n\n    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n    \t\t}\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Clock( autoStart ) {\n\n    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    \tthis.startTime = 0;\n    \tthis.oldTime = 0;\n    \tthis.elapsedTime = 0;\n\n    \tthis.running = false;\n\n    }\n\n    Clock.prototype = {\n\n    \tconstructor: Clock,\n\n    \tstart: function () {\n\n    \t\tthis.startTime = ( performance || Date ).now();\n\n    \t\tthis.oldTime = this.startTime;\n    \t\tthis.running = true;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tthis.getElapsedTime();\n    \t\tthis.running = false;\n\n    \t},\n\n    \tgetElapsedTime: function () {\n\n    \t\tthis.getDelta();\n    \t\treturn this.elapsedTime;\n\n    \t},\n\n    \tgetDelta: function () {\n\n    \t\tvar diff = 0;\n\n    \t\tif ( this.autoStart && ! this.running ) {\n\n    \t\t\tthis.start();\n\n    \t\t}\n\n    \t\tif ( this.running ) {\n\n    \t\t\tvar newTime = ( performance || Date ).now();\n\n    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n    \t\t\tthis.oldTime = newTime;\n\n    \t\t\tthis.elapsedTime += diff;\n\n    \t\t}\n\n    \t\treturn diff;\n\n    \t}\n\n    };\n\n    /**\n     * Spline from Tween.js, slightly optimized (and trashed)\n     * http://sole.github.com/tween.js/examples/05_spline.html\n     *\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Spline( points ) {\n\n    \tthis.points = points;\n\n    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n    \tpoint, intPoint, weight, w2, w3,\n    \tpa, pb, pc, pd;\n\n    \tthis.initFromArray = function ( a ) {\n\n    \t\tthis.points = [];\n\n    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n    \t\t}\n\n    \t};\n\n    \tthis.getPoint = function ( k ) {\n\n    \t\tpoint = ( this.points.length - 1 ) * k;\n    \t\tintPoint = Math.floor( point );\n    \t\tweight = point - intPoint;\n\n    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    \t\tc[ 1 ] = intPoint;\n    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n    \t\tpa = this.points[ c[ 0 ] ];\n    \t\tpb = this.points[ c[ 1 ] ];\n    \t\tpc = this.points[ c[ 2 ] ];\n    \t\tpd = this.points[ c[ 3 ] ];\n\n    \t\tw2 = weight * weight;\n    \t\tw3 = weight * w2;\n\n    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n    \t\treturn v3;\n\n    \t};\n\n    \tthis.getControlPointsArray = function () {\n\n    \t\tvar i, p, l = this.points.length,\n    \t\t\tcoords = [];\n\n    \t\tfor ( i = 0; i < l; i ++ ) {\n\n    \t\t\tp = this.points[ i ];\n    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n    \t\t}\n\n    \t\treturn coords;\n\n    \t};\n\n    \t// approximate length by summing linear segments\n\n    \tthis.getLength = function ( nSubDivisions ) {\n\n    \t\tvar i, index, nSamples, position,\n    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n    \t\t\toldPosition = new Vector3(),\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tchunkLengths = [],\n    \t\t\ttotalLength = 0;\n\n    \t\t// first point has 0 length\n\n    \t\tchunkLengths[ 0 ] = 0;\n\n    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n    \t\tnSamples = this.points.length * nSubDivisions;\n\n    \t\toldPosition.copy( this.points[ 0 ] );\n\n    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n    \t\t\tindex = i / nSamples;\n\n    \t\t\tposition = this.getPoint( index );\n    \t\t\ttmpVec.copy( position );\n\n    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n    \t\t\toldPosition.copy( position );\n\n    \t\t\tpoint = ( this.points.length - 1 ) * index;\n    \t\t\tintPoint = Math.floor( point );\n\n    \t\t\tif ( intPoint !== oldIntPoint ) {\n\n    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n    \t\t\t\toldIntPoint = intPoint;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// last point ends with total length\n\n    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n    \t\treturn { chunks: chunkLengths, total: totalLength };\n\n    \t};\n\n    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n    \t\tvar i, j,\n    \t\t\tindex, indexCurrent, indexNext,\n    \t\t\trealDistance,\n    \t\t\tsampling, position,\n    \t\t\tnewpoints = [],\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tsl = this.getLength();\n\n    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n    \t\t\tindexNext = i / ( this.points.length - 1 );\n\n    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n    \t\t\t\tposition = this.getPoint( index );\n    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n    \t\t\t}\n\n    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n    \t\t}\n\n    \t\tthis.points = newpoints;\n\n    \t};\n\n    \t// Catmull-Rom\n\n    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n     *\n     * The poles (phi) are at the positive and negative y axis.\n     * The equator starts at positive z.\n     */\n\n    function Spherical( radius, phi, theta ) {\n\n    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n    \treturn this;\n\n    }\n\n    Spherical.prototype = {\n\n    \tconstructor: Spherical,\n\n    \tset: function ( radius, phi, theta ) {\n\n    \t\tthis.radius = radius;\n    \t\tthis.phi = phi;\n    \t\tthis.theta = theta;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( other ) {\n\n    \t\tthis.radius.copy( other.radius );\n    \t\tthis.phi.copy( other.phi );\n    \t\tthis.theta.copy( other.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \t// restrict phi to be betwee EPS and PI-EPS\n    \tmakeSafe: function() {\n\n    \t\tvar EPS = 0.000001;\n    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromVector3: function( vec3 ) {\n\n    \t\tthis.radius = vec3.length();\n\n    \t\tif ( this.radius === 0 ) {\n\n    \t\t\tthis.theta = 0;\n    \t\t\tthis.phi = 0;\n\n    \t\t} else {\n\n    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    };\n\n    /**\r\n     * @author alteredq / http://alteredqualia.com/\r\n     */\r\n\r\n    function MorphBlendMesh( geometry, material ) {\n\r\n    \tMesh.call( this, geometry, material );\r\n\r\n    \tthis.animationsMap = {};\r\n    \tthis.animationsList = [];\r\n\r\n    \t// prepare default animation\r\n    \t// (all frames played together in 1 second)\r\n\r\n    \tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n    \tvar name = \"__default\";\r\n\r\n    \tvar startFrame = 0;\r\n    \tvar endFrame = numFrames - 1;\r\n\r\n    \tvar fps = numFrames / 1;\r\n\r\n    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n    \tthis.setAnimationWeight( name, 1 );\r\n\r\n    }\r\n\r\n    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n    \tvar animation = {\r\n\r\n    \t\tstart: start,\r\n    \t\tend: end,\r\n\r\n    \t\tlength: end - start + 1,\r\n\r\n    \t\tfps: fps,\r\n    \t\tduration: ( end - start ) / fps,\r\n\r\n    \t\tlastFrame: 0,\r\n    \t\tcurrentFrame: 0,\r\n\r\n    \t\tactive: false,\r\n\r\n    \t\ttime: 0,\r\n    \t\tdirection: 1,\r\n    \t\tweight: 1,\r\n\r\n    \t\tdirectionBackwards: false,\r\n    \t\tmirroredLoop: false\r\n\r\n    \t};\r\n\r\n    \tthis.animationsMap[ name ] = animation;\r\n    \tthis.animationsList.push( animation );\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n    \tvar firstAnimation, frameRanges = {};\r\n\r\n    \tvar geometry = this.geometry;\r\n\r\n    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n    \t\tvar morph = geometry.morphTargets[ i ];\r\n    \t\tvar chunks = morph.name.match( pattern );\r\n\r\n    \t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n    \t\t\tvar name = chunks[ 1 ];\r\n\r\n    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n    \t\t\tvar range = frameRanges[ name ];\r\n\r\n    \t\t\tif ( i < range.start ) range.start = i;\r\n    \t\t\tif ( i > range.end ) range.end = i;\r\n\r\n    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    \tfor ( var name in frameRanges ) {\r\n\r\n    \t\tvar range = frameRanges[ name ];\r\n    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n    \t}\r\n\r\n    \tthis.firstAnimation = firstAnimation;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = 1;\r\n    \t\tanimation.directionBackwards = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = - 1;\r\n    \t\tanimation.directionBackwards = true;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.fps = fps;\r\n    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.duration = duration;\r\n    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.weight = weight;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = time;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n    \tvar time = 0;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\ttime = animation.time;\r\n\r\n    \t}\r\n\r\n    \treturn time;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n    \tvar duration = - 1;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tduration = animation.duration;\r\n\r\n    \t}\r\n\r\n    \treturn duration;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = 0;\r\n    \t\tanimation.active = true;\r\n\r\n    \t} else {\r\n\r\n    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.active = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n    \t\tvar animation = this.animationsList[ i ];\r\n\r\n    \t\tif ( ! animation.active ) continue;\r\n\r\n    \t\tvar frameTime = animation.duration / animation.length;\r\n\r\n    \t\tanimation.time += animation.direction * delta;\r\n\r\n    \t\tif ( animation.mirroredLoop ) {\r\n\r\n    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n    \t\t\t\tanimation.direction *= - 1;\r\n\r\n    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n    \t\t\t\t\tanimation.time = animation.duration;\r\n    \t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t\tif ( animation.time < 0 ) {\r\n\r\n    \t\t\t\t\tanimation.time = 0;\r\n    \t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t}\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n    \t\tvar weight = animation.weight;\r\n\r\n    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n    \t\t\tanimation.currentFrame = keyframe;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function ImmediateRenderObject( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.material = material;\n    \tthis.render = function ( renderCallback ) {};\n\n    }\n\n    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length * 3;\n\n    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\tnNormals = objGeometry.attributes.normal.count;\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n    VertexNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tvar keys = [ 'a', 'b', 'c' ];\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\t\tvar vertices = objGeometry.vertices;\n\n    \t\t\tvar faces = objGeometry.faces;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\tvar face = faces[ i ];\n\n    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\t\tvar objPos = objGeometry.attributes.position;\n\n    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function SpotLightHelper( light ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = [\n    \t\t0, 0, 0,   0,   0,   1,\n    \t\t0, 0, 0,   1,   0,   1,\n    \t\t0, 0, 0, - 1,   0,   1,\n    \t\t0, 0, 0,   0,   1,   1,\n    \t\t0, 0, 0,   0, - 1,   1\n    \t];\n\n    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n    \t\tpositions.push(\n    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n    \t\t);\n\n    \t}\n\n    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.cone = new LineSegments( geometry, material );\n    \tthis.add( this.cone );\n\n    \tthis.update();\n\n    }\n\n    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n    SpotLightHelper.prototype.dispose = function () {\n\n    \tthis.cone.geometry.dispose();\n    \tthis.cone.material.dispose();\n\n    };\n\n    SpotLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n    \tvar vector2 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t};\n\n    }();\n\n    /**\n     * @author Sean Griffin / http://twitter.com/sgrif\n     * @author Michael Guerrero / http://realitymeltdown.com\n     * @author mrdoob / http://mrdoob.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkeletonHelper( object ) {\n\n    \tthis.bones = this.getBoneList( object );\n\n    \tvar geometry = new Geometry();\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.dynamic = true;\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.root = object;\n\n    \tthis.matrix = object.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n\n    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n    SkeletonHelper.prototype.getBoneList = function( object ) {\n\n    \tvar boneList = [];\n\n    \tif ( (object && object.isBone) ) {\n\n    \t\tboneList.push( object );\n\n    \t}\n\n    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n    \t}\n\n    \treturn boneList;\n\n    };\n\n    SkeletonHelper.prototype.update = function () {\n\n    \tvar geometry = this.geometry;\n\n    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n    \tvar boneMatrix = new Matrix4();\n\n    \tvar j = 0;\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tj += 2;\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.verticesNeedUpdate = true;\n\n    \tgeometry.computeBoundingSphere();\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function PointLightHelper( light, sphereSize ) {\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.matrix = this.light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \t/*\n    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    \tvar d = light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n\n    \tthis.add( this.lightDistance );\n    \t*/\n\n    }\n\n    PointLightHelper.prototype = Object.create( Mesh.prototype );\n    PointLightHelper.prototype.constructor = PointLightHelper;\n\n    PointLightHelper.prototype.dispose = function () {\n\n    \tthis.geometry.dispose();\n    \tthis.material.dispose();\n\n    };\n\n    PointLightHelper.prototype.update = function () {\n\n    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t/*\n    \tvar d = this.light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.visible = true;\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n    \t*/\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function HemisphereLightHelper( light, sphereSize ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.colors = [ new Color(), new Color() ];\n\n    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n    \tgeometry.rotateX( - Math.PI / 2 );\n\n    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    \t}\n\n    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n    \tthis.lightSphere = new Mesh( geometry, material );\n    \tthis.add( this.lightSphere );\n\n    \tthis.update();\n\n    }\n\n    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n    HemisphereLightHelper.prototype.dispose = function () {\n\n    \tthis.lightSphere.geometry.dispose();\n    \tthis.lightSphere.material.dispose();\n\n    };\n\n    HemisphereLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n\n    \treturn function update() {\n\n    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function GridHelper( size, divisions, color1, color2 ) {\n\n    \tdivisions = divisions || 1;\n    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n    \tvar center = divisions / 2;\n    \tvar step = ( size * 2 ) / divisions;\n    \tvar vertices = [], colors = [];\n\n    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n    \t\tvertices.push( - size, 0, k, size, 0, k );\n    \t\tvertices.push( k, 0, - size, k, 0, size );\n\n    \t\tvar color = i === center ? color1 : color2;\n\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n\n    \t}\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    GridHelper.prototype = Object.create( LineSegments.prototype );\n    GridHelper.prototype.constructor = GridHelper;\n\n    GridHelper.prototype.setColors = function () {\n\n    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\n    \t// FaceNormalsHelper only supports THREE.Geometry\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length;\n\n    \t} else {\n\n    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n    \tthis.update();\n\n    }\n\n    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n    FaceNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tvar vertices = objGeometry.vertices;\n\n    \t\tvar faces = objGeometry.faces;\n\n    \t\tvar idx = 0;\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tvar normal = face.normal;\n\n    \t\t\tv1.copy( vertices[ face.a ] )\n    \t\t\t\t.add( vertices[ face.b ] )\n    \t\t\t\t.add( vertices[ face.c ] )\n    \t\t\t\t.divideScalar( 3 )\n    \t\t\t\t.applyMatrix4( matrixWorld );\n\n    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function DirectionalLightHelper( light, size ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tif ( size === undefined ) size = 1;\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n    \t\t- size,   size, 0,\n    \t\t  size,   size, 0,\n    \t\t  size, - size, 0,\n    \t\t- size, - size, 0,\n    \t\t- size,   size, 0\n    \t], 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.add( new Line( geometry, material ) );\n\n    \tgeometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n    \tthis.add( new Line( geometry, material ));\n\n    \tthis.update();\n\n    }\n\n    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n    DirectionalLightHelper.prototype.dispose = function () {\n\n    \tvar lightPlane = this.children[ 0 ];\n    \tvar targetLine = this.children[ 1 ];\n\n    \tlightPlane.geometry.dispose();\n    \tlightPlane.material.dispose();\n    \ttargetLine.geometry.dispose();\n    \ttargetLine.material.dispose();\n\n    };\n\n    DirectionalLightHelper.prototype.update = function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar v3 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n    \t\tv3.subVectors( v2, v1 );\n\n    \t\tvar lightPlane = this.children[ 0 ];\n    \t\tvar targetLine = this.children[ 1 ];\n\n    \t\tlightPlane.lookAt( v3 );\n    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t\ttargetLine.lookAt( v3 );\n    \t\ttargetLine.scale.z = v3.length();\n\n    \t};\n\n    }();\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     *\t- shows frustum, line of sight and up of the camera\n     *\t- suitable for fast updates\n     * \t- based on frustum visualization in lightgl.js shadowmap example\n     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n     */\n\n    function CameraHelper( camera ) {\n\n    \tvar geometry = new Geometry();\n    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n    \tvar pointMap = {};\n\n    \t// colors\n\n    \tvar hexFrustum = 0xffaa00;\n    \tvar hexCone = 0xff0000;\n    \tvar hexUp = 0x00aaff;\n    \tvar hexTarget = 0xffffff;\n    \tvar hexCross = 0x333333;\n\n    \t// near\n\n    \taddLine( \"n1\", \"n2\", hexFrustum );\n    \taddLine( \"n2\", \"n4\", hexFrustum );\n    \taddLine( \"n4\", \"n3\", hexFrustum );\n    \taddLine( \"n3\", \"n1\", hexFrustum );\n\n    \t// far\n\n    \taddLine( \"f1\", \"f2\", hexFrustum );\n    \taddLine( \"f2\", \"f4\", hexFrustum );\n    \taddLine( \"f4\", \"f3\", hexFrustum );\n    \taddLine( \"f3\", \"f1\", hexFrustum );\n\n    \t// sides\n\n    \taddLine( \"n1\", \"f1\", hexFrustum );\n    \taddLine( \"n2\", \"f2\", hexFrustum );\n    \taddLine( \"n3\", \"f3\", hexFrustum );\n    \taddLine( \"n4\", \"f4\", hexFrustum );\n\n    \t// cone\n\n    \taddLine( \"p\", \"n1\", hexCone );\n    \taddLine( \"p\", \"n2\", hexCone );\n    \taddLine( \"p\", \"n3\", hexCone );\n    \taddLine( \"p\", \"n4\", hexCone );\n\n    \t// up\n\n    \taddLine( \"u1\", \"u2\", hexUp );\n    \taddLine( \"u2\", \"u3\", hexUp );\n    \taddLine( \"u3\", \"u1\", hexUp );\n\n    \t// target\n\n    \taddLine( \"c\", \"t\", hexTarget );\n    \taddLine( \"p\", \"c\", hexCross );\n\n    \t// cross\n\n    \taddLine( \"cn1\", \"cn2\", hexCross );\n    \taddLine( \"cn3\", \"cn4\", hexCross );\n\n    \taddLine( \"cf1\", \"cf2\", hexCross );\n    \taddLine( \"cf3\", \"cf4\", hexCross );\n\n    \tfunction addLine( a, b, hex ) {\n\n    \t\taddPoint( a, hex );\n    \t\taddPoint( b, hex );\n\n    \t}\n\n    \tfunction addPoint( id, hex ) {\n\n    \t\tgeometry.vertices.push( new Vector3() );\n    \t\tgeometry.colors.push( new Color( hex ) );\n\n    \t\tif ( pointMap[ id ] === undefined ) {\n\n    \t\t\tpointMap[ id ] = [];\n\n    \t\t}\n\n    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n    \t}\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.camera = camera;\n    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n    \tthis.matrix = camera.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.pointMap = pointMap;\n\n    \tthis.update();\n\n    }\n\n    CameraHelper.prototype = Object.create( LineSegments.prototype );\n    CameraHelper.prototype.constructor = CameraHelper;\n\n    CameraHelper.prototype.update = function () {\n\n    \tvar geometry, pointMap;\n\n    \tvar vector = new Vector3();\n    \tvar camera = new Camera();\n\n    \tfunction setPoint( point, x, y, z ) {\n\n    \t\tvector.set( x, y, z ).unproject( camera );\n\n    \t\tvar points = pointMap[ point ];\n\n    \t\tif ( points !== undefined ) {\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \treturn function update() {\n\n    \t\tgeometry = this.geometry;\n    \t\tpointMap = this.pointMap;\n\n    \t\tvar w = 1, h = 1;\n\n    \t\t// we need just camera projection matrix\n    \t\t// world matrix must be identity\n\n    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n    \t\t// center / target\n\n    \t\tsetPoint( \"c\", 0, 0, - 1 );\n    \t\tsetPoint( \"t\", 0, 0,  1 );\n\n    \t\t// near\n\n    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n    \t\t// far\n\n    \t\tsetPoint( \"f1\", - w, - h, 1 );\n    \t\tsetPoint( \"f2\",   w, - h, 1 );\n    \t\tsetPoint( \"f3\", - w,   h, 1 );\n    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\n    \t\t// up\n\n    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n    \t\t// cross\n\n    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n    \t\tgeometry.verticesNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    // a helper to show the world-axis-aligned bounding box for an object\n\n    function BoundingBoxHelper( object, hex ) {\n\n    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n    \tthis.object = object;\n\n    \tthis.box = new Box3();\n\n    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n    }\n\n    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n    BoundingBoxHelper.prototype.update = function () {\n\n    \tthis.box.setFromObject( this.object );\n\n    \tthis.box.size( this.scale );\n\n    \tthis.box.getCenter( this.position );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BoxHelper( object, color ) {\n\n    \tif ( color === undefined ) color = 0xffff00;\n\n    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n    \tvar positions = new Float32Array( 8 * 3 );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n    \tif ( object !== undefined ) {\n\n    \t\tthis.update( object );\n\n    \t}\n\n    }\n\n    BoxHelper.prototype = Object.create( LineSegments.prototype );\n    BoxHelper.prototype.constructor = BoxHelper;\n\n    BoxHelper.prototype.update = ( function () {\n\n    \tvar box = new Box3();\n\n    \treturn function update( object ) {\n\n    \t\tif ( (object && object.isBox3) ) {\n\n    \t\t\tbox.copy( object );\n\n    \t\t} else {\n\n    \t\t\tbox.setFromObject( object );\n\n    \t\t}\n\n    \t\tif ( box.isEmpty() ) return;\n\n    \t\tvar min = box.min;\n    \t\tvar max = box.max;\n\n    \t\t/*\n    \t\t  5____4\n    \t\t1/___0/|\n    \t\t| 6__|_7\n    \t\t2/___3/\n\n    \t\t0: max.x, max.y, max.z\n    \t\t1: min.x, max.y, max.z\n    \t\t2: min.x, min.y, max.z\n    \t\t3: max.x, min.y, max.z\n    \t\t4: max.x, max.y, min.z\n    \t\t5: min.x, max.y, min.z\n    \t\t6: min.x, min.y, min.z\n    \t\t7: max.x, min.y, min.z\n    \t\t*/\n\n    \t\tvar position = this.geometry.attributes.position;\n    \t\tvar array = position.array;\n\n    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n    \t\tposition.needsUpdate = true;\n\n    \t\tthis.geometry.computeBoundingSphere();\n\n    \t};\n\n    } )();\n\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n    coneGeometry.translate( 0, - 0.5, 0 );\n\n    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n    \t// dir is assumed to be normalized\n\n    \tObject3D.call( this );\n\n    \tif ( color === undefined ) color = 0xffff00;\n    \tif ( length === undefined ) length = 1;\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.position.copy( origin );\n\n    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n    \tthis.line.matrixAutoUpdate = false;\n    \tthis.add( this.line );\n\n    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n    \tthis.cone.matrixAutoUpdate = false;\n    \tthis.add( this.cone );\n\n    \tthis.setDirection( dir );\n    \tthis.setLength( length, headLength, headWidth );\n\n    }\n\n    ArrowHelper.prototype = Object.create( Object3D.prototype );\n    ArrowHelper.prototype.constructor = ArrowHelper;\n\n    ArrowHelper.prototype.setDirection = ( function () {\n\n    \tvar axis = new Vector3();\n    \tvar radians;\n\n    \treturn function setDirection( dir ) {\n\n    \t\t// dir is assumed to be normalized\n\n    \t\tif ( dir.y > 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n    \t\t} else if ( dir.y < - 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n    \t\t} else {\n\n    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n    \t\t\tradians = Math.acos( dir.y );\n\n    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n    \t\t}\n\n    \t};\n\n    }() );\n\n    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n    \tthis.line.updateMatrix();\n\n    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n    \tthis.cone.position.y = length;\n    \tthis.cone.updateMatrix();\n\n    };\n\n    ArrowHelper.prototype.setColor = function ( color ) {\n\n    \tthis.line.material.color.copy( color );\n    \tthis.cone.material.color.copy( color );\n\n    };\n\n    /**\n     * @author sroucheray / http://sroucheray.org/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AxisHelper( size ) {\n\n    \tsize = size || 1;\n\n    \tvar vertices = new Float32Array( [\n    \t\t0, 0, 0,  size, 0, 0,\n    \t\t0, 0, 0,  0, size, 0,\n    \t\t0, 0, 0,  0, 0, size\n    \t] );\n\n    \tvar colors = new Float32Array( [\n    \t\t1, 0, 0,  1, 0.6, 0,\n    \t\t0, 1, 0,  0.6, 1, 0,\n    \t\t0, 0, 1,  0, 0.6, 1\n    \t] );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    AxisHelper.prototype = Object.create( LineSegments.prototype );\n    AxisHelper.prototype.constructor = AxisHelper;\n\n    /**\n     * @author zz85 https://github.com/zz85\n     *\n     * Centripetal CatmullRom Curve - which is useful for avoiding\n     * cusps and self-intersections in non-uniform catmull rom curves.\n     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n     *\n     * curve.type accepts centripetal(default), chordal and catmullrom\n     * curve.tension is used for catmullrom which defaults to 0.5\n     */\n\n    exports.CatmullRomCurve3 = ( function() {\n\n    \tvar\n    \t\ttmp = new Vector3(),\n    \t\tpx = new CubicPoly(),\n    \t\tpy = new CubicPoly(),\n    \t\tpz = new CubicPoly();\n\n    \t/*\n    \tBased on an optimized c++ solution in\n    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n    \t - http://ideone.com/NoEbVM\n\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n    \twhich can be placed in CurveUtils.\n    \t*/\n\n    \tfunction CubicPoly() {\n\n    \t}\n\n    \t/*\n    \t * Compute coefficients for a cubic polynomial\n    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    \t * such that\n    \t *   p(0) = x0, p(1) = x1\n    \t *  and\n    \t *   p'(0) = t0, p'(1) = t1.\n    \t */\n    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n    \t\tthis.c0 = x0;\n    \t\tthis.c1 = t0;\n    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n    \t};\n\n    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n    \t\t// compute tangents when parameterized in [t1,t2]\n    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n    \t\t// rescale tangents for parametrization in [0,1]\n    \t\tt1 *= dt1;\n    \t\tt2 *= dt1;\n\n    \t\t// initCubicPoly\n    \t\tthis.init( x1, x2, t1, t2 );\n\n    \t};\n\n    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n    \t};\n\n    \tCubicPoly.prototype.calc = function( t ) {\n\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t2 * t;\n    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n    \t};\n\n    \t// Subclass Three.js curve\n    \treturn Curve.create(\n\n    \t\tfunction ( p /* array of Vector3 */ ) {\n\n    \t\t\tthis.points = p || [];\n    \t\t\tthis.closed = false;\n\n    \t\t},\n\n    \t\tfunction ( t ) {\n\n    \t\t\tvar points = this.points,\n    \t\t\t\tpoint, intPoint, weight, l;\n\n    \t\t\tl = points.length;\n\n    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n    \t\t\tintPoint = Math.floor( point );\n    \t\t\tweight = point - intPoint;\n\n    \t\t\tif ( this.closed ) {\n\n    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n    \t\t\t\tintPoint = l - 2;\n    \t\t\t\tweight = 1;\n\n    \t\t\t}\n\n    \t\t\tvar p0, p1, p2, p3; // 4 points\n\n    \t\t\tif ( this.closed || intPoint > 0 ) {\n\n    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate first point\n    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n    \t\t\t\tp0 = tmp;\n\n    \t\t\t}\n\n    \t\t\tp1 = points[ intPoint % l ];\n    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate last point\n    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n    \t\t\t\tp3 = tmp;\n\n    \t\t\t}\n\n    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n    \t\t\t\t// safety check for repeated points\n    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\n    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n    \t\t\t}\n\n    \t\t\tvar v = new Vector3(\n    \t\t\t\tpx.calc( weight ),\n    \t\t\t\tpy.calc( weight ),\n    \t\t\t\tpz.calc( weight )\n    \t\t\t);\n\n    \t\t\treturn v;\n\n    \t\t}\n\n    \t);\n\n    } )();\n\n    /**************************************************************\n     *\tClosed Spline 3D curve\n     **************************************************************/\n\n\n    function ClosedSplineCurve3( points ) {\n\n    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n    \texports.CatmullRomCurve3.call( this, points );\n    \tthis.type = 'catmullrom';\n    \tthis.closed = true;\n\n    }\n\n    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\n    /**************************************************************\n     *\tSpline 3D curve\n     **************************************************************/\n\n\n    var SplineCurve3 = Curve.create(\n\n    \tfunction ( points /* array of Vector3 */ ) {\n\n    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n    \t\tthis.points = ( points === undefined ) ? [] : points;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar points = this.points;\n    \t\tvar point = ( points.length - 1 ) * t;\n\n    \t\tvar intPoint = Math.floor( point );\n    \t\tvar weight = point - intPoint;\n\n    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n    \t\tvar point1 = points[ intPoint ];\n    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\n    \t\treturn new Vector3(\n    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tCubic Bezier 3D curve\n     **************************************************************/\n\n    exports.CubicBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2, v3 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n    \t\tthis.v3 = v3;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b3 = exports.ShapeUtils.b3;\n\n    \t\treturn new Vector3(\n    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tQuadratic Bezier 3D curve\n     **************************************************************/\n\n    exports.QuadraticBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\n    \t\treturn new Vector3(\n    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tLine3D\n     **************************************************************/\n\n    exports.LineCurve3 = Curve.create(\n\n    \tfunction ( v1, v2 ) {\n\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tif ( t === 1 ) {\n\n    \t\t\treturn this.v2.clone();\n\n    \t\t}\n\n    \t\tvar vector = new Vector3();\n\n    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n    \t\tvector.multiplyScalar( t );\n    \t\tvector.add( this.v1 );\n\n    \t\treturn vector;\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tArc curve\n     **************************************************************/\n\n    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    }\n\n    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n    ArcCurve.prototype.constructor = ArcCurve;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    exports.SceneUtils = {\n\n    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n    \t\tvar group = new Group();\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n    \t\t}\n\n    \t\treturn group;\n\n    \t},\n\n    \tdetach: function ( child, parent, scene ) {\n\n    \t\tchild.applyMatrix( parent.matrixWorld );\n    \t\tparent.remove( child );\n    \t\tscene.add( child );\n\n    \t},\n\n    \tattach: function ( child, scene, parent ) {\n\n    \t\tvar matrixWorldInverse = new Matrix4();\n    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n    \t\tchild.applyMatrix( matrixWorldInverse );\n\n    \t\tscene.remove( child );\n    \t\tparent.add( child );\n\n    \t}\n\n    };\n\n    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n    \treturn new Face3( a, b, c, normal, color, materialIndex );\n    }\n\n    var LineStrip = 0;\n\n    var LinePieces = 1;\n\n    function PointCloud ( geometry, material ) {\n    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function ParticleSystem ( geometry, material ) {\n    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function PointCloudMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleBasicMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleSystemMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function Vertex ( x, y, z ) {\n    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n    \treturn new Vector3( x, y, z );\n    }\n\n    //\n\n    function EdgesHelper( object, hex ) {\n    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    function WireframeHelper( object, hex ) {\n    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    //\n\n    Object.assign( Box2.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Box3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Line3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Matrix3.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n    \t\treturn vector.applyMatrix3( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t}\n    } );\n\n    Object.assign( Matrix4.prototype, {\n    \textractPosition: function ( m ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n    \t\treturn this.copyPosition( m );\n    \t},\n    \tsetRotationFromQuaternion: function ( q ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n    \t\treturn this.makeRotationFromQuaternion( q );\n    \t},\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n    \t\treturn vector.applyProjection( this );\n    \t},\n    \tmultiplyVector4: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t},\n    \trotateAxis: function ( v ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n    \t\tv.transformDirection( this );\n    \t},\n    \tcrossVector: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \ttranslate: function ( v ) {\n    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n    \t},\n    \trotateX: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n    \t},\n    \trotateY: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n    \t},\n    \trotateZ: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n    \t},\n    \trotateByAxis: function ( axis, angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n    \t}\n    } );\n\n    Object.assign( Plane.prototype, {\n    \tisIntersectionLine: function ( line ) {\n    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n    \t\treturn this.intersectsLine( line );\n    \t}\n    } );\n\n    Object.assign( Quaternion.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n    \t\treturn vector.applyQuaternion( this );\n    \t}\n    } );\n\n    Object.assign( Ray.prototype, {\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionPlane: function ( plane ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n    \t\treturn this.intersectsPlane( plane );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t}\n    } );\n\n    Object.assign( Shape.prototype, {\n    \textrude: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n    \t\treturn new ExtrudeGeometry( this, options );\n    \t},\n    \tmakeGeometry: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n    \t\treturn new ShapeGeometry( this, options );\n    \t}\n    } );\n\n    Object.assign( Vector3.prototype, {\n    \tsetEulerFromRotationMatrix: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n    \t},\n    \tsetEulerFromQuaternion: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n    \t},\n    \tgetPositionFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n    \t\treturn this.setFromMatrixPosition( m );\n    \t},\n    \tgetScaleFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n    \t\treturn this.setFromMatrixScale( m );\n    \t},\n    \tgetColumnFromMatrix: function ( index, matrix ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n    \t\treturn this.setFromMatrixColumn( matrix, index );\n    \t}\n    } );\n\n    //\n\n    Object.assign( Object3D.prototype, {\n    \tgetChildByName: function ( name ) {\n    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n    \t\treturn this.getObjectByName( name );\n    \t},\n    \trenderDepth: function ( value ) {\n    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n    \t},\n    \ttranslate: function ( distance, axis ) {\n    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n    \t\treturn this.translateOnAxis( axis, distance );\n    \t}\n    } );\n\n    Object.defineProperties( Object3D.prototype, {\n    \teulerOrder: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\treturn this.rotation.order;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\tthis.rotation.order = value;\n    \t\t}\n    \t},\n    \tuseQuaternion: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( LOD.prototype, {\n    \tobjects: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n    \t\t\treturn this.levels;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n    \tthis.setFocalLength( focalLength );\n\n    };\n\n    //\n\n    Object.defineProperties( Light.prototype, {\n    \tonlyShadow: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n    \t\t}\n    \t},\n    \tshadowCameraFov: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n    \t\t\tthis.shadow.camera.fov = value;\n    \t\t}\n    \t},\n    \tshadowCameraLeft: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n    \t\t\tthis.shadow.camera.left = value;\n    \t\t}\n    \t},\n    \tshadowCameraRight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n    \t\t\tthis.shadow.camera.right = value;\n    \t\t}\n    \t},\n    \tshadowCameraTop: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n    \t\t\tthis.shadow.camera.top = value;\n    \t\t}\n    \t},\n    \tshadowCameraBottom: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n    \t\t\tthis.shadow.camera.bottom = value;\n    \t\t}\n    \t},\n    \tshadowCameraNear: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n    \t\t\tthis.shadow.camera.near = value;\n    \t\t}\n    \t},\n    \tshadowCameraFar: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n    \t\t\tthis.shadow.camera.far = value;\n    \t\t}\n    \t},\n    \tshadowCameraVisible: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n    \t\t}\n    \t},\n    \tshadowBias: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n    \t\t\tthis.shadow.bias = value;\n    \t\t}\n    \t},\n    \tshadowDarkness: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n    \t\t}\n    \t},\n    \tshadowMapWidth: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n    \t\t\tthis.shadow.mapSize.width = value;\n    \t\t}\n    \t},\n    \tshadowMapHeight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n    \t\t\tthis.shadow.mapSize.height = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( BufferAttribute.prototype, {\n    \tlength: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n    \t\t\treturn this.array.length;\n    \t\t}\n    \t}\n    } );\n\n    Object.assign( BufferGeometry.prototype, {\n    \taddIndex: function ( index ) {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n    \t\tthis.setIndex( index );\n    \t},\n    \taddDrawCall: function ( start, count, indexOffset ) {\n    \t\tif ( indexOffset !== undefined ) {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n    \t\t}\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n    \t\tthis.addGroup( start, count );\n    \t},\n    \tclearDrawCalls: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n    \t\tthis.clearGroups();\n    \t},\n    \tcomputeTangents: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n    \t},\n    \tcomputeOffsets: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( BufferGeometry.prototype, {\n    \tdrawcalls: {\n    \t\tget: function () {\n    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t},\n    \toffsets: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( Material.prototype, {\n    \twrapAround: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t}\n    \t},\n    \twrapRGB: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n    \t\t\treturn new Color();\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( MeshPhongMaterial.prototype, {\n    \tmetal: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n    \t\t\treturn false;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( ShaderMaterial.prototype, {\n    \tderivatives: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\treturn this.extensions.derivatives;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\tthis.extensions.derivatives = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    EventDispatcher.prototype = Object.assign( Object.create( {\n\n    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\n    \tconstructor: EventDispatcher,\n\n    \tapply: function ( target ) {\n\n    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n    \t\tObject.assign( target, this );\n\n    \t}\n\n    } ), EventDispatcher.prototype );\n\n    //\n\n    Object.assign( WebGLRenderer.prototype, {\n    \tsupportsFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_float' );\n    \t},\n    \tsupportsHalfFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n    \t},\n    \tsupportsStandardDerivatives: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n    \t},\n    \tsupportsCompressedTextureS3TC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n    \t},\n    \tsupportsCompressedTexturePVRTC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n    \t},\n    \tsupportsBlendMinMax: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n    \t},\n    \tsupportsVertexTextures: function () {\n    \t\treturn this.capabilities.vertexTextures;\n    \t},\n    \tsupportsInstancedArrays: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n    \t},\n    \tenableScissorTest: function ( boolean ) {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n    \t\tthis.setScissorTest( boolean );\n    \t},\n    \tinitMaterial: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n    \t},\n    \taddPrePlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n    \t},\n    \taddPostPlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n    \t},\n    \tupdateShadowMap: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( WebGLRenderer.prototype, {\n    \tshadowMapEnabled: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.enabled;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n    \t\t\tthis.shadowMap.enabled = value;\n    \t\t}\n    \t},\n    \tshadowMapType: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n    \t\t\tthis.shadowMap.type = value;\n    \t\t}\n    \t},\n    \tshadowMapCullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.cullFace;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n    \t\t\tthis.shadowMap.cullFace = value;\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( WebGLShadowMap.prototype, {\n    \tcullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n    \t\t},\n    \t\tset: function ( cullFace ) {\n    \t\t\tvar value = ( cullFace !== CullFaceBack );\n    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n    \t\t\tthis.renderReverseSided = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( WebGLRenderTarget.prototype, {\n    \twrapS: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\treturn this.texture.wrapS;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\tthis.texture.wrapS = value;\n    \t\t}\n    \t},\n    \twrapT: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\treturn this.texture.wrapT;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\tthis.texture.wrapT = value;\n    \t\t}\n    \t},\n    \tmagFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\treturn this.texture.magFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\tthis.texture.magFilter = value;\n    \t\t}\n    \t},\n    \tminFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\treturn this.texture.minFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\tthis.texture.minFilter = value;\n    \t\t}\n    \t},\n    \tanisotropy: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\treturn this.texture.anisotropy;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\tthis.texture.anisotropy = value;\n    \t\t}\n    \t},\n    \toffset: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\treturn this.texture.offset;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\tthis.texture.offset = value;\n    \t\t}\n    \t},\n    \trepeat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\treturn this.texture.repeat;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\tthis.texture.repeat = value;\n    \t\t}\n    \t},\n    \tformat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\treturn this.texture.format;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\tthis.texture.format = value;\n    \t\t}\n    \t},\n    \ttype: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\treturn this.texture.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\tthis.texture.type = value;\n    \t\t}\n    \t},\n    \tgenerateMipmaps: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\treturn this.texture.generateMipmaps;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\tthis.texture.generateMipmaps = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.assign( Audio.prototype, {\n    \tload: function ( file ) {\n    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n    \t\tvar scope = this;\n    \t\tvar audioLoader = new AudioLoader();\n    \t\taudioLoader.load( file, function ( buffer ) {\n    \t\t\tscope.setBuffer( buffer );\n    \t\t} );\n    \t\treturn this;\n    \t}\n    } );\n\n    Object.assign( AudioAnalyser.prototype, {\n    \tgetData: function ( file ) {\n    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n    \t\treturn this.getFrequencyData();\n    \t}\n    } );\n\n    //\n\n    var GeometryUtils = {\n\n    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n    \t\tvar matrix;\n\n    \t\tif ( geometry2.isMesh ) {\n\n    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n    \t\t\tmatrix = geometry2.matrix;\n    \t\t\tgeometry2 = geometry2.geometry;\n\n    \t\t}\n\n    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n    \t},\n\n    \tcenter: function ( geometry ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n    \t\treturn geometry.center();\n\n    \t}\n\n    };\n\n    var ImageUtils = {\n\n    \tcrossOrigin: undefined,\n\n    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n    \t\tvar loader = new TextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n    \t\tvar loader = new CubeTextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadCompressedTexture: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n    \t},\n\n    \tloadCompressedTextureCube: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n    \t}\n\n    };\n\n    //\n\n    function Projector () {\n\n    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n    \tthis.projectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n    \t\tvector.project( camera );\n\n    \t};\n\n    \tthis.unprojectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n    \t\tvector.unproject( camera );\n\n    \t};\n\n    \tthis.pickingRay = function ( vector, camera ) {\n\n    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n    \t};\n\n    }\n\n    //\n\n    function CanvasRenderer () {\n\n    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \tthis.clear = function () {};\n    \tthis.render = function () {};\n    \tthis.setClearColor = function () {};\n    \tthis.setSize = function () {};\n\n    }\n\n    Object.defineProperty( exports, 'AudioContext', {\n    \tget: function () {\n    \t\treturn exports.getAudioContext();\n    \t}\n    });\n\n    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n    exports.WebGLRenderTarget = WebGLRenderTarget;\n    exports.WebGLRenderer = WebGLRenderer;\n    exports.ShaderLib = ShaderLib;\n    exports.UniformsLib = UniformsLib;\n    exports.ShaderChunk = ShaderChunk;\n    exports.FogExp2 = FogExp2;\n    exports.Fog = Fog;\n    exports.Scene = Scene;\n    exports.LensFlare = LensFlare;\n    exports.Sprite = Sprite;\n    exports.LOD = LOD;\n    exports.SkinnedMesh = SkinnedMesh;\n    exports.Skeleton = Skeleton;\n    exports.Bone = Bone;\n    exports.Mesh = Mesh;\n    exports.LineSegments = LineSegments;\n    exports.Line = Line;\n    exports.Points = Points;\n    exports.Group = Group;\n    exports.VideoTexture = VideoTexture;\n    exports.DataTexture = DataTexture;\n    exports.CompressedTexture = CompressedTexture;\n    exports.CubeTexture = CubeTexture;\n    exports.CanvasTexture = CanvasTexture;\n    exports.DepthTexture = DepthTexture;\n    exports.TextureIdCount = TextureIdCount;\n    exports.Texture = Texture;\n    exports.MaterialIdCount = MaterialIdCount;\n    exports.CompressedTextureLoader = CompressedTextureLoader;\n    exports.BinaryTextureLoader = BinaryTextureLoader;\n    exports.DataTextureLoader = DataTextureLoader;\n    exports.CubeTextureLoader = CubeTextureLoader;\n    exports.TextureLoader = TextureLoader;\n    exports.ObjectLoader = ObjectLoader;\n    exports.MaterialLoader = MaterialLoader;\n    exports.BufferGeometryLoader = BufferGeometryLoader;\n    exports.LoadingManager = LoadingManager;\n    exports.JSONLoader = JSONLoader;\n    exports.ImageLoader = ImageLoader;\n    exports.FontLoader = FontLoader;\n    exports.XHRLoader = XHRLoader;\n    exports.Loader = Loader;\n    exports.AudioLoader = AudioLoader;\n    exports.SpotLightShadow = SpotLightShadow;\n    exports.SpotLight = SpotLight;\n    exports.PointLight = PointLight;\n    exports.HemisphereLight = HemisphereLight;\n    exports.DirectionalLightShadow = DirectionalLightShadow;\n    exports.DirectionalLight = DirectionalLight;\n    exports.AmbientLight = AmbientLight;\n    exports.LightShadow = LightShadow;\n    exports.Light = Light;\n    exports.StereoCamera = StereoCamera;\n    exports.PerspectiveCamera = PerspectiveCamera;\n    exports.OrthographicCamera = OrthographicCamera;\n    exports.CubeCamera = CubeCamera;\n    exports.Camera = Camera;\n    exports.AudioListener = AudioListener;\n    exports.PositionalAudio = PositionalAudio;\n    exports.getAudioContext = getAudioContext;\n    exports.AudioAnalyser = AudioAnalyser;\n    exports.Audio = Audio;\n    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n    exports.StringKeyframeTrack = StringKeyframeTrack;\n    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n    exports.PropertyMixer = PropertyMixer;\n    exports.PropertyBinding = PropertyBinding;\n    exports.KeyframeTrack = KeyframeTrack;\n    exports.AnimationObjectGroup = AnimationObjectGroup;\n    exports.AnimationMixer = AnimationMixer;\n    exports.AnimationClip = AnimationClip;\n    exports.Uniform = Uniform;\n    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n    exports.BufferGeometry = BufferGeometry;\n    exports.GeometryIdCount = GeometryIdCount;\n    exports.Geometry = Geometry;\n    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n    exports.InterleavedBuffer = InterleavedBuffer;\n    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n    exports.Float64Attribute = Float64Attribute;\n    exports.Float32Attribute = Float32Attribute;\n    exports.Uint32Attribute = Uint32Attribute;\n    exports.Int32Attribute = Int32Attribute;\n    exports.Uint16Attribute = Uint16Attribute;\n    exports.Int16Attribute = Int16Attribute;\n    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n    exports.Uint8Attribute = Uint8Attribute;\n    exports.Int8Attribute = Int8Attribute;\n    exports.BufferAttribute = BufferAttribute;\n    exports.Face3 = Face3;\n    exports.Object3DIdCount = Object3DIdCount;\n    exports.Object3D = Object3D;\n    exports.Raycaster = Raycaster;\n    exports.Layers = Layers;\n    exports.EventDispatcher = EventDispatcher;\n    exports.Clock = Clock;\n    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n    exports.LinearInterpolant = LinearInterpolant;\n    exports.DiscreteInterpolant = DiscreteInterpolant;\n    exports.CubicInterpolant = CubicInterpolant;\n    exports.Interpolant = Interpolant;\n    exports.Triangle = Triangle;\n    exports.Spline = Spline;\n    exports.Spherical = Spherical;\n    exports.Plane = Plane;\n    exports.Frustum = Frustum;\n    exports.Sphere = Sphere;\n    exports.Ray = Ray;\n    exports.Matrix4 = Matrix4;\n    exports.Matrix3 = Matrix3;\n    exports.Box3 = Box3;\n    exports.Box2 = Box2;\n    exports.Line3 = Line3;\n    exports.Euler = Euler;\n    exports.Vector4 = Vector4;\n    exports.Vector3 = Vector3;\n    exports.Vector2 = Vector2;\n    exports.Quaternion = Quaternion;\n    exports.Color = Color;\n    exports.MorphBlendMesh = MorphBlendMesh;\n    exports.ImmediateRenderObject = ImmediateRenderObject;\n    exports.VertexNormalsHelper = VertexNormalsHelper;\n    exports.SpotLightHelper = SpotLightHelper;\n    exports.SkeletonHelper = SkeletonHelper;\n    exports.PointLightHelper = PointLightHelper;\n    exports.HemisphereLightHelper = HemisphereLightHelper;\n    exports.GridHelper = GridHelper;\n    exports.FaceNormalsHelper = FaceNormalsHelper;\n    exports.DirectionalLightHelper = DirectionalLightHelper;\n    exports.CameraHelper = CameraHelper;\n    exports.BoundingBoxHelper = BoundingBoxHelper;\n    exports.BoxHelper = BoxHelper;\n    exports.ArrowHelper = ArrowHelper;\n    exports.AxisHelper = AxisHelper;\n    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n    exports.SplineCurve3 = SplineCurve3;\n    exports.ArcCurve = ArcCurve;\n    exports.EllipseCurve = EllipseCurve;\n    exports.SplineCurve = SplineCurve;\n    exports.CubicBezierCurve = CubicBezierCurve;\n    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n    exports.LineCurve = LineCurve;\n    exports.Shape = Shape;\n    exports.ShapePath = ShapePath;\n    exports.Path = Path;\n    exports.Font = Font;\n    exports.CurvePath = CurvePath;\n    exports.Curve = Curve;\n    exports.WireframeGeometry = WireframeGeometry;\n    exports.ParametricGeometry = ParametricGeometry;\n    exports.TetrahedronGeometry = TetrahedronGeometry;\n    exports.OctahedronGeometry = OctahedronGeometry;\n    exports.IcosahedronGeometry = IcosahedronGeometry;\n    exports.DodecahedronGeometry = DodecahedronGeometry;\n    exports.PolyhedronGeometry = PolyhedronGeometry;\n    exports.TubeGeometry = TubeGeometry;\n    exports.TorusKnotGeometry = TorusKnotGeometry;\n    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n    exports.TorusGeometry = TorusGeometry;\n    exports.TorusBufferGeometry = TorusBufferGeometry;\n    exports.TextGeometry = TextGeometry;\n    exports.SphereBufferGeometry = SphereBufferGeometry;\n    exports.SphereGeometry = SphereGeometry;\n    exports.RingGeometry = RingGeometry;\n    exports.RingBufferGeometry = RingBufferGeometry;\n    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n    exports.PlaneGeometry = PlaneGeometry;\n    exports.LatheGeometry = LatheGeometry;\n    exports.LatheBufferGeometry = LatheBufferGeometry;\n    exports.ShapeGeometry = ShapeGeometry;\n    exports.ExtrudeGeometry = ExtrudeGeometry;\n    exports.EdgesGeometry = EdgesGeometry;\n    exports.ConeGeometry = ConeGeometry;\n    exports.ConeBufferGeometry = ConeBufferGeometry;\n    exports.CylinderGeometry = CylinderGeometry;\n    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n    exports.CircleBufferGeometry = CircleBufferGeometry;\n    exports.CircleGeometry = CircleGeometry;\n    exports.BoxBufferGeometry = BoxBufferGeometry;\n    exports.BoxGeometry = BoxGeometry;\n    exports.ShadowMaterial = ShadowMaterial;\n    exports.SpriteMaterial = SpriteMaterial;\n    exports.RawShaderMaterial = RawShaderMaterial;\n    exports.ShaderMaterial = ShaderMaterial;\n    exports.PointsMaterial = PointsMaterial;\n    exports.MultiMaterial = MultiMaterial;\n    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n    exports.MeshStandardMaterial = MeshStandardMaterial;\n    exports.MeshPhongMaterial = MeshPhongMaterial;\n    exports.MeshNormalMaterial = MeshNormalMaterial;\n    exports.MeshLambertMaterial = MeshLambertMaterial;\n    exports.MeshDepthMaterial = MeshDepthMaterial;\n    exports.MeshBasicMaterial = MeshBasicMaterial;\n    exports.LineDashedMaterial = LineDashedMaterial;\n    exports.LineBasicMaterial = LineBasicMaterial;\n    exports.Material = Material;\n    exports.REVISION = REVISION;\n    exports.MOUSE = MOUSE;\n    exports.CullFaceNone = CullFaceNone;\n    exports.CullFaceBack = CullFaceBack;\n    exports.CullFaceFront = CullFaceFront;\n    exports.CullFaceFrontBack = CullFaceFrontBack;\n    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n    exports.BasicShadowMap = BasicShadowMap;\n    exports.PCFShadowMap = PCFShadowMap;\n    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n    exports.FrontSide = FrontSide;\n    exports.BackSide = BackSide;\n    exports.DoubleSide = DoubleSide;\n    exports.FlatShading = FlatShading;\n    exports.SmoothShading = SmoothShading;\n    exports.NoColors = NoColors;\n    exports.FaceColors = FaceColors;\n    exports.VertexColors = VertexColors;\n    exports.NoBlending = NoBlending;\n    exports.NormalBlending = NormalBlending;\n    exports.AdditiveBlending = AdditiveBlending;\n    exports.SubtractiveBlending = SubtractiveBlending;\n    exports.MultiplyBlending = MultiplyBlending;\n    exports.CustomBlending = CustomBlending;\n    exports.BlendingMode = BlendingMode;\n    exports.AddEquation = AddEquation;\n    exports.SubtractEquation = SubtractEquation;\n    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n    exports.MinEquation = MinEquation;\n    exports.MaxEquation = MaxEquation;\n    exports.ZeroFactor = ZeroFactor;\n    exports.OneFactor = OneFactor;\n    exports.SrcColorFactor = SrcColorFactor;\n    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n    exports.SrcAlphaFactor = SrcAlphaFactor;\n    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n    exports.DstAlphaFactor = DstAlphaFactor;\n    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n    exports.DstColorFactor = DstColorFactor;\n    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n    exports.NeverDepth = NeverDepth;\n    exports.AlwaysDepth = AlwaysDepth;\n    exports.LessDepth = LessDepth;\n    exports.LessEqualDepth = LessEqualDepth;\n    exports.EqualDepth = EqualDepth;\n    exports.GreaterEqualDepth = GreaterEqualDepth;\n    exports.GreaterDepth = GreaterDepth;\n    exports.NotEqualDepth = NotEqualDepth;\n    exports.MultiplyOperation = MultiplyOperation;\n    exports.MixOperation = MixOperation;\n    exports.AddOperation = AddOperation;\n    exports.NoToneMapping = NoToneMapping;\n    exports.LinearToneMapping = LinearToneMapping;\n    exports.ReinhardToneMapping = ReinhardToneMapping;\n    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n    exports.CineonToneMapping = CineonToneMapping;\n    exports.UVMapping = UVMapping;\n    exports.CubeReflectionMapping = CubeReflectionMapping;\n    exports.CubeRefractionMapping = CubeRefractionMapping;\n    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n    exports.TextureMapping = TextureMapping;\n    exports.RepeatWrapping = RepeatWrapping;\n    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n    exports.TextureWrapping = TextureWrapping;\n    exports.NearestFilter = NearestFilter;\n    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n    exports.LinearFilter = LinearFilter;\n    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n    exports.TextureFilter = TextureFilter;\n    exports.UnsignedByteType = UnsignedByteType;\n    exports.ByteType = ByteType;\n    exports.ShortType = ShortType;\n    exports.UnsignedShortType = UnsignedShortType;\n    exports.IntType = IntType;\n    exports.UnsignedIntType = UnsignedIntType;\n    exports.FloatType = FloatType;\n    exports.HalfFloatType = HalfFloatType;\n    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n    exports.UnsignedShort565Type = UnsignedShort565Type;\n    exports.UnsignedInt248Type = UnsignedInt248Type;\n    exports.AlphaFormat = AlphaFormat;\n    exports.RGBFormat = RGBFormat;\n    exports.RGBAFormat = RGBAFormat;\n    exports.LuminanceFormat = LuminanceFormat;\n    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n    exports.RGBEFormat = RGBEFormat;\n    exports.DepthFormat = DepthFormat;\n    exports.DepthStencilFormat = DepthStencilFormat;\n    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n    exports.LoopOnce = LoopOnce;\n    exports.LoopRepeat = LoopRepeat;\n    exports.LoopPingPong = LoopPingPong;\n    exports.InterpolateDiscrete = InterpolateDiscrete;\n    exports.InterpolateLinear = InterpolateLinear;\n    exports.InterpolateSmooth = InterpolateSmooth;\n    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n    exports.WrapAroundEnding = WrapAroundEnding;\n    exports.TrianglesDrawMode = TrianglesDrawMode;\n    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n    exports.LinearEncoding = LinearEncoding;\n    exports.sRGBEncoding = sRGBEncoding;\n    exports.GammaEncoding = GammaEncoding;\n    exports.RGBEEncoding = RGBEEncoding;\n    exports.LogLuvEncoding = LogLuvEncoding;\n    exports.RGBM7Encoding = RGBM7Encoding;\n    exports.RGBM16Encoding = RGBM16Encoding;\n    exports.RGBDEncoding = RGBDEncoding;\n    exports.BasicDepthPacking = BasicDepthPacking;\n    exports.RGBADepthPacking = RGBADepthPacking;\n    exports.CubeGeometry = BoxGeometry;\n    exports.Face4 = Face4;\n    exports.LineStrip = LineStrip;\n    exports.LinePieces = LinePieces;\n    exports.MeshFaceMaterial = MultiMaterial;\n    exports.PointCloud = PointCloud;\n    exports.Particle = Sprite;\n    exports.ParticleSystem = ParticleSystem;\n    exports.PointCloudMaterial = PointCloudMaterial;\n    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n    exports.Vertex = Vertex;\n    exports.EdgesHelper = EdgesHelper;\n    exports.WireframeHelper = WireframeHelper;\n    exports.GeometryUtils = GeometryUtils;\n    exports.ImageUtils = ImageUtils;\n    exports.Projector = Projector;\n    exports.CanvasRenderer = CanvasRenderer;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/three/build/three.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}